{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Options",
  "type": "object",
  "properties": {
    "allowed-confusables": {
      "description": "A list of allowed \"confusable\" Unicode characters to ignore when\nenforcing `RUF001`, `RUF002`, and `RUF003`.",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "type": "string",
        "maxLength": 1,
        "minLength": 1
      }
    },
    "analyze": {
      "description": "Options to configure import map generation.",
      "anyOf": [
        {
          "$ref": "#/definitions/AnalyzeOptions"
        },
        {
          "type": "null"
        }
      ]
    },
    "builtins": {
      "description": "A list of builtins to treat as defined references, in addition to the\nsystem builtins.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "cache-dir": {
      "description": "A path to the cache directory.\n\nBy default, Ruff stores cache results in a `.ruff_cache` directory in\nthe current project root.\n\nHowever, Ruff will also respect the `RUFF_CACHE_DIR` environment\nvariable, which takes precedence over that default.\n\nThis setting will override even the `RUFF_CACHE_DIR` environment\nvariable, if set.",
      "type": [
        "string",
        "null"
      ]
    },
    "dummy-variable-rgx": {
      "description": "A regular expression used to identify \"dummy\" variables, or those which\nshould be ignored when enforcing (e.g.) unused-variable rules. The\ndefault expression matches `_`, `__`, and `_var`, but not `_var_`.",
      "type": [
        "string",
        "null"
      ],
      "deprecated": true
    },
    "exclude": {
      "description": "A list of file patterns to exclude from formatting and linting.\n\nExclusions are based on globs, and can be either:\n\n- Single-path patterns, like `.mypy_cache` (to exclude any directory\n  named `.mypy_cache` in the tree), `foo.py` (to exclude any file named\n  `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ).\n- Relative patterns, like `directory/foo.py` (to exclude that specific\n  file) or `directory/*.py` (to exclude any Python files in\n  `directory`). Note that these paths are relative to the project root\n  (e.g., the directory containing your `pyproject.toml`).\n\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\n\nNote that you'll typically want to use\n[`extend-exclude`](#extend-exclude) to modify the excluded paths.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "explicit-preview-rules": {
      "description": "Whether to require exact codes to select preview rules. When enabled,\npreview rules will not be selected by prefixes â€” the full code of each\npreview rule will be required to enable the rule.",
      "type": [
        "boolean",
        "null"
      ],
      "deprecated": true
    },
    "extend": {
      "description": "A path to a local `pyproject.toml` or `ruff.toml` file to merge into this\nconfiguration. User home directory and environment variables will be\nexpanded.\n\nTo resolve the current configuration file, Ruff will first load\nthis base configuration file, then merge in properties defined\nin the current configuration file. Most settings follow simple override\nbehavior where the child value replaces the parent value. However,\nrule selection (`lint.select` and `lint.ignore`) has special merging\nbehavior: if the child configuration specifies `lint.select`, it\nestablishes a new baseline rule set and the parent's `lint.ignore`\nrules are discarded; if the child configuration omits `lint.select`,\nthe parent's rule selection is inherited and both parent and child\n`lint.ignore` rules are accumulated together.",
      "type": [
        "string",
        "null"
      ]
    },
    "extend-exclude": {
      "description": "A list of file patterns to omit from formatting and linting, in addition to those\nspecified by [`exclude`](#exclude).\n\nExclusions are based on globs, and can be either:\n\n- Single-path patterns, like `.mypy_cache` (to exclude any directory\n  named `.mypy_cache` in the tree), `foo.py` (to exclude any file named\n  `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ).\n- Relative patterns, like `directory/foo.py` (to exclude that specific\n  file) or `directory/*.py` (to exclude any Python files in\n  `directory`). Note that these paths are relative to the project root\n  (e.g., the directory containing your `pyproject.toml`).\n\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "extend-fixable": {
      "description": "A list of rule codes or prefixes to consider fixable, in addition to those\nspecified by [`fixable`](#lint_fixable).",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "$ref": "#/definitions/RuleSelector"
      }
    },
    "extend-ignore": {
      "description": "A list of rule codes or prefixes to ignore, in addition to those\nspecified by `ignore`.",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "$ref": "#/definitions/RuleSelector"
      }
    },
    "extend-include": {
      "description": "A list of file patterns to include when linting, in addition to those\nspecified by [`include`](#include).\n\nInclusion are based on globs, and should be single-path patterns, like\n`*.pyw`, to include any file with the `.pyw` extension.\n\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "extend-per-file-ignores": {
      "description": "A list of mappings from file pattern to rule codes or prefixes to\nexclude, in addition to any rules excluded by [`per-file-ignores`](#lint_per-file-ignores).",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/RuleSelector"
        }
      },
      "deprecated": true
    },
    "extend-safe-fixes": {
      "description": "A list of rule codes or prefixes for which unsafe fixes should be considered\nsafe.",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "$ref": "#/definitions/RuleSelector"
      }
    },
    "extend-select": {
      "description": "A list of rule codes or prefixes to enable, in addition to those\nspecified by [`select`](#lint_select).",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "$ref": "#/definitions/RuleSelector"
      }
    },
    "extend-unfixable": {
      "description": "A list of rule codes or prefixes to consider non-auto-fixable, in addition to those\nspecified by [`unfixable`](#lint_unfixable).",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "$ref": "#/definitions/RuleSelector"
      }
    },
    "extend-unsafe-fixes": {
      "description": "A list of rule codes or prefixes for which safe fixes should be considered\nunsafe.",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "$ref": "#/definitions/RuleSelector"
      }
    },
    "external": {
      "description": "A list of rule codes or prefixes that are unsupported by Ruff, but should be\npreserved when (e.g.) validating `# noqa` directives. Useful for\nretaining `# noqa` directives that cover plugins not yet implemented\nby Ruff.",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "type": "string"
      }
    },
    "fix": {
      "description": "Enable fix behavior by-default when running `ruff` (overridden\nby the `--fix` and `--no-fix` command-line flags).\nOnly includes automatic fixes unless `--unsafe-fixes` is provided.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "fix-only": {
      "description": "Like [`fix`](#fix), but disables reporting on leftover violation. Implies [`fix`](#fix).",
      "type": [
        "boolean",
        "null"
      ]
    },
    "fixable": {
      "description": "A list of rule codes or prefixes to consider fixable. By default,\nall rules are considered fixable.",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "$ref": "#/definitions/RuleSelector"
      }
    },
    "flake8-annotations": {
      "description": "Options for the `flake8-annotations` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8AnnotationsOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-bandit": {
      "description": "Options for the `flake8-bandit` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8BanditOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-boolean-trap": {
      "description": "Options for the `flake8-boolean-trap` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8BooleanTrapOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-bugbear": {
      "description": "Options for the `flake8-bugbear` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8BugbearOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-builtins": {
      "description": "Options for the `flake8-builtins` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8BuiltinsOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-comprehensions": {
      "description": "Options for the `flake8-comprehensions` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8ComprehensionsOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-copyright": {
      "description": "Options for the `flake8-copyright` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8CopyrightOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-errmsg": {
      "description": "Options for the `flake8-errmsg` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8ErrMsgOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-gettext": {
      "description": "Options for the `flake8-gettext` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8GetTextOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-implicit-str-concat": {
      "description": "Options for the `flake8-implicit-str-concat` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8ImplicitStrConcatOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-import-conventions": {
      "description": "Options for the `flake8-import-conventions` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8ImportConventionsOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-pytest-style": {
      "description": "Options for the `flake8-pytest-style` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8PytestStyleOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-quotes": {
      "description": "Options for the `flake8-quotes` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8QuotesOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-self": {
      "description": "Options for the `flake8_self` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8SelfOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-tidy-imports": {
      "description": "Options for the `flake8-tidy-imports` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8TidyImportsOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-type-checking": {
      "description": "Options for the `flake8-type-checking` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8TypeCheckingOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "flake8-unused-arguments": {
      "description": "Options for the `flake8-unused-arguments` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flake8UnusedArgumentsOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "force-exclude": {
      "description": "Whether to enforce [`exclude`](#exclude) and [`extend-exclude`](#extend-exclude) patterns,\neven for paths that are passed to Ruff explicitly. Typically, Ruff will lint\nany paths passed in directly, even if they would typically be\nexcluded. Setting `force-exclude = true` will cause Ruff to\nrespect these exclusions unequivocally.\n\nThis is useful for [`pre-commit`](https://pre-commit.com/), which explicitly passes all\nchanged files to the [`ruff-pre-commit`](https://github.com/astral-sh/ruff-pre-commit)\nplugin, regardless of whether they're marked as excluded by Ruff's own\nsettings.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "format": {
      "description": "Options to configure code formatting.",
      "anyOf": [
        {
          "$ref": "#/definitions/FormatOptions"
        },
        {
          "type": "null"
        }
      ]
    },
    "ignore": {
      "description": "A list of rule codes or prefixes to ignore. Prefixes can specify exact\nrules (like `F841`), entire categories (like `F`), or anything in\nbetween.\n\nWhen breaking ties between enabled and disabled rules (via `select` and\n`ignore`, respectively), more specific prefixes override less\nspecific prefixes. `ignore` takes precedence over `select` if the same\nprefix appears in both.",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "$ref": "#/definitions/RuleSelector"
      }
    },
    "ignore-init-module-imports": {
      "description": "Avoid automatically removing unused imports in `__init__.py` files. Such\nimports will still be flagged, but with a dedicated message suggesting\nthat the import is either added to the module's `__all__` symbol, or\nre-exported with a redundant alias (e.g., `import os as os`).\n\nThis option is enabled by default, but you can opt-in to removal of imports\nvia an unsafe fix.",
      "type": [
        "boolean",
        "null"
      ],
      "deprecated": true
    },
    "include": {
      "description": "A list of file patterns to include when linting.\n\nInclusion are based on globs, and should be single-path patterns, like\n`*.pyw`, to include any file with the `.pyw` extension. `pyproject.toml` is\nincluded here not for configuration but because we lint whether e.g. the\n`[project]` matches the schema.\n\nNotebook files (`.ipynb` extension) are included by default on Ruff 0.6.0+.\n\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "indent-width": {
      "description": "The number of spaces per indentation level (tab).\n\nUsed by the formatter and when enforcing long-line violations (like `E501`) to determine the visual\nwidth of a tab.\n\nThis option changes the number of spaces the formatter inserts when\nusing soft-tabs (`indent-style = space`).\n\nPEP 8 recommends using 4 spaces per [indentation level](https://peps.python.org/pep-0008/#indentation).",
      "anyOf": [
        {
          "$ref": "#/definitions/IndentWidth"
        },
        {
          "type": "null"
        }
      ]
    },
    "isort": {
      "description": "Options for the `isort` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/IsortOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "line-length": {
      "description": "The line length to use when enforcing long-lines violations (like `E501`)\nand at which `isort` and the formatter prefers to wrap lines.\n\nThe length is determined by the number of characters per line, except for lines containing East Asian characters or emojis.\nFor these lines, the [unicode width](https://unicode.org/reports/tr11/) of each character is added up to determine the length.\n\nThe value must be greater than `0` and less than or equal to `320`.\n\nNote: While the formatter will attempt to format lines such that they remain\nwithin the `line-length`, it isn't a hard upper bound, and formatted lines may\nexceed the `line-length`.\n\nSee [`pycodestyle.max-line-length`](#lint_pycodestyle_max-line-length) to configure different lengths for `E501` and the formatter.",
      "anyOf": [
        {
          "$ref": "#/definitions/LineLength"
        },
        {
          "type": "null"
        }
      ]
    },
    "lint": {
      "anyOf": [
        {
          "$ref": "#/definitions/LintOptions"
        },
        {
          "type": "null"
        }
      ]
    },
    "logger-objects": {
      "description": "A list of objects that should be treated equivalently to a\n`logging.Logger` object.\n\nThis is useful for ensuring proper diagnostics (e.g., to identify\n`logging` deprecations and other best-practices) for projects that\nre-export a `logging.Logger` object from a common module.\n\nFor example, if you have a module `logging_setup.py` with the following\ncontents:\n```python\nimport logging\n\nlogger = logging.getLogger(__name__)\n```\n\nAdding `\"logging_setup.logger\"` to `logger-objects` will ensure that\n`logging_setup.logger` is treated as a `logging.Logger` object when\nimported from other modules (e.g., `from logging_setup import logger`).",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "type": "string"
      }
    },
    "mccabe": {
      "description": "Options for the `mccabe` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/McCabeOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "namespace-packages": {
      "description": "Mark the specified directories as namespace packages. For the purpose of\nmodule resolution, Ruff will treat those directories and all their subdirectories\nas if they contained an `__init__.py` file.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "output-format": {
      "description": "The style in which violation messages should be formatted: `\"full\"` (default)\n(shows source), `\"concise\"`, `\"grouped\"` (group messages by file), `\"json\"`\n(machine-readable), `\"junit\"` (machine-readable XML), `\"github\"` (GitHub\nActions annotations), `\"gitlab\"` (GitLab CI code quality report),\n`\"pylint\"` (Pylint text format) or `\"azure\"` (Azure Pipeline logging commands).",
      "anyOf": [
        {
          "$ref": "#/definitions/OutputFormat"
        },
        {
          "type": "null"
        }
      ]
    },
    "pep8-naming": {
      "description": "Options for the `pep8-naming` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Pep8NamingOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "per-file-ignores": {
      "description": "A list of mappings from file pattern to rule codes or prefixes to\nexclude, when considering any matching files. An initial '!' negates\nthe file pattern.",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/RuleSelector"
        }
      },
      "deprecated": true
    },
    "per-file-target-version": {
      "description": "A list of mappings from glob-style file pattern to Python version to use when checking the\ncorresponding file(s).\n\nThis may be useful for overriding the global Python version settings in `target-version` or\n`requires-python` for a subset of files. For example, if you have a project with a minimum\nsupported Python version of 3.9 but a subdirectory of developer scripts that want to use a\nnewer feature like the `match` statement from Python 3.10, you can use\n`per-file-target-version` to specify `\"developer_scripts/*.py\" = \"py310\"`.\n\nThis setting is used by the linter to enforce any enabled version-specific lint rules, as\nwell as by the formatter for any version-specific formatting options, such as parenthesizing\ncontext managers on Python 3.10+.",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "$ref": "#/definitions/PythonVersion"
      }
    },
    "preview": {
      "description": "Whether to enable preview mode. When preview mode is enabled, Ruff will\nuse unstable rules, fixes, and formatting.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "pycodestyle": {
      "description": "Options for the `pycodestyle` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/PycodestyleOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "pydocstyle": {
      "description": "Options for the `pydocstyle` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/PydocstyleOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "pyflakes": {
      "description": "Options for the `pyflakes` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/PyflakesOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "pylint": {
      "description": "Options for the `pylint` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/PylintOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "pyupgrade": {
      "description": "Options for the `pyupgrade` plugin.",
      "anyOf": [
        {
          "$ref": "#/definitions/PyUpgradeOptions"
        },
        {
          "type": "null"
        }
      ],
      "deprecated": true
    },
    "required-version": {
      "description": "Enforce a requirement on the version of Ruff, to enforce at runtime.\nIf the version of Ruff does not meet the requirement, Ruff will exit\nwith an error.\n\nUseful for unifying results across many environments, e.g., with a\n`pyproject.toml` file.\n\nAccepts a [PEP 440](https://peps.python.org/pep-0440/) specifier, like `==0.3.1` or `>=0.3.1`.",
      "anyOf": [
        {
          "$ref": "#/definitions/RequiredVersion"
        },
        {
          "type": "null"
        }
      ]
    },
    "respect-gitignore": {
      "description": "Whether to automatically exclude files that are ignored by `.ignore`,\n`.gitignore`, `.git/info/exclude`, and global `gitignore` files.\nEnabled by default.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "select": {
      "description": "A list of rule codes or prefixes to enable. Prefixes can specify exact\nrules (like `F841`), entire categories (like `F`), or anything in\nbetween.\n\nWhen breaking ties between enabled and disabled rules (via `select` and\n`ignore`, respectively), more specific prefixes override less\nspecific prefixes. `ignore` takes precedence over `select` if the\nsame prefix appears in both.",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "$ref": "#/definitions/RuleSelector"
      }
    },
    "show-fixes": {
      "description": "Whether to show an enumeration of all fixed lint violations\n(overridden by the `--show-fixes` command-line flag).",
      "type": [
        "boolean",
        "null"
      ]
    },
    "src": {
      "description": "The directories to consider when resolving first- vs. third-party\nimports.\n\nWhen omitted, the `src` directory will typically default to including both:\n\n1. The directory containing the nearest `pyproject.toml`, `ruff.toml`, or `.ruff.toml` file (the \"project root\").\n2. The `\"src\"` subdirectory of the project root.\n\nThese defaults ensure that Ruff supports both flat layouts and `src` layouts out-of-the-box.\n(If a configuration file is explicitly provided (e.g., via the `--config` command-line\nflag), the current working directory will be considered the project root.)\n\nAs an example, consider an alternative project structure, like:\n\n```text\nmy_project\nâ”œâ”€â”€ pyproject.toml\nâ””â”€â”€ lib\n    â””â”€â”€ my_package\n        â”œâ”€â”€ __init__.py\n        â”œâ”€â”€ foo.py\n        â””â”€â”€ bar.py\n```\n\nIn this case, the `./lib` directory should be included in the `src` option\n(e.g., `src = [\"lib\"]`), such that when resolving imports, `my_package.foo`\nis considered first-party.\n\nThis field supports globs. For example, if you have a series of Python\npackages in a `python_modules` directory, `src = [\"python_modules/*\"]`\nwould expand to incorporate all packages in that directory. User home\ndirectory and environment variables will also be expanded.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "target-version": {
      "description": "The minimum Python version to target, e.g., when considering automatic\ncode upgrades, like rewriting type annotations. Ruff will not propose\nchanges using features that are not available in the given version.\n\nFor example, to represent supporting Python >=3.11 or ==3.11\nspecify `target-version = \"py311\"`.\n\nIf you're already using a `pyproject.toml` file, we recommend\n`project.requires-python` instead, as it's based on Python packaging\nstandards, and will be respected by other tools. For example, Ruff\ntreats the following as identical to `target-version = \"py38\"`:\n\n```toml\n[project]\nrequires-python = \">=3.8\"\n```\n\nIf both are specified, `target-version` takes precedence over\n`requires-python`. See [_Inferring the Python version_](https://docs.astral.sh/ruff/configuration/#inferring-the-python-version)\nfor a complete description of how the `target-version` is determined\nwhen left unspecified.\n\nNote that a stub file can [sometimes make use of a typing feature](https://typing.python.org/en/latest/spec/distributing.html#syntax)\nbefore it is available at runtime, as long as the stub does not make\nuse of new *syntax*. For example, a type checker will understand\n`int | str` in a stub as being a `Union` type annotation, even if the\ntype checker is run using Python 3.9, despite the fact that the `|`\noperator can only be used to create union types at runtime on Python\n3.10+. As such, Ruff will often recommend newer features in a stub\nfile than it would for an equivalent runtime file with the same target\nversion.",
      "anyOf": [
        {
          "$ref": "#/definitions/PythonVersion"
        },
        {
          "type": "null"
        }
      ]
    },
    "task-tags": {
      "description": "A list of task tags to recognize (e.g., \"TODO\", \"FIXME\", \"XXX\").\n\nComments starting with these tags will be ignored by commented-out code\ndetection (`ERA`), and skipped by line-length rules (`E501`) if\n[`ignore-overlong-task-comments`](#lint_pycodestyle_ignore-overlong-task-comments) is set to `true`.",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "type": "string"
      }
    },
    "typing-modules": {
      "description": "A list of modules whose exports should be treated equivalently to\nmembers of the `typing` module.\n\nThis is useful for ensuring proper type annotation inference for\nprojects that re-export `typing` and `typing_extensions` members\nfrom a compatibility module. If omitted, any members imported from\nmodules apart from `typing` and `typing_extensions` will be treated\nas ordinary Python objects.",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "type": "string"
      }
    },
    "unfixable": {
      "description": "A list of rule codes or prefixes to consider non-fixable.",
      "type": [
        "array",
        "null"
      ],
      "deprecated": true,
      "items": {
        "$ref": "#/definitions/RuleSelector"
      }
    },
    "unsafe-fixes": {
      "description": "Enable application of unsafe fixes.\nIf excluded, a hint will be displayed when unsafe fixes are available.\nIf set to false, the hint will be hidden.",
      "type": [
        "boolean",
        "null"
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Alias": {
      "type": "string"
    },
    "AnalyzeOptions": {
      "description": "Configures Ruff's `analyze` command.",
      "type": "object",
      "properties": {
        "detect-string-imports": {
          "description": "Whether to detect imports from string literals. When enabled, Ruff will search for string\nliterals that \"look like\" import paths, and include them in the import map, if they resolve\nto valid Python modules.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "direction": {
          "description": "Whether to generate a map from file to files that it depends on (dependencies) or files that\ndepend on it (dependents).",
          "anyOf": [
            {
              "$ref": "#/definitions/Direction"
            },
            {
              "type": "null"
            }
          ]
        },
        "exclude": {
          "description": "A list of file patterns to exclude from analysis in addition to the files excluded globally (see [`exclude`](#exclude), and [`extend-exclude`](#extend-exclude)).\n\nExclusions are based on globs, and can be either:\n\n- Single-path patterns, like `.mypy_cache` (to exclude any directory\n  named `.mypy_cache` in the tree), `foo.py` (to exclude any file named\n  `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ).\n- Relative patterns, like `directory/foo.py` (to exclude that specific\n  file) or `directory/*.py` (to exclude any Python files in\n  `directory`). Note that these paths are relative to the project root\n  (e.g., the directory containing your `pyproject.toml`).\n\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "include-dependencies": {
          "description": "A map from file path to the list of Python or non-Python file paths or globs that should be\nconsidered dependencies of that file, regardless of whether relevant imports are detected.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "preview": {
          "description": "Whether to enable preview mode. When preview mode is enabled, Ruff will expose unstable\ncommands.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "string-imports-min-dots": {
          "description": "The minimum number of dots in a string to consider it a valid import.\n\nThis setting is only relevant when [`detect-string-imports`](#detect-string-imports) is enabled.\nFor example, if this is set to `2`, then only strings with at least two dots (e.g., `\"path.to.module\"`)\nwould be considered valid imports.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        }
      },
      "additionalProperties": false
    },
    "ApiBan": {
      "type": "object",
      "properties": {
        "msg": {
          "description": "The message to display when the API is used.",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "required": [
        "msg"
      ]
    },
    "BannedAliases": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ConstantType": {
      "type": "string",
      "enum": [
        "bytes",
        "complex",
        "float",
        "int",
        "str"
      ]
    },
    "Convention": {
      "oneOf": [
        {
          "description": "Use Google-style docstrings.",
          "type": "string",
          "const": "google"
        },
        {
          "description": "Use NumPy-style docstrings.",
          "type": "string",
          "const": "numpy"
        },
        {
          "description": "Use PEP257-style docstrings.",
          "type": "string",
          "const": "pep257"
        }
      ]
    },
    "Direction": {
      "oneOf": [
        {
          "description": "Construct a map from module to its dependencies (i.e., the modules that it imports).",
          "type": "string",
          "const": "dependencies"
        },
        {
          "description": "Construct a map from module to its dependents (i.e., the modules that import it).",
          "type": "string",
          "const": "dependents"
        }
      ]
    },
    "DocstringCodeLineWidth": {
      "anyOf": [
        {
          "description": "Wrap docstring code examples at a fixed line width.",
          "oneOf": [
            {
              "$ref": "#/definitions/LineWidth"
            }
          ]
        },
        {
          "description": "Respect the line length limit setting for the surrounding Python code.",
          "const": "dynamic"
        }
      ]
    },
    "Flake8AnnotationsOptions": {
      "description": "Options for the `flake8-annotations` plugin.",
      "type": "object",
      "properties": {
        "allow-star-arg-any": {
          "description": "Whether to suppress `ANN401` for dynamically typed `*args` and\n`**kwargs` arguments.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignore-fully-untyped": {
          "description": "Whether to suppress `ANN*` rules for any declaration\nthat hasn't been typed at all.\nThis makes it easier to gradually add types to a codebase.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "mypy-init-return": {
          "description": "Whether to allow the omission of a return type hint for `__init__` if at\nleast one argument is annotated.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "suppress-dummy-args": {
          "description": "Whether to suppress `ANN000`-level violations for arguments matching the\n\"dummy\" variable regex (like `_`).",
          "type": [
            "boolean",
            "null"
          ]
        },
        "suppress-none-returning": {
          "description": "Whether to suppress `ANN200`-level violations for functions that meet\neither of the following criteria:\n\n- Contain no `return` statement.\n- Explicit `return` statement(s) all return `None` (explicitly or\n  implicitly).",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Flake8BanditOptions": {
      "description": "Options for the `flake8-bandit` plugin.",
      "type": "object",
      "properties": {
        "allowed-markup-calls": {
          "description": "A list of callable names, whose result may be safely passed into\n[`markupsafe.Markup`](https://markupsafe.palletsprojects.com/en/stable/escaping/#markupsafe.Markup).\n\nExpects to receive a list of fully-qualified names (e.g., `bleach.clean`, rather than `clean`).\n\nThis setting helps you avoid false positives in code like:\n\n```python\nfrom bleach import clean\nfrom markupsafe import Markup\n\ncleaned_markup = Markup(clean(some_user_input))\n```\n\nWhere the use of [`bleach.clean`](https://bleach.readthedocs.io/en/latest/clean.html)\nusually ensures that there's no XSS vulnerability.\n\nAlthough it is not recommended, you may also use this setting to whitelist other\nkinds of calls, e.g. calls to i18n translation functions, where how safe that is\nwill depend on the implementation and how well the translations are audited.\n\nAnother common use-case is to wrap the output of functions that generate markup\nlike [`xml.etree.ElementTree.tostring`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring)\nor template rendering engines where sanitization of potential user input is either\nalready baked in or has to happen before rendering.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "check-typed-exception": {
          "description": "Whether to disallow `try`-`except`-`pass` (`S110`) for specific\nexception types. By default, `try`-`except`-`pass` is only\ndisallowed for `Exception` and `BaseException`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "extend-markup-names": {
          "description": "A list of additional callable names that behave like\n[`markupsafe.Markup`](https://markupsafe.palletsprojects.com/en/stable/escaping/#markupsafe.Markup).\n\nExpects to receive a list of fully-qualified names (e.g., `webhelpers.html.literal`, rather than\n`literal`).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "hardcoded-tmp-directory": {
          "description": "A list of directories to consider temporary (see `S108`).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "hardcoded-tmp-directory-extend": {
          "description": "A list of directories to consider temporary, in addition to those\nspecified by [`hardcoded-tmp-directory`](#lint_flake8-bandit_hardcoded-tmp-directory) (see `S108`).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "Flake8BooleanTrapOptions": {
      "description": "Options for the `flake8-boolean-trap` plugin",
      "type": "object",
      "properties": {
        "extend-allowed-calls": {
          "description": "Additional callable functions with which to allow boolean traps.\n\nExpects to receive a list of fully-qualified names (e.g., `pydantic.Field`, rather than\n`Field`).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "Flake8BugbearOptions": {
      "description": "Options for the `flake8-bugbear` plugin.",
      "type": "object",
      "properties": {
        "extend-immutable-calls": {
          "description": "Additional callable functions to consider \"immutable\" when evaluating, e.g., the\n`function-call-in-default-argument` rule (`B008`) or `function-call-in-dataclass-defaults`\nrule (`RUF009`).\n\nExpects to receive a list of fully-qualified names (e.g., `fastapi.Query`, rather than\n`Query`).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "Flake8BuiltinsOptions": {
      "description": "Options for the `flake8-builtins` plugin.",
      "type": "object",
      "properties": {
        "allowed-modules": {
          "description": "List of builtin module names to allow.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "builtins-allowed-modules": {
          "description": "DEPRECATED: This option has been renamed to `allowed-modules`. Use `allowed-modules` instead.\n\nList of builtin module names to allow.\n\nThis option is ignored if both `allowed-modules` and `builtins-allowed-modules` are set.",
          "type": [
            "array",
            "null"
          ],
          "deprecated": true,
          "items": {
            "type": "string"
          }
        },
        "builtins-ignorelist": {
          "description": "DEPRECATED: This option has been renamed to `ignorelist`. Use `ignorelist` instead.\n\nIgnore list of builtins.\n\nThis option is ignored if both `ignorelist` and `builtins-ignorelist` are set.",
          "type": [
            "array",
            "null"
          ],
          "deprecated": true,
          "items": {
            "type": "string"
          }
        },
        "builtins-strict-checking": {
          "description": "DEPRECATED: This option has been renamed to `strict-checking`. Use `strict-checking` instead.\n\nCompare module names instead of full module paths.\n\nThis option is ignored if both `strict-checking` and `builtins-strict-checking` are set.",
          "type": [
            "boolean",
            "null"
          ],
          "deprecated": true
        },
        "ignorelist": {
          "description": "Ignore list of builtins.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "strict-checking": {
          "description": "Compare module names instead of full module paths.\n\nUsed by [`A005` - `stdlib-module-shadowing`](https://docs.astral.sh/ruff/rules/stdlib-module-shadowing/).",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Flake8ComprehensionsOptions": {
      "description": "Options for the `flake8-comprehensions` plugin.",
      "type": "object",
      "properties": {
        "allow-dict-calls-with-keyword-arguments": {
          "description": "Allow `dict` calls that make use of keyword arguments (e.g., `dict(a=1, b=2)`).",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Flake8CopyrightOptions": {
      "description": "Options for the `flake8-copyright` plugin.",
      "type": "object",
      "properties": {
        "author": {
          "description": "Author to enforce within the copyright notice. If provided, the\nauthor must be present immediately following the copyright notice.",
          "type": [
            "string",
            "null"
          ]
        },
        "min-file-size": {
          "description": "A minimum file size (in bytes) required for a copyright notice to\nbe enforced. By default, all files are validated.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "notice-rgx": {
          "description": "The regular expression used to match the copyright notice, compiled\nwith the [`regex`](https://docs.rs/regex/latest/regex/) crate.\nDefaults to `(?i)Copyright\\s+((?:\\(C\\)|Â©)\\s+)?\\d{4}((-|,\\s)\\d{4})*`, which matches\nthe following:\n\n- `Copyright 2023`\n- `Copyright (C) 2023`\n- `Copyright 2021-2023`\n- `Copyright (C) 2021-2023`\n- `Copyright (C) 2021, 2023`",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Flake8ErrMsgOptions": {
      "description": "Options for the `flake8-errmsg` plugin.",
      "type": "object",
      "properties": {
        "max-string-length": {
          "description": "Maximum string length for string literals in exception messages.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        }
      },
      "additionalProperties": false
    },
    "Flake8GetTextOptions": {
      "description": "Options for the `flake8-gettext` plugin.",
      "type": "object",
      "properties": {
        "extend-function-names": {
          "description": "Additional function names to consider as internationalization calls, in addition to those\nincluded in [`function-names`](#lint_flake8-gettext_function-names).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "function-names": {
          "description": "The function names to consider as internationalization calls.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "Flake8ImplicitStrConcatOptions": {
      "description": "Options for the `flake8-implicit-str-concat` plugin",
      "type": "object",
      "properties": {
        "allow-multiline": {
          "description": "Whether to allow implicit string concatenations for multiline strings.\nBy default, implicit concatenations of multiline strings are\nallowed (but continuation lines, delimited with a backslash, are\nprohibited).\n\nSetting `allow-multiline = false` will automatically disable the\n`explicit-string-concatenation` (`ISC003`) rule. Otherwise, both\nimplicit and explicit multiline string concatenations would be seen\nas violations, making it impossible to write a linter-compliant multiline\nstring.",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Flake8ImportConventionsOptions": {
      "description": "Options for the `flake8-import-conventions` plugin",
      "type": "object",
      "properties": {
        "aliases": {
          "description": "The conventional aliases for imports. These aliases can be extended by\nthe [`extend-aliases`](#lint_flake8-import-conventions_extend-aliases) option.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/Alias"
          }
        },
        "banned-aliases": {
          "description": "A mapping from module to its banned import aliases.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/BannedAliases"
          }
        },
        "banned-from": {
          "description": "A list of modules that should not be imported from using the\n`from ... import ...` syntax.\n\nFor example, given `banned-from = [\"pandas\"]`, `from pandas import DataFrame`\nwould be disallowed, while `import pandas` would be allowed.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "extend-aliases": {
          "description": "A mapping from module to conventional import alias. These aliases will\nbe added to the [`aliases`](#lint_flake8-import-conventions_aliases) mapping.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/Alias"
          }
        }
      },
      "additionalProperties": false
    },
    "Flake8PytestStyleOptions": {
      "description": "Options for the `flake8-pytest-style` plugin",
      "type": "object",
      "properties": {
        "fixture-parentheses": {
          "description": "Boolean flag specifying whether `@pytest.fixture()` without parameters\nshould have parentheses. If the option is set to `false` (the default),\n`@pytest.fixture` is valid and `@pytest.fixture()` is invalid. If set\nto `true`, `@pytest.fixture()` is valid and `@pytest.fixture` is\ninvalid.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "mark-parentheses": {
          "description": "Boolean flag specifying whether `@pytest.mark.foo()` without parameters\nshould have parentheses. If the option is set to `false` (the\ndefault), `@pytest.mark.foo` is valid and `@pytest.mark.foo()` is\ninvalid. If set to `true`, `@pytest.mark.foo()` is valid and\n`@pytest.mark.foo` is invalid.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "parametrize-names-type": {
          "description": "Expected type for multiple argument names in `@pytest.mark.parametrize`.\nThe following values are supported:\n\n- `csv` â€” a comma-separated list, e.g.\n  `@pytest.mark.parametrize(\"name1,name2\", ...)`\n- `tuple` (default) â€” e.g.\n  `@pytest.mark.parametrize((\"name1\", \"name2\"), ...)`\n- `list` â€” e.g. `@pytest.mark.parametrize([\"name1\", \"name2\"], ...)`",
          "anyOf": [
            {
              "$ref": "#/definitions/ParametrizeNameType"
            },
            {
              "type": "null"
            }
          ]
        },
        "parametrize-values-row-type": {
          "description": "Expected type for each row of values in `@pytest.mark.parametrize` in\ncase of multiple parameters. The following values are supported:\n\n- `tuple` (default) â€” e.g.\n  `@pytest.mark.parametrize((\"name1\", \"name2\"), [(1, 2), (3, 4)])`\n- `list` â€” e.g.\n  `@pytest.mark.parametrize((\"name1\", \"name2\"), [[1, 2], [3, 4]])`",
          "anyOf": [
            {
              "$ref": "#/definitions/ParametrizeValuesRowType"
            },
            {
              "type": "null"
            }
          ]
        },
        "parametrize-values-type": {
          "description": "Expected type for the list of values rows in `@pytest.mark.parametrize`.\nThe following values are supported:\n\n- `tuple` â€” e.g. `@pytest.mark.parametrize(\"name\", (1, 2, 3))`\n- `list` (default) â€” e.g. `@pytest.mark.parametrize(\"name\", [1, 2, 3])`",
          "anyOf": [
            {
              "$ref": "#/definitions/ParametrizeValuesType"
            },
            {
              "type": "null"
            }
          ]
        },
        "raises-extend-require-match-for": {
          "description": "List of additional exception names that require a match= parameter in a\n`pytest.raises()` call. This extends the default list of exceptions\nthat require a match= parameter.\nThis option is useful if you want to extend the default list of\nexceptions that require a match= parameter without having to specify\nthe entire list.\nNote that this option does not remove any exceptions from the default\nlist.\n\nSupports glob patterns. For more information on the glob syntax, refer\nto the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "raises-require-match-for": {
          "description": "List of exception names that require a match= parameter in a\n`pytest.raises()` call.\n\nSupports glob patterns. For more information on the glob syntax, refer\nto the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "warns-extend-require-match-for": {
          "description": "List of additional warning names that require a match= parameter in a\n`pytest.warns()` call. This extends the default list of warnings that\nrequire a match= parameter.\n\nThis option is useful if you want to extend the default list of warnings\nthat require a match= parameter without having to specify the entire\nlist.\n\nNote that this option does not remove any warnings from the default\nlist.\n\nSupports glob patterns. For more information on the glob syntax, refer\nto the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "warns-require-match-for": {
          "description": "List of warning names that require a match= parameter in a\n`pytest.warns()` call.\n\nSupports glob patterns. For more information on the glob syntax, refer\nto the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "Flake8QuotesOptions": {
      "description": "Options for the `flake8-quotes` plugin.",
      "type": "object",
      "properties": {
        "avoid-escape": {
          "description": "Whether to avoid using single quotes if a string contains single quotes,\nor vice-versa with double quotes, as per [PEP 8](https://peps.python.org/pep-0008/#string-quotes).\nThis minimizes the need to escape quotation marks within strings.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "docstring-quotes": {
          "description": "Quote style to prefer for docstrings (either \"single\" or \"double\").\n\nWhen using the formatter, only \"double\" is compatible, as the formatter\nenforces double quotes for docstrings strings.",
          "anyOf": [
            {
              "$ref": "#/definitions/Quote"
            },
            {
              "type": "null"
            }
          ]
        },
        "inline-quotes": {
          "description": "Quote style to prefer for inline strings (either \"single\" or\n\"double\").\n\nWhen using the formatter, ensure that [`format.quote-style`](#format_quote-style) is set to\nthe same preferred quote style.",
          "anyOf": [
            {
              "$ref": "#/definitions/Quote"
            },
            {
              "type": "null"
            }
          ]
        },
        "multiline-quotes": {
          "description": "Quote style to prefer for multiline strings (either \"single\" or\n\"double\").\n\nWhen using the formatter, only \"double\" is compatible, as the formatter\nenforces double quotes for multiline strings.",
          "anyOf": [
            {
              "$ref": "#/definitions/Quote"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Flake8SelfOptions": {
      "description": "Options for the `flake8_self` plugin.",
      "type": "object",
      "properties": {
        "extend-ignore-names": {
          "description": "Additional names to ignore when considering `flake8-self` violations,\nin addition to those included in [`ignore-names`](#lint_flake8-self_ignore-names).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "ignore-names": {
          "description": "A list of names to ignore when considering `flake8-self` violations.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "Flake8TidyImportsOptions": {
      "description": "Options for the `flake8-tidy-imports` plugin",
      "type": "object",
      "properties": {
        "ban-relative-imports": {
          "description": "Whether to ban all relative imports (`\"all\"`), or only those imports\nthat extend into the parent module or beyond (`\"parents\"`).",
          "anyOf": [
            {
              "$ref": "#/definitions/Strictness"
            },
            {
              "type": "null"
            }
          ]
        },
        "banned-api": {
          "description": "Specific modules or module members that may not be imported or accessed.\nNote that this rule is only meant to flag accidental uses,\nand can be circumvented via `eval` or `importlib`.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/ApiBan"
          }
        },
        "banned-module-level-imports": {
          "description": "List of specific modules that may not be imported at module level, and should instead be\nimported lazily (e.g., within a function definition, or an `if TYPE_CHECKING:`\nblock, or some other nested context). This also affects the rule `import-outside-top-level`\nif `banned-module-level-imports` is enabled.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "Flake8TypeCheckingOptions": {
      "description": "Options for the `flake8-type-checking` plugin",
      "type": "object",
      "properties": {
        "exempt-modules": {
          "description": "Exempt certain modules from needing to be moved into type-checking\nblocks.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "quote-annotations": {
          "description": "Whether to add quotes around type annotations, if doing so would allow\nthe corresponding import to be moved into a type-checking block.\n\nFor example, in the following, Python requires that `Sequence` be\navailable at runtime, despite the fact that it's only used in a type\nannotation:\n\n```python\nfrom collections.abc import Sequence\n\n\ndef func(value: Sequence[int]) -> None:\n    ...\n```\n\nIn other words, moving `from collections.abc import Sequence` into an\n`if TYPE_CHECKING:` block above would cause a runtime error, as the\ntype would no longer be available at runtime.\n\nBy default, Ruff will respect such runtime semantics and avoid moving\nthe import to prevent such runtime errors.\n\nSetting `quote-annotations` to `true` will instruct Ruff to add quotes\naround the annotation (e.g., `\"Sequence[int]\"`), which in turn enables\nRuff to move the import into an `if TYPE_CHECKING:` block, like so:\n\n```python\nfrom typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    from collections.abc import Sequence\n\n\ndef func(value: \"Sequence[int]\") -> None:\n    ...\n```\n\nNote that this setting has no effect when `from __future__ import annotations`\nis present, as `__future__` annotations are always treated equivalently\nto quoted annotations. Similarly, this setting has no effect on Python\nversions after 3.14 because these annotations are also deferred.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "runtime-evaluated-base-classes": {
          "description": "Exempt classes that list any of the enumerated classes as a base class\nfrom needing to be moved into type-checking blocks.\n\nCommon examples include Pydantic's `pydantic.BaseModel` and SQLAlchemy's\n`sqlalchemy.orm.DeclarativeBase`, but can also support user-defined\nclasses that inherit from those base classes. For example, if you define\na common `DeclarativeBase` subclass that's used throughout your project\n(e.g., `class Base(DeclarativeBase) ...` in `base.py`), you can add it to\nthis list (`runtime-evaluated-base-classes = [\"base.Base\"]`) to exempt\nmodels from being moved into type-checking blocks.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "runtime-evaluated-decorators": {
          "description": "Exempt classes and functions decorated with any of the enumerated\ndecorators from being moved into type-checking blocks.\n\nCommon examples include Pydantic's `@pydantic.validate_call` decorator\n(for functions) and attrs' `@attrs.define` decorator (for classes).\n\nThis also supports framework decorators like FastAPI's `fastapi.FastAPI.get`\nwhich will work across assignments in the same module.\n\nFor example:\n```python\nimport fastapi\n\napp = FastAPI(\"app\")\n\n@app.get(\"/home\")\ndef home() -> str: ...\n```\n\nHere `app.get` will correctly be identified as `fastapi.FastAPI.get`.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "strict": {
          "description": "Enforce `TC001`, `TC002`, and `TC003` rules even when valid runtime imports\nare present for the same module.\n\nSee flake8-type-checking's [strict](https://github.com/snok/flake8-type-checking#strict) option.",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Flake8UnusedArgumentsOptions": {
      "description": "Options for the `flake8-unused-arguments` plugin",
      "type": "object",
      "properties": {
        "ignore-variadic-names": {
          "description": "Whether to allow unused variadic arguments, like `*args` and `**kwargs`.",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "FormatOptions": {
      "description": "Configures the way Ruff formats your code.",
      "type": "object",
      "properties": {
        "docstring-code-format": {
          "description": "Whether to format code snippets in docstrings.\n\nWhen this is enabled, Python code examples within docstrings are\nautomatically reformatted.\n\nFor example, when this is enabled, the following code:\n\n```python\ndef f(x):\n    \"\"\"\n    Something about `f`. And an example in doctest format:\n\n    >>> f(  x  )\n\n    Markdown is also supported:\n\n    ```py\n    f(  x  )\n    ```\n\n    As are reStructuredText literal blocks::\n\n        f(  x  )\n\n\n    And reStructuredText code blocks:\n\n    .. code-block:: python\n\n        f(  x  )\n    \"\"\"\n    pass\n```\n\n... will be reformatted (assuming the rest of the options are set to\ntheir defaults) as:\n\n```python\ndef f(x):\n    \"\"\"\n    Something about `f`. And an example in doctest format:\n\n    >>> f(x)\n\n    Markdown is also supported:\n\n    ```py\n    f(x)\n    ```\n\n    As are reStructuredText literal blocks::\n\n        f(x)\n\n\n    And reStructuredText code blocks:\n\n    .. code-block:: python\n\n        f(x)\n    \"\"\"\n    pass\n```\n\nIf a code snippet in a docstring contains invalid Python code or if the\nformatter would otherwise write invalid Python code, then the code\nexample is ignored by the formatter and kept as-is.\n\nCurrently, doctest, Markdown, reStructuredText literal blocks, and\nreStructuredText code blocks are all supported and automatically\nrecognized. In the case of unlabeled fenced code blocks in Markdown and\nreStructuredText literal blocks, the contents are assumed to be Python\nand reformatted. As with any other format, if the contents aren't valid\nPython, then the block is left untouched automatically.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "docstring-code-line-length": {
          "description": "Set the line length used when formatting code snippets in docstrings.\n\nThis only has an effect when the `docstring-code-format` setting is\nenabled.\n\nThe default value for this setting is `\"dynamic\"`, which has the effect\nof ensuring that any reformatted code examples in docstrings adhere to\nthe global line length configuration that is used for the surrounding\nPython code. The point of this setting is that it takes the indentation\nof the docstring into account when reformatting code examples.\n\nAlternatively, this can be set to a fixed integer, which will result\nin the same line length limit being applied to all reformatted code\nexamples in docstrings. When set to a fixed integer, the indent of the\ndocstring is not taken into account. That is, this may result in lines\nin the reformatted code example that exceed the globally configured\nline length limit.\n\nFor example, when this is set to `20` and [`docstring-code-format`](#docstring-code-format)\nis enabled, then this code:\n\n```python\ndef f(x):\n    '''\n    Something about `f`. And an example:\n\n    .. code-block:: python\n\n        foo, bar, quux = this_is_a_long_line(lion, hippo, lemur, bear)\n    '''\n    pass\n```\n\n... will be reformatted (assuming the rest of the options are set\nto their defaults) as:\n\n```python\ndef f(x):\n    \"\"\"\n    Something about `f`. And an example:\n\n    .. code-block:: python\n\n        (\n            foo,\n            bar,\n            quux,\n        ) = this_is_a_long_line(\n            lion,\n            hippo,\n            lemur,\n            bear,\n        )\n    \"\"\"\n    pass\n```",
          "anyOf": [
            {
              "$ref": "#/definitions/DocstringCodeLineWidth"
            },
            {
              "type": "null"
            }
          ]
        },
        "exclude": {
          "description": "A list of file patterns to exclude from formatting in addition to the files excluded globally (see [`exclude`](#exclude), and [`extend-exclude`](#extend-exclude)).\n\nExclusions are based on globs, and can be either:\n\n- Single-path patterns, like `.mypy_cache` (to exclude any directory\n  named `.mypy_cache` in the tree), `foo.py` (to exclude any file named\n  `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ).\n- Relative patterns, like `directory/foo.py` (to exclude that specific\n  file) or `directory/*.py` (to exclude any Python files in\n  `directory`). Note that these paths are relative to the project root\n  (e.g., the directory containing your `pyproject.toml`).\n\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "indent-style": {
          "description": "Whether to use spaces or tabs for indentation.\n\n`indent-style = \"space\"` (default):\n\n```python\ndef f():\n    print(\"Hello\") #  Spaces indent the `print` statement.\n```\n\n`indent-style = \"tab\"`:\n\n```python\ndef f():\n    print(\"Hello\") #  A tab `\\t` indents the `print` statement.\n```\n\nPEP 8 recommends using spaces for [indentation](https://peps.python.org/pep-0008/#indentation).\nWe care about accessibility; if you do not need tabs for accessibility, we do not recommend you use them.\n\nSee [`indent-width`](#indent-width) to configure the number of spaces per indentation and the tab width.",
          "anyOf": [
            {
              "$ref": "#/definitions/IndentStyle"
            },
            {
              "type": "null"
            }
          ]
        },
        "line-ending": {
          "description": "The character Ruff uses at the end of a line.\n\n* `auto`: The newline style is detected automatically on a file per file basis. Files with mixed line endings will be converted to the first detected line ending. Defaults to `\\n` for files that contain no line endings.\n* `lf`: Line endings will be converted to `\\n`. The default line ending on Unix.\n* `cr-lf`: Line endings will be converted to `\\r\\n`. The default line ending on Windows.\n* `native`: Line endings will be converted to `\\n` on Unix and `\\r\\n` on Windows.",
          "anyOf": [
            {
              "$ref": "#/definitions/LineEnding"
            },
            {
              "type": "null"
            }
          ]
        },
        "preview": {
          "description": "Whether to enable the unstable preview style formatting.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "quote-style": {
          "description": "Configures the preferred quote character for strings. The recommended options are\n\n* `double` (default): Use double quotes `\"`\n* `single`: Use single quotes `'`\n\nIn compliance with [PEP 8](https://peps.python.org/pep-0008/) and [PEP 257](https://peps.python.org/pep-0257/),\nRuff prefers double quotes for triple quoted strings and docstrings even when using `quote-style = \"single\"`.\n\nRuff deviates from using the configured quotes if doing so prevents the need for\nescaping quote characters inside the string:\n\n```python\na = \"a string without any quotes\"\nb = \"It's monday morning\"\n```\n\nRuff will change the quotes of the string assigned to `a` to single quotes when using `quote-style = \"single\"`.\nHowever, Ruff uses double quotes for the string assigned to `b` because using single quotes would require escaping the `'`,\nwhich leads to the less readable code: `'It\\'s monday morning'`.\n\nIn addition, Ruff supports the quote style `preserve` for projects that already use\na mixture of single and double quotes and can't migrate to the `double` or `single` style.\nThe quote style `preserve` leaves the quotes of all strings unchanged.",
          "anyOf": [
            {
              "$ref": "#/definitions/QuoteStyle"
            },
            {
              "type": "null"
            }
          ]
        },
        "skip-magic-trailing-comma": {
          "description": "Ruff uses existing trailing commas as an indication that short lines should be left separate.\nIf this option is set to `true`, the magic trailing comma is ignored.\n\nFor example, Ruff leaves the arguments separate even though\ncollapsing the arguments to a single line doesn't exceed the line length if `skip-magic-trailing-comma = false`:\n\n```python\n# The arguments remain on separate lines because of the trailing comma after `b`\ndef test(\n    a,\n    b,\n): pass\n```\n\nSetting `skip-magic-trailing-comma = true` changes the formatting to:\n\n```python\n# The arguments are collapsed to a single line because the trailing comma is ignored\ndef test(a, b):\n    pass\n```",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "ImportSection": {
      "anyOf": [
        {
          "$ref": "#/definitions/ImportType"
        },
        {
          "type": "string"
        }
      ]
    },
    "ImportType": {
      "type": "string",
      "enum": [
        "future",
        "standard-library",
        "third-party",
        "first-party",
        "local-folder"
      ]
    },
    "IndentStyle": {
      "oneOf": [
        {
          "description": "Use tabs to indent code.",
          "type": "string",
          "const": "tab"
        },
        {
          "description": "Use [`IndentWidth`] spaces to indent code.",
          "type": "string",
          "const": "space"
        }
      ]
    },
    "IndentWidth": {
      "description": "The size of a tab.",
      "type": "integer",
      "format": "uint8",
      "maximum": 255,
      "minimum": 1
    },
    "IsortOptions": {
      "description": "Options for the `isort` plugin.",
      "type": "object",
      "properties": {
        "case-sensitive": {
          "description": "Sort imports taking into account case sensitivity.\n\nNote that the [`order-by-type`](#lint_isort_order-by-type) setting will\ntake precedence over this one when enabled.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "classes": {
          "description": "An override list of tokens to always recognize as a Class for\n[`order-by-type`](#lint_isort_order-by-type) regardless of casing.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "combine-as-imports": {
          "description": "Combines as imports on the same line. See isort's [`combine-as-imports`](https://pycqa.github.io/isort/docs/configuration/options.html#combine-as-imports)\noption.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "constants": {
          "description": "An override list of tokens to always recognize as a CONSTANT\nfor [`order-by-type`](#lint_isort_order-by-type) regardless of casing.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "default-section": {
          "description": "Define a default section for any imports that don't fit into the specified [`section-order`](#lint_isort_section-order).",
          "anyOf": [
            {
              "$ref": "#/definitions/ImportSection"
            },
            {
              "type": "null"
            }
          ]
        },
        "detect-same-package": {
          "description": "Whether to automatically mark imports from within the same package as first-party.\nFor example, when `detect-same-package = true`, then when analyzing files within the\n`foo` package, any imports from within the `foo` package will be considered first-party.\n\nThis heuristic is often unnecessary when `src` is configured to detect all first-party\nsources; however, if `src` is _not_ configured, this heuristic can be useful to detect\nfirst-party imports from _within_ (but not _across_) first-party packages.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "extra-standard-library": {
          "description": "A list of modules to consider standard-library, in addition to those\nknown to Ruff in advance.\n\nSupports glob patterns. For more information on the glob syntax, refer\nto the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "force-single-line": {
          "description": "Forces all from imports to appear on their own line.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "force-sort-within-sections": {
          "description": "Don't sort straight-style imports (like `import sys`) before from-style\nimports (like `from itertools import groupby`). Instead, sort the\nimports by module, independent of import style.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "force-to-top": {
          "description": "Force specific imports to the top of their appropriate section.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "force-wrap-aliases": {
          "description": "Force `import from` statements with multiple members and at least one\nalias (e.g., `import A as B`) to wrap such that every line contains\nexactly one member. For example, this formatting would be retained,\nrather than condensing to a single line:\n\n```python\nfrom .utils import (\n    test_directory as test_directory,\n    test_id as test_id\n)\n```\n\nNote that this setting is only effective when combined with\n`combine-as-imports = true`. When [`combine-as-imports`](#lint_isort_combine-as-imports) isn't\nenabled, every aliased `import from` will be given its own line, in\nwhich case, wrapping is not necessary.\n\nWhen using the formatter, ensure that [`format.skip-magic-trailing-comma`](#format_skip-magic-trailing-comma) is set to `false` (default)\nwhen enabling `force-wrap-aliases` to avoid that the formatter collapses members if they all fit on a single line.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "forced-separate": {
          "description": "A list of modules to separate into auxiliary block(s) of imports,\nin the order specified.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "from-first": {
          "description": "Whether to place `import from` imports before straight imports when sorting.\n\nFor example, by default, imports will be sorted such that straight imports appear\nbefore `import from` imports, as in:\n```python\nimport os\nimport sys\nfrom typing import List\n```\n\nSetting `from-first = true` will instead sort such that `import from` imports appear\nbefore straight imports, as in:\n```python\nfrom typing import List\nimport os\nimport sys\n```",
          "type": [
            "boolean",
            "null"
          ]
        },
        "known-first-party": {
          "description": "A list of modules to consider first-party, regardless of whether they\ncan be identified as such via introspection of the local filesystem.\n\nSupports glob patterns. For more information on the glob syntax, refer\nto the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "known-local-folder": {
          "description": "A list of modules to consider being a local folder.\nGenerally, this is reserved for relative imports (`from . import module`).\n\nSupports glob patterns. For more information on the glob syntax, refer\nto the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "known-third-party": {
          "description": "A list of modules to consider third-party, regardless of whether they\ncan be identified as such via introspection of the local filesystem.\n\nSupports glob patterns. For more information on the glob syntax, refer\nto the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "length-sort": {
          "description": "Sort imports by their string length, such that shorter imports appear\nbefore longer imports. For example, by default, imports will be sorted\nalphabetically, as in:\n```python\nimport collections\nimport os\n```\n\nSetting `length-sort = true` will instead sort such that shorter imports\nappear before longer imports, as in:\n```python\nimport os\nimport collections\n```",
          "type": [
            "boolean",
            "null"
          ]
        },
        "length-sort-straight": {
          "description": "Sort straight imports by their string length. Similar to [`length-sort`](#lint_isort_length-sort),\nbut applies only to straight imports and doesn't affect `from` imports.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "lines-after-imports": {
          "description": "The number of blank lines to place after imports.\nUse `-1` for automatic determination.\n\nRuff uses at most one blank line after imports in typing stub files (files with `.pyi` extension) in accordance to\nthe typing style recommendations ([source](https://typing.python.org/en/latest/guides/writing_stubs.html#blank-lines)).\n\nWhen using the formatter, only the values `-1`, `1`, and `2` are compatible because\nit enforces at least one empty and at most two empty lines after imports.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int"
        },
        "lines-between-types": {
          "description": "The number of lines to place between \"direct\" and `import from` imports.\n\nWhen using the formatter, only the values `0` and `1` are compatible because\nit preserves up to one empty line after imports in nested blocks.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "no-lines-before": {
          "description": "A list of sections that should _not_ be delineated from the previous\nsection via empty lines.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/ImportSection"
          }
        },
        "no-sections": {
          "description": "Put all imports into the same section bucket.\n\nFor example, rather than separating standard library and third-party imports, as in:\n```python\nimport os\nimport sys\n\nimport numpy\nimport pandas\n```\n\nSetting `no-sections = true` will instead group all imports into a single section:\n```python\nimport numpy\nimport os\nimport pandas\nimport sys\n```",
          "type": [
            "boolean",
            "null"
          ]
        },
        "order-by-type": {
          "description": "Order imports by type, which is determined by case, in addition to\nalphabetically.\n\nNote that this option takes precedence over the\n[`case-sensitive`](#lint_isort_case-sensitive) setting when enabled.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "relative-imports-order": {
          "description": "Whether to place \"closer\" imports (fewer `.` characters, most local)\nbefore \"further\" imports (more `.` characters, least local), or vice\nversa.\n\nThe default (\"furthest-to-closest\") is equivalent to isort's\n[`reverse-relative`](https://pycqa.github.io/isort/docs/configuration/options.html#reverse-relative) default (`reverse-relative = false`); setting\nthis to \"closest-to-furthest\" is equivalent to isort's\n`reverse-relative = true`.",
          "anyOf": [
            {
              "$ref": "#/definitions/RelativeImportsOrder"
            },
            {
              "type": "null"
            }
          ]
        },
        "required-imports": {
          "description": "Add the specified import line to all files.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/NameImports"
          }
        },
        "section-order": {
          "description": "Override in which order the sections should be output. Can be used to move custom sections.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/ImportSection"
          }
        },
        "sections": {
          "description": "A list of mappings from section names to modules.\n\nBy default, imports are categorized according to their type (e.g., `future`, `third-party`,\nand so on). This setting allows you to group modules into custom sections, to augment or\noverride the built-in sections.\n\nFor example, to group all testing utilities, you could create a `testing` section:\n```toml\ntesting = [\"pytest\", \"hypothesis\"]\n```\n\nThe values in the list are treated as glob patterns. For example, to match all packages in\nthe LangChain ecosystem (`langchain-core`, `langchain-openai`, etc.):\n```toml\nlangchain = [\"langchain-*\"]\n```\n\nCustom sections should typically be inserted into the [`section-order`](#lint_isort_section-order) list to ensure that\nthey're displayed as a standalone group and in the intended order, as in:\n```toml\nsection-order = [\n  \"future\",\n  \"standard-library\",\n  \"third-party\",\n  \"first-party\",\n  \"local-folder\",\n  \"testing\"\n]\n```\n\nIf a custom section is omitted from [`section-order`](#lint_isort_section-order), imports in that section will be\nassigned to the [`default-section`](#lint_isort_default-section) (which defaults to `third-party`).",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "single-line-exclusions": {
          "description": "One or more modules to exclude from the single line rule.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "split-on-trailing-comma": {
          "description": "If a comma is placed after the last member in a multi-line import, then\nthe imports will never be folded into one line.\n\nSee isort's [`split-on-trailing-comma`](https://pycqa.github.io/isort/docs/configuration/options.html#split-on-trailing-comma) option.\n\nWhen using the formatter, ensure that [`format.skip-magic-trailing-comma`](#format_skip-magic-trailing-comma) is set to `false` (default) when enabling `split-on-trailing-comma`\nto avoid that the formatter removes the trailing commas.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "variables": {
          "description": "An override list of tokens to always recognize as a var\nfor [`order-by-type`](#lint_isort_order-by-type) regardless of casing.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "LineEnding": {
      "oneOf": [
        {
          "description": "The newline style is detected automatically on a file per file basis.\nFiles with mixed line endings will be converted to the first detected line ending.\nDefaults to [`LineEnding::Lf`] for a files that contain no line endings.",
          "type": "string",
          "const": "auto"
        },
        {
          "description": "Line endings will be converted to `\\n` as is common on Unix.",
          "type": "string",
          "const": "lf"
        },
        {
          "description": "Line endings will be converted to `\\r\\n` as is common on Windows.",
          "type": "string",
          "const": "cr-lf"
        },
        {
          "description": "Line endings will be converted to `\\n` on Unix and `\\r\\n` on Windows.",
          "type": "string",
          "const": "native"
        }
      ]
    },
    "LineLength": {
      "description": "The length of a line of text that is considered too long.\n\nThe allowed range of values is 1..=320",
      "type": "integer",
      "format": "uint16",
      "maximum": 320,
      "minimum": 1
    },
    "LineWidth": {
      "description": "The maximum visual width to which the formatter should try to limit a line.",
      "type": "integer",
      "format": "uint16",
      "maximum": 65535,
      "minimum": 1
    },
    "LintOptions": {
      "description": "Configures how Ruff checks your code.\n\nOptions specified in the `lint` section take precedence over the deprecated top-level settings.",
      "type": "object",
      "properties": {
        "allowed-confusables": {
          "description": "A list of allowed \"confusable\" Unicode characters to ignore when\nenforcing `RUF001`, `RUF002`, and `RUF003`.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string",
            "maxLength": 1,
            "minLength": 1
          }
        },
        "dummy-variable-rgx": {
          "description": "A regular expression used to identify \"dummy\" variables, or those which\nshould be ignored when enforcing (e.g.) unused-variable rules. The\ndefault expression matches `_`, `__`, and `_var`, but not `_var_`.",
          "type": [
            "string",
            "null"
          ]
        },
        "exclude": {
          "description": "A list of file patterns to exclude from linting in addition to the files excluded globally (see [`exclude`](#exclude), and [`extend-exclude`](#extend-exclude)).\n\nExclusions are based on globs, and can be either:\n\n- Single-path patterns, like `.mypy_cache` (to exclude any directory\n  named `.mypy_cache` in the tree), `foo.py` (to exclude any file named\n  `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ).\n- Relative patterns, like `directory/foo.py` (to exclude that specific\n  file) or `directory/*.py` (to exclude any Python files in\n  `directory`). Note that these paths are relative to the project root\n  (e.g., the directory containing your `pyproject.toml`).\n\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "explicit-preview-rules": {
          "description": "Whether to require exact codes to select preview rules. When enabled,\npreview rules will not be selected by prefixes â€” the full code of each\npreview rule will be required to enable the rule.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "extend-fixable": {
          "description": "A list of rule codes or prefixes to consider fixable, in addition to those\nspecified by [`fixable`](#lint_fixable).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RuleSelector"
          }
        },
        "extend-ignore": {
          "description": "A list of rule codes or prefixes to ignore, in addition to those\nspecified by `ignore`.",
          "type": [
            "array",
            "null"
          ],
          "deprecated": true,
          "items": {
            "$ref": "#/definitions/RuleSelector"
          }
        },
        "extend-per-file-ignores": {
          "description": "A list of mappings from file pattern to rule codes or prefixes to\nexclude, in addition to any rules excluded by [`per-file-ignores`](#lint_per-file-ignores).",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RuleSelector"
            }
          }
        },
        "extend-safe-fixes": {
          "description": "A list of rule codes or prefixes for which unsafe fixes should be considered\nsafe.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RuleSelector"
          }
        },
        "extend-select": {
          "description": "A list of rule codes or prefixes to enable, in addition to those\nspecified by [`select`](#lint_select).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RuleSelector"
          }
        },
        "extend-unfixable": {
          "description": "A list of rule codes or prefixes to consider non-auto-fixable, in addition to those\nspecified by [`unfixable`](#lint_unfixable).",
          "type": [
            "array",
            "null"
          ],
          "deprecated": true,
          "items": {
            "$ref": "#/definitions/RuleSelector"
          }
        },
        "extend-unsafe-fixes": {
          "description": "A list of rule codes or prefixes for which safe fixes should be considered\nunsafe.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RuleSelector"
          }
        },
        "external": {
          "description": "A list of rule codes or prefixes that are unsupported by Ruff, but should be\npreserved when (e.g.) validating `# noqa` directives. Useful for\nretaining `# noqa` directives that cover plugins not yet implemented\nby Ruff.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "fixable": {
          "description": "A list of rule codes or prefixes to consider fixable. By default,\nall rules are considered fixable.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RuleSelector"
          }
        },
        "flake8-annotations": {
          "description": "Options for the `flake8-annotations` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8AnnotationsOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-bandit": {
          "description": "Options for the `flake8-bandit` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8BanditOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-boolean-trap": {
          "description": "Options for the `flake8-boolean-trap` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8BooleanTrapOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-bugbear": {
          "description": "Options for the `flake8-bugbear` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8BugbearOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-builtins": {
          "description": "Options for the `flake8-builtins` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8BuiltinsOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-comprehensions": {
          "description": "Options for the `flake8-comprehensions` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8ComprehensionsOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-copyright": {
          "description": "Options for the `flake8-copyright` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8CopyrightOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-errmsg": {
          "description": "Options for the `flake8-errmsg` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8ErrMsgOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-gettext": {
          "description": "Options for the `flake8-gettext` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8GetTextOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-implicit-str-concat": {
          "description": "Options for the `flake8-implicit-str-concat` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8ImplicitStrConcatOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-import-conventions": {
          "description": "Options for the `flake8-import-conventions` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8ImportConventionsOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-pytest-style": {
          "description": "Options for the `flake8-pytest-style` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8PytestStyleOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-quotes": {
          "description": "Options for the `flake8-quotes` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8QuotesOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-self": {
          "description": "Options for the `flake8_self` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8SelfOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-tidy-imports": {
          "description": "Options for the `flake8-tidy-imports` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8TidyImportsOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-type-checking": {
          "description": "Options for the `flake8-type-checking` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8TypeCheckingOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "flake8-unused-arguments": {
          "description": "Options for the `flake8-unused-arguments` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flake8UnusedArgumentsOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "future-annotations": {
          "description": "Whether to allow rules to add `from __future__ import annotations` in cases where this would\nsimplify a fix or enable a new diagnostic.\n\nFor example, `TC001`, `TC002`, and `TC003` can move more imports into `TYPE_CHECKING` blocks\nif `__future__` annotations are enabled.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignore": {
          "description": "A list of rule codes or prefixes to ignore. Prefixes can specify exact\nrules (like `F841`), entire categories (like `F`), or anything in\nbetween.\n\nWhen breaking ties between enabled and disabled rules (via `select` and\n`ignore`, respectively), more specific prefixes override less\nspecific prefixes. `ignore` takes precedence over `select` if the same\nprefix appears in both.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RuleSelector"
          }
        },
        "ignore-init-module-imports": {
          "description": "Avoid automatically removing unused imports in `__init__.py` files. Such\nimports will still be flagged, but with a dedicated message suggesting\nthat the import is either added to the module's `__all__` symbol, or\nre-exported with a redundant alias (e.g., `import os as os`).\n\nThis option is enabled by default, but you can opt-in to removal of imports\nvia an unsafe fix.",
          "type": [
            "boolean",
            "null"
          ],
          "deprecated": true
        },
        "isort": {
          "description": "Options for the `isort` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/IsortOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "logger-objects": {
          "description": "A list of objects that should be treated equivalently to a\n`logging.Logger` object.\n\nThis is useful for ensuring proper diagnostics (e.g., to identify\n`logging` deprecations and other best-practices) for projects that\nre-export a `logging.Logger` object from a common module.\n\nFor example, if you have a module `logging_setup.py` with the following\ncontents:\n```python\nimport logging\n\nlogger = logging.getLogger(__name__)\n```\n\nAdding `\"logging_setup.logger\"` to `logger-objects` will ensure that\n`logging_setup.logger` is treated as a `logging.Logger` object when\nimported from other modules (e.g., `from logging_setup import logger`).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "mccabe": {
          "description": "Options for the `mccabe` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/McCabeOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "pep8-naming": {
          "description": "Options for the `pep8-naming` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/Pep8NamingOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "per-file-ignores": {
          "description": "A list of mappings from file pattern to rule codes or prefixes to\nexclude, when considering any matching files. An initial '!' negates\nthe file pattern.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RuleSelector"
            }
          }
        },
        "preview": {
          "description": "Whether to enable preview mode. When preview mode is enabled, Ruff will\nuse unstable rules and fixes.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "pycodestyle": {
          "description": "Options for the `pycodestyle` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/PycodestyleOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "pydoclint": {
          "description": "Options for the `pydoclint` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/PydoclintOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "pydocstyle": {
          "description": "Options for the `pydocstyle` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/PydocstyleOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "pyflakes": {
          "description": "Options for the `pyflakes` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/PyflakesOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "pylint": {
          "description": "Options for the `pylint` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/PylintOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "pyupgrade": {
          "description": "Options for the `pyupgrade` plugin.",
          "anyOf": [
            {
              "$ref": "#/definitions/PyUpgradeOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "ruff": {
          "description": "Options for the `ruff` plugin",
          "anyOf": [
            {
              "$ref": "#/definitions/RuffOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "select": {
          "description": "A list of rule codes or prefixes to enable. Prefixes can specify exact\nrules (like `F841`), entire categories (like `F`), or anything in\nbetween.\n\nWhen breaking ties between enabled and disabled rules (via `select` and\n`ignore`, respectively), more specific prefixes override less\nspecific prefixes. `ignore` takes precedence over `select` if the\nsame prefix appears in both.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RuleSelector"
          }
        },
        "task-tags": {
          "description": "A list of task tags to recognize (e.g., \"TODO\", \"FIXME\", \"XXX\").\n\nComments starting with these tags will be ignored by commented-out code\ndetection (`ERA`), and skipped by line-length rules (`E501`) if\n[`ignore-overlong-task-comments`](#lint_pycodestyle_ignore-overlong-task-comments) is set to `true`.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "typing-extensions": {
          "description": "Whether to allow imports from the third-party `typing_extensions` module for Python versions\nbefore a symbol was added to the first-party `typing` module.\n\nMany rules try to import symbols from the `typing` module but fall back to\n`typing_extensions` for earlier versions of Python. This option can be used to disable this\nfallback behavior in cases where `typing_extensions` is not installed.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "typing-modules": {
          "description": "A list of modules whose exports should be treated equivalently to\nmembers of the `typing` module.\n\nThis is useful for ensuring proper type annotation inference for\nprojects that re-export `typing` and `typing_extensions` members\nfrom a compatibility module. If omitted, any members imported from\nmodules apart from `typing` and `typing_extensions` will be treated\nas ordinary Python objects.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "unfixable": {
          "description": "A list of rule codes or prefixes to consider non-fixable.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RuleSelector"
          }
        }
      },
      "additionalProperties": false
    },
    "McCabeOptions": {
      "description": "Options for the `mccabe` plugin.",
      "type": "object",
      "properties": {
        "max-complexity": {
          "description": "The maximum McCabe complexity to allow before triggering `C901` errors.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        }
      },
      "additionalProperties": false
    },
    "NameImports": {
      "type": "string"
    },
    "OutputFormat": {
      "type": "string",
      "enum": [
        "concise",
        "full",
        "json",
        "json-lines",
        "junit",
        "grouped",
        "github",
        "gitlab",
        "pylint",
        "rdjson",
        "azure",
        "sarif"
      ]
    },
    "ParametrizeNameType": {
      "type": "string",
      "enum": [
        "csv",
        "tuple",
        "list"
      ]
    },
    "ParametrizeValuesRowType": {
      "type": "string",
      "enum": [
        "tuple",
        "list"
      ]
    },
    "ParametrizeValuesType": {
      "type": "string",
      "enum": [
        "tuple",
        "list"
      ]
    },
    "Pep8NamingOptions": {
      "description": "Options for the `pep8-naming` plugin.",
      "type": "object",
      "properties": {
        "classmethod-decorators": {
          "description": "A list of decorators that, when applied to a method, indicate that the\nmethod should be treated as a class method (in addition to the builtin\n`@classmethod`).\n\nFor example, Ruff will expect that any method decorated by a decorator\nin this list takes a `cls` argument as its first argument.\n\nExpects to receive a list of fully-qualified names (e.g., `pydantic.validator`,\nrather than `validator`) or alternatively a plain name which is then matched against\nthe last segment in case the decorator itself consists of a dotted name.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "extend-ignore-names": {
          "description": "Additional names (or patterns) to ignore when considering `pep8-naming` violations,\nin addition to those included in [`ignore-names`](#lint_pep8-naming_ignore-names).\n\nSupports glob patterns. For example, to ignore all names starting with `test_`\nor ending with `_test`, you could use `ignore-names = [\"test_*\", \"*_test\"]`.\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "ignore-names": {
          "description": "A list of names (or patterns) to ignore when considering `pep8-naming` violations.\n\nSupports glob patterns. For example, to ignore all names starting with `test_`\nor ending with `_test`, you could use `ignore-names = [\"test_*\", \"*_test\"]`.\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "staticmethod-decorators": {
          "description": "A list of decorators that, when applied to a method, indicate that the\nmethod should be treated as a static method (in addition to the builtin\n`@staticmethod`).\n\nFor example, Ruff will expect that any method decorated by a decorator\nin this list has no `self` or `cls` argument.\n\nExpects to receive a list of fully-qualified names (e.g., `belay.Device.teardown`,\nrather than `teardown`) or alternatively a plain name which is then matched against\nthe last segment in case the decorator itself consists of a dotted name.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "PyUpgradeOptions": {
      "description": "Options for the `pyupgrade` plugin.",
      "type": "object",
      "properties": {
        "keep-runtime-typing": {
          "description": "Whether to avoid [PEP 585](https://peps.python.org/pep-0585/) (`List[int]` -> `list[int]`) and [PEP 604](https://peps.python.org/pep-0604/)\n(`Union[str, int]` -> `str | int`) rewrites even if a file imports\n`from __future__ import annotations`.\n\nThis setting is only applicable when the target Python version is below\n3.9 and 3.10 respectively, and is most commonly used when working with\nlibraries like Pydantic and FastAPI, which rely on the ability to parse\ntype annotations at runtime. The use of `from __future__ import annotations`\ncauses Python to treat the type annotations as strings, which typically\nallows for the use of language features that appear in later Python\nversions but are not yet supported by the current version (e.g., `str |\nint`). However, libraries that rely on runtime type annotations will\nbreak if the annotations are incompatible with the current Python\nversion.\n\nFor example, while the following is valid Python 3.8 code due to the\npresence of `from __future__ import annotations`, the use of `str | int`\nprior to Python 3.10 will cause Pydantic to raise a `TypeError` at\nruntime:\n\n```python\nfrom __future__ import annotations\n\nimport pydantic\n\nclass Foo(pydantic.BaseModel):\n    bar: str | int\n```",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "PycodestyleOptions": {
      "description": "Options for the `pycodestyle` plugin.",
      "type": "object",
      "properties": {
        "ignore-overlong-task-comments": {
          "description": "Whether line-length violations (`E501`) should be triggered for\ncomments starting with [`task-tags`](#lint_task-tags) (by default: \"TODO\", \"FIXME\",\nand \"XXX\").",
          "type": [
            "boolean",
            "null"
          ]
        },
        "max-doc-length": {
          "description": "The maximum line length to allow for [`doc-line-too-long`](https://docs.astral.sh/ruff/rules/doc-line-too-long/) violations within\ndocumentation (`W505`), including standalone comments. By default,\nthis is set to `null` which disables reporting violations.\n\nThe length is determined by the number of characters per line, except for lines containing Asian characters or emojis.\nFor these lines, the [unicode width](https://unicode.org/reports/tr11/) of each character is added up to determine the length.\n\nSee the [`doc-line-too-long`](https://docs.astral.sh/ruff/rules/doc-line-too-long/) rule for more information.",
          "anyOf": [
            {
              "$ref": "#/definitions/LineLength"
            },
            {
              "type": "null"
            }
          ]
        },
        "max-line-length": {
          "description": "The maximum line length to allow for [`line-too-long`](https://docs.astral.sh/ruff/rules/line-too-long/) violations. By default,\nthis is set to the value of the [`line-length`](#line-length) option.\n\nUse this option when you want to detect extra-long lines that the formatter can't automatically split by setting\n`pycodestyle.line-length` to a value larger than [`line-length`](#line-length).\n\n```toml\n# The formatter wraps lines at a length of 88.\nline-length = 88\n\n[pycodestyle]\n# E501 reports lines that exceed the length of 100.\nmax-line-length = 100\n```\n\nThe length is determined by the number of characters per line, except for lines containing East Asian characters or emojis.\nFor these lines, the [unicode width](https://unicode.org/reports/tr11/) of each character is added up to determine the length.\n\nSee the [`line-too-long`](https://docs.astral.sh/ruff/rules/line-too-long/) rule for more information.",
          "anyOf": [
            {
              "$ref": "#/definitions/LineLength"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PydoclintOptions": {
      "description": "Options for the `pydoclint` plugin.",
      "type": "object",
      "properties": {
        "ignore-one-line-docstrings": {
          "description": "Skip docstrings which fit on a single line.\n\nNote: The corresponding setting in `pydoclint`\nis named `skip-checking-short-docstrings`.",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "PydocstyleOptions": {
      "description": "Options for the `pydocstyle` plugin.",
      "type": "object",
      "properties": {
        "convention": {
          "description": "Whether to use Google-style, NumPy-style conventions, or the [PEP 257](https://peps.python.org/pep-0257/)\ndefaults when analyzing docstring sections.\n\nEnabling a convention will disable all rules that are not included in\nthe specified convention. As such, the intended workflow is to enable a\nconvention and then selectively enable or disable any additional rules\non top of it.\n\nFor example, to use Google-style conventions but avoid requiring\ndocumentation for every function parameter:\n\n```toml\n[tool.ruff.lint]\n# Enable all `pydocstyle` rules, limiting to those that adhere to the\n# Google convention via `convention = \"google\"`, below.\nselect = [\"D\"]\n\n# On top of the Google convention, disable `D417`, which requires\n# documentation for every function parameter.\nignore = [\"D417\"]\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n```\n\nTo enable an additional rule that's excluded from the convention,\nselect the desired rule via its fully qualified rule code (e.g.,\n`D400` instead of `D4` or `D40`):\n\n```toml\n[tool.ruff.lint]\n# Enable D400 on top of the Google convention.\nextend-select = [\"D400\"]\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n```",
          "anyOf": [
            {
              "$ref": "#/definitions/Convention"
            },
            {
              "type": "null"
            }
          ]
        },
        "ignore-decorators": {
          "description": "Ignore docstrings for functions or methods decorated with the\nspecified fully-qualified decorators.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "ignore-var-parameters": {
          "description": "If set to `true`, ignore missing documentation for `*args` and `**kwargs` parameters.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "property-decorators": {
          "description": "A list of decorators that, when applied to a method, indicate that the\nmethod should be treated as a property (in addition to the builtin\n`@property` and standard-library `@functools.cached_property`).\n\nFor example, Ruff will expect that any method decorated by a decorator\nin this list can use a non-imperative summary line.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "PyflakesOptions": {
      "description": "Options for the `pyflakes` plugin.",
      "type": "object",
      "properties": {
        "allowed-unused-imports": {
          "description": "A list of modules to ignore when considering unused imports.\n\nUsed to prevent violations for specific modules that are known to have side effects on\nimport (e.g., `hvplot.pandas`).\n\nModules in this list are expected to be fully-qualified names (e.g., `hvplot.pandas`). Any\nsubmodule of a given module will also be ignored (e.g., given `hvplot`, `hvplot.pandas`\nwill also be ignored).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "extend-generics": {
          "description": "Additional functions or classes to consider generic, such that any\nsubscripts should be treated as type annotation (e.g., `ForeignKey` in\n`django.db.models.ForeignKey[\"User\"]`.\n\nExpects to receive a list of fully-qualified names (e.g., `django.db.models.ForeignKey`,\nrather than `ForeignKey`).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "PylintOptions": {
      "description": "Options for the `pylint` plugin.",
      "type": "object",
      "properties": {
        "allow-dunder-method-names": {
          "description": "Dunder methods name to allow, in addition to the default set from the\nPython standard library (see `PLW3201`).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "allow-magic-value-types": {
          "description": "Constant types to ignore when used as \"magic values\" (see `PLR2004`).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/ConstantType"
          }
        },
        "max-args": {
          "description": "Maximum number of arguments allowed for a function or method definition\n(see `PLR0913`).",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "max-bool-expr": {
          "description": "Maximum number of Boolean expressions allowed within a single `if` statement\n(see `PLR0916`).",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "max-branches": {
          "description": "Maximum number of branches allowed for a function or method body (see `PLR0912`).",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "max-locals": {
          "description": "Maximum number of local variables allowed for a function or method body (see `PLR0914`).",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "max-nested-blocks": {
          "description": "Maximum number of nested blocks allowed within a function or method body\n(see `PLR1702`).",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "max-positional-args": {
          "description": "Maximum number of positional arguments allowed for a function or method definition\n(see `PLR0917`).\n\nIf not specified, defaults to the value of `max-args`.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "max-public-methods": {
          "description": "Maximum number of public methods allowed for a class (see `PLR0904`).",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "max-returns": {
          "description": "Maximum number of return statements allowed for a function or method\nbody (see `PLR0911`)",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "max-statements": {
          "description": "Maximum number of statements allowed for a function or method body (see `PLR0915`).",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        }
      },
      "additionalProperties": false
    },
    "PythonVersion": {
      "type": "string",
      "enum": [
        "py37",
        "py38",
        "py39",
        "py310",
        "py311",
        "py312",
        "py313",
        "py314"
      ]
    },
    "Quote": {
      "oneOf": [
        {
          "description": "Use double quotes.",
          "type": "string",
          "const": "double"
        },
        {
          "description": "Use single quotes.",
          "type": "string",
          "const": "single"
        }
      ]
    },
    "QuoteStyle": {
      "type": "string",
      "enum": [
        "single",
        "double",
        "preserve"
      ]
    },
    "RelativeImportsOrder": {
      "oneOf": [
        {
          "description": "Place \"closer\" imports (fewer `.` characters, most local) before\n\"further\" imports (more `.` characters, least local).",
          "type": "string",
          "const": "closest-to-furthest"
        },
        {
          "description": "Place \"further\" imports (more `.` characters, least local) imports\nbefore \"closer\" imports (fewer `.` characters, most local).",
          "type": "string",
          "const": "furthest-to-closest"
        }
      ]
    },
    "RequiredVersion": {
      "type": "string"
    },
    "RuffOptions": {
      "description": "Options for the `ruff` plugin",
      "type": "object",
      "properties": {
        "allowed-markup-calls": {
          "description": "A list of callable names, whose result may be safely passed into\n[`markupsafe.Markup`](https://markupsafe.palletsprojects.com/en/stable/escaping/#markupsafe.Markup).\n\nExpects to receive a list of fully-qualified names (e.g., `bleach.clean`, rather than `clean`).\n\nThis setting helps you avoid false positives in code like:\n\n```python\nfrom bleach import clean\nfrom markupsafe import Markup\n\ncleaned_markup = Markup(clean(some_user_input))\n```\n\nWhere the use of [`bleach.clean`](https://bleach.readthedocs.io/en/latest/clean.html)\nusually ensures that there's no XSS vulnerability.\n\nAlthough it is not recommended, you may also use this setting to whitelist other\nkinds of calls, e.g. calls to i18n translation functions, where how safe that is\nwill depend on the implementation and how well the translations are audited.\n\nAnother common use-case is to wrap the output of functions that generate markup\nlike [`xml.etree.ElementTree.tostring`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring)\nor template rendering engines where sanitization of potential user input is either\nalready baked in or has to happen before rendering.",
          "type": [
            "array",
            "null"
          ],
          "deprecated": true,
          "items": {
            "type": "string"
          }
        },
        "extend-markup-names": {
          "description": "A list of additional callable names that behave like\n[`markupsafe.Markup`](https://markupsafe.palletsprojects.com/en/stable/escaping/#markupsafe.Markup).\n\nExpects to receive a list of fully-qualified names (e.g., `webhelpers.html.literal`, rather than\n`literal`).",
          "type": [
            "array",
            "null"
          ],
          "deprecated": true,
          "items": {
            "type": "string"
          }
        },
        "parenthesize-tuple-in-subscript": {
          "description": "Whether to prefer accessing items keyed by tuples with\nparentheses around the tuple (see `RUF031`).",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "RuleSelector": {
      "type": "string",
      "enum": [
        "A",
        "A0",
        "A00",
        "A001",
        "A002",
        "A003",
        "A004",
        "A005",
        "A006",
        "AIR",
        "AIR0",
        "AIR00",
        "AIR001",
        "AIR002",
        "AIR3",
        "AIR30",
        "AIR301",
        "AIR302",
        "AIR31",
        "AIR311",
        "AIR312",
        "ALL",
        "ANN",
        "ANN0",
        "ANN00",
        "ANN001",
        "ANN002",
        "ANN003",
        "ANN2",
        "ANN20",
        "ANN201",
        "ANN202",
        "ANN204",
        "ANN205",
        "ANN206",
        "ANN4",
        "ANN40",
        "ANN401",
        "ARG",
        "ARG0",
        "ARG00",
        "ARG001",
        "ARG002",
        "ARG003",
        "ARG004",
        "ARG005",
        "ASYNC",
        "ASYNC1",
        "ASYNC10",
        "ASYNC100",
        "ASYNC105",
        "ASYNC109",
        "ASYNC11",
        "ASYNC110",
        "ASYNC115",
        "ASYNC116",
        "ASYNC2",
        "ASYNC21",
        "ASYNC210",
        "ASYNC212",
        "ASYNC22",
        "ASYNC220",
        "ASYNC221",
        "ASYNC222",
        "ASYNC23",
        "ASYNC230",
        "ASYNC24",
        "ASYNC240",
        "ASYNC25",
        "ASYNC250",
        "ASYNC251",
        "B",
        "B0",
        "B00",
        "B002",
        "B003",
        "B004",
        "B005",
        "B006",
        "B007",
        "B008",
        "B009",
        "B01",
        "B010",
        "B011",
        "B012",
        "B013",
        "B014",
        "B015",
        "B016",
        "B017",
        "B018",
        "B019",
        "B02",
        "B020",
        "B021",
        "B022",
        "B023",
        "B024",
        "B025",
        "B026",
        "B027",
        "B028",
        "B029",
        "B03",
        "B030",
        "B031",
        "B032",
        "B033",
        "B034",
        "B035",
        "B039",
        "B9",
        "B90",
        "B901",
        "B903",
        "B904",
        "B905",
        "B909",
        "B91",
        "B911",
        "B912",
        "BLE",
        "BLE0",
        "BLE00",
        "BLE001",
        "C",
        "C4",
        "C40",
        "C400",
        "C401",
        "C402",
        "C403",
        "C404",
        "C405",
        "C406",
        "C408",
        "C409",
        "C41",
        "C410",
        "C411",
        "C413",
        "C414",
        "C415",
        "C416",
        "C417",
        "C418",
        "C419",
        "C42",
        "C420",
        "C9",
        "C90",
        "C901",
        "COM",
        "COM8",
        "COM81",
        "COM812",
        "COM818",
        "COM819",
        "CPY",
        "CPY0",
        "CPY00",
        "CPY001",
        "D",
        "D1",
        "D10",
        "D100",
        "D101",
        "D102",
        "D103",
        "D104",
        "D105",
        "D106",
        "D107",
        "D2",
        "D20",
        "D200",
        "D201",
        "D202",
        "D203",
        "D204",
        "D205",
        "D206",
        "D207",
        "D208",
        "D209",
        "D21",
        "D210",
        "D211",
        "D212",
        "D213",
        "D214",
        "D215",
        "D3",
        "D30",
        "D300",
        "D301",
        "D4",
        "D40",
        "D400",
        "D401",
        "D402",
        "D403",
        "D404",
        "D405",
        "D406",
        "D407",
        "D408",
        "D409",
        "D41",
        "D410",
        "D411",
        "D412",
        "D413",
        "D414",
        "D415",
        "D416",
        "D417",
        "D418",
        "D419",
        "DJ",
        "DJ0",
        "DJ00",
        "DJ001",
        "DJ003",
        "DJ006",
        "DJ007",
        "DJ008",
        "DJ01",
        "DJ012",
        "DJ013",
        "DOC",
        "DOC1",
        "DOC10",
        "DOC102",
        "DOC2",
        "DOC20",
        "DOC201",
        "DOC202",
        "DOC4",
        "DOC40",
        "DOC402",
        "DOC403",
        "DOC5",
        "DOC50",
        "DOC501",
        "DOC502",
        "DTZ",
        "DTZ0",
        "DTZ00",
        "DTZ001",
        "DTZ002",
        "DTZ003",
        "DTZ004",
        "DTZ005",
        "DTZ006",
        "DTZ007",
        "DTZ01",
        "DTZ011",
        "DTZ012",
        "DTZ9",
        "DTZ90",
        "DTZ901",
        "E",
        "E1",
        "E10",
        "E101",
        "E11",
        "E111",
        "E112",
        "E113",
        "E114",
        "E115",
        "E116",
        "E117",
        "E2",
        "E20",
        "E201",
        "E202",
        "E203",
        "E204",
        "E21",
        "E211",
        "E22",
        "E221",
        "E222",
        "E223",
        "E224",
        "E225",
        "E226",
        "E227",
        "E228",
        "E23",
        "E231",
        "E24",
        "E241",
        "E242",
        "E25",
        "E251",
        "E252",
        "E26",
        "E261",
        "E262",
        "E265",
        "E266",
        "E27",
        "E271",
        "E272",
        "E273",
        "E274",
        "E275",
        "E3",
        "E30",
        "E301",
        "E302",
        "E303",
        "E304",
        "E305",
        "E306",
        "E4",
        "E40",
        "E401",
        "E402",
        "E5",
        "E50",
        "E501",
        "E502",
        "E7",
        "E70",
        "E701",
        "E702",
        "E703",
        "E71",
        "E711",
        "E712",
        "E713",
        "E714",
        "E72",
        "E721",
        "E722",
        "E73",
        "E731",
        "E74",
        "E741",
        "E742",
        "E743",
        "E9",
        "E90",
        "E902",
        "EM",
        "EM1",
        "EM10",
        "EM101",
        "EM102",
        "EM103",
        "ERA",
        "ERA0",
        "ERA00",
        "ERA001",
        "EXE",
        "EXE0",
        "EXE00",
        "EXE001",
        "EXE002",
        "EXE003",
        "EXE004",
        "EXE005",
        "F",
        "F4",
        "F40",
        "F401",
        "F402",
        "F403",
        "F404",
        "F405",
        "F406",
        "F407",
        "F5",
        "F50",
        "F501",
        "F502",
        "F503",
        "F504",
        "F505",
        "F506",
        "F507",
        "F508",
        "F509",
        "F52",
        "F521",
        "F522",
        "F523",
        "F524",
        "F525",
        "F54",
        "F541",
        "F6",
        "F60",
        "F601",
        "F602",
        "F62",
        "F621",
        "F622",
        "F63",
        "F631",
        "F632",
        "F633",
        "F634",
        "F7",
        "F70",
        "F701",
        "F702",
        "F704",
        "F706",
        "F707",
        "F72",
        "F722",
        "F8",
        "F81",
        "F811",
        "F82",
        "F821",
        "F822",
        "F823",
        "F84",
        "F841",
        "F842",
        "F9",
        "F90",
        "F901",
        "FA",
        "FA1",
        "FA10",
        "FA100",
        "FA102",
        "FAST",
        "FAST0",
        "FAST00",
        "FAST001",
        "FAST002",
        "FAST003",
        "FBT",
        "FBT0",
        "FBT00",
        "FBT001",
        "FBT002",
        "FBT003",
        "FIX",
        "FIX0",
        "FIX00",
        "FIX001",
        "FIX002",
        "FIX003",
        "FIX004",
        "FLY",
        "FLY0",
        "FLY00",
        "FLY002",
        "FURB",
        "FURB1",
        "FURB10",
        "FURB101",
        "FURB103",
        "FURB105",
        "FURB11",
        "FURB110",
        "FURB113",
        "FURB116",
        "FURB118",
        "FURB12",
        "FURB122",
        "FURB129",
        "FURB13",
        "FURB131",
        "FURB132",
        "FURB136",
        "FURB14",
        "FURB140",
        "FURB142",
        "FURB145",
        "FURB148",
        "FURB15",
        "FURB152",
        "FURB154",
        "FURB156",
        "FURB157",
        "FURB16",
        "FURB161",
        "FURB162",
        "FURB163",
        "FURB164",
        "FURB166",
        "FURB167",
        "FURB168",
        "FURB169",
        "FURB17",
        "FURB171",
        "FURB177",
        "FURB18",
        "FURB180",
        "FURB181",
        "FURB187",
        "FURB188",
        "FURB189",
        "FURB19",
        "FURB192",
        "G",
        "G0",
        "G00",
        "G001",
        "G002",
        "G003",
        "G004",
        "G01",
        "G010",
        "G1",
        "G10",
        "G101",
        "G2",
        "G20",
        "G201",
        "G202",
        "I",
        "I0",
        "I00",
        "I001",
        "I002",
        "ICN",
        "ICN0",
        "ICN00",
        "ICN001",
        "ICN002",
        "ICN003",
        "INP",
        "INP0",
        "INP00",
        "INP001",
        "INT",
        "INT0",
        "INT00",
        "INT001",
        "INT002",
        "INT003",
        "ISC",
        "ISC0",
        "ISC00",
        "ISC001",
        "ISC002",
        "ISC003",
        "LOG",
        "LOG0",
        "LOG00",
        "LOG001",
        "LOG002",
        "LOG004",
        "LOG007",
        "LOG009",
        "LOG01",
        "LOG014",
        "LOG015",
        "N",
        "N8",
        "N80",
        "N801",
        "N802",
        "N803",
        "N804",
        "N805",
        "N806",
        "N807",
        "N81",
        "N811",
        "N812",
        "N813",
        "N814",
        "N815",
        "N816",
        "N817",
        "N818",
        "N9",
        "N99",
        "N999",
        "NPY",
        "NPY0",
        "NPY00",
        "NPY001",
        "NPY002",
        "NPY003",
        "NPY2",
        "NPY20",
        "NPY201",
        "PD",
        "PD0",
        "PD00",
        "PD002",
        "PD003",
        "PD004",
        "PD007",
        "PD008",
        "PD009",
        "PD01",
        "PD010",
        "PD011",
        "PD012",
        "PD013",
        "PD015",
        "PD1",
        "PD10",
        "PD101",
        "PERF",
        "PERF1",
        "PERF10",
        "PERF101",
        "PERF102",
        "PERF2",
        "PERF20",
        "PERF203",
        "PERF4",
        "PERF40",
        "PERF401",
        "PERF402",
        "PERF403",
        "PGH",
        "PGH0",
        "PGH00",
        "PGH003",
        "PGH004",
        "PGH005",
        "PIE",
        "PIE7",
        "PIE79",
        "PIE790",
        "PIE794",
        "PIE796",
        "PIE8",
        "PIE80",
        "PIE800",
        "PIE804",
        "PIE807",
        "PIE808",
        "PIE81",
        "PIE810",
        "PL",
        "PLC",
        "PLC0",
        "PLC01",
        "PLC010",
        "PLC0105",
        "PLC013",
        "PLC0131",
        "PLC0132",
        "PLC02",
        "PLC020",
        "PLC0205",
        "PLC0206",
        "PLC0207",
        "PLC0208",
        "PLC04",
        "PLC041",
        "PLC0414",
        "PLC0415",
        "PLC1",
        "PLC18",
        "PLC180",
        "PLC1802",
        "PLC19",
        "PLC190",
        "PLC1901",
        "PLC2",
        "PLC24",
        "PLC240",
        "PLC2401",
        "PLC2403",
        "PLC27",
        "PLC270",
        "PLC2701",
        "PLC28",
        "PLC280",
        "PLC2801",
        "PLC3",
        "PLC30",
        "PLC300",
        "PLC3002",
        "PLE",
        "PLE0",
        "PLE01",
        "PLE010",
        "PLE0100",
        "PLE0101",
        "PLE011",
        "PLE0115",
        "PLE0116",
        "PLE0117",
        "PLE0118",
        "PLE02",
        "PLE023",
        "PLE0237",
        "PLE024",
        "PLE0241",
        "PLE03",
        "PLE030",
        "PLE0302",
        "PLE0303",
        "PLE0304",
        "PLE0305",
        "PLE0307",
        "PLE0308",
        "PLE0309",
        "PLE06",
        "PLE060",
        "PLE0604",
        "PLE0605",
        "PLE064",
        "PLE0643",
        "PLE07",
        "PLE070",
        "PLE0704",
        "PLE1",
        "PLE11",
        "PLE113",
        "PLE1132",
        "PLE114",
        "PLE1141",
        "PLE1142",
        "PLE12",
        "PLE120",
        "PLE1205",
        "PLE1206",
        "PLE13",
        "PLE130",
        "PLE1300",
        "PLE1307",
        "PLE131",
        "PLE1310",
        "PLE15",
        "PLE150",
        "PLE1507",
        "PLE151",
        "PLE1519",
        "PLE152",
        "PLE1520",
        "PLE17",
        "PLE170",
        "PLE1700",
        "PLE2",
        "PLE25",
        "PLE250",
        "PLE2502",
        "PLE251",
        "PLE2510",
        "PLE2512",
        "PLE2513",
        "PLE2514",
        "PLE2515",
        "PLE4",
        "PLE47",
        "PLE470",
        "PLE4703",
        "PLR",
        "PLR0",
        "PLR01",
        "PLR012",
        "PLR0124",
        "PLR013",
        "PLR0133",
        "PLR02",
        "PLR020",
        "PLR0202",
        "PLR0203",
        "PLR0206",
        "PLR04",
        "PLR040",
        "PLR0402",
        "PLR09",
        "PLR090",
        "PLR0904",
        "PLR091",
        "PLR0911",
        "PLR0912",
        "PLR0913",
        "PLR0914",
        "PLR0915",
        "PLR0916",
        "PLR0917",
        "PLR1",
        "PLR17",
        "PLR170",
        "PLR1702",
        "PLR1704",
        "PLR1708",
        "PLR171",
        "PLR1711",
        "PLR1714",
        "PLR1716",
        "PLR172",
        "PLR1722",
        "PLR173",
        "PLR1730",
        "PLR1733",
        "PLR1736",
        "PLR2",
        "PLR20",
        "PLR200",
        "PLR2004",
        "PLR204",
        "PLR2044",
        "PLR5",
        "PLR55",
        "PLR550",
        "PLR5501",
        "PLR6",
        "PLR61",
        "PLR610",
        "PLR6104",
        "PLR62",
        "PLR620",
        "PLR6201",
        "PLR63",
        "PLR630",
        "PLR6301",
        "PLW",
        "PLW0",
        "PLW01",
        "PLW010",
        "PLW0108",
        "PLW012",
        "PLW0120",
        "PLW0127",
        "PLW0128",
        "PLW0129",
        "PLW013",
        "PLW0131",
        "PLW0133",
        "PLW017",
        "PLW0177",
        "PLW02",
        "PLW021",
        "PLW0211",
        "PLW024",
        "PLW0244",
        "PLW0245",
        "PLW04",
        "PLW040",
        "PLW0406",
        "PLW06",
        "PLW060",
        "PLW0602",
        "PLW0603",
        "PLW0604",
        "PLW064",
        "PLW0642",
        "PLW07",
        "PLW071",
        "PLW0711",
        "PLW1",
        "PLW15",
        "PLW150",
        "PLW1501",
        "PLW1507",
        "PLW1508",
        "PLW1509",
        "PLW151",
        "PLW1510",
        "PLW1514",
        "PLW16",
        "PLW164",
        "PLW1641",
        "PLW2",
        "PLW21",
        "PLW210",
        "PLW2101",
        "PLW29",
        "PLW290",
        "PLW2901",
        "PLW3",
        "PLW32",
        "PLW320",
        "PLW3201",
        "PLW33",
        "PLW330",
        "PLW3301",
        "PT",
        "PT0",
        "PT00",
        "PT001",
        "PT002",
        "PT003",
        "PT006",
        "PT007",
        "PT008",
        "PT009",
        "PT01",
        "PT010",
        "PT011",
        "PT012",
        "PT013",
        "PT014",
        "PT015",
        "PT016",
        "PT017",
        "PT018",
        "PT019",
        "PT02",
        "PT020",
        "PT021",
        "PT022",
        "PT023",
        "PT024",
        "PT025",
        "PT026",
        "PT027",
        "PT028",
        "PT029",
        "PT03",
        "PT030",
        "PT031",
        "PTH",
        "PTH1",
        "PTH10",
        "PTH100",
        "PTH101",
        "PTH102",
        "PTH103",
        "PTH104",
        "PTH105",
        "PTH106",
        "PTH107",
        "PTH108",
        "PTH109",
        "PTH11",
        "PTH110",
        "PTH111",
        "PTH112",
        "PTH113",
        "PTH114",
        "PTH115",
        "PTH116",
        "PTH117",
        "PTH118",
        "PTH119",
        "PTH12",
        "PTH120",
        "PTH121",
        "PTH122",
        "PTH123",
        "PTH124",
        "PTH2",
        "PTH20",
        "PTH201",
        "PTH202",
        "PTH203",
        "PTH204",
        "PTH205",
        "PTH206",
        "PTH207",
        "PTH208",
        "PTH21",
        "PTH210",
        "PTH211",
        "PYI",
        "PYI0",
        "PYI00",
        "PYI001",
        "PYI002",
        "PYI003",
        "PYI004",
        "PYI005",
        "PYI006",
        "PYI007",
        "PYI008",
        "PYI009",
        "PYI01",
        "PYI010",
        "PYI011",
        "PYI012",
        "PYI013",
        "PYI014",
        "PYI015",
        "PYI016",
        "PYI017",
        "PYI018",
        "PYI019",
        "PYI02",
        "PYI020",
        "PYI021",
        "PYI024",
        "PYI025",
        "PYI026",
        "PYI029",
        "PYI03",
        "PYI030",
        "PYI032",
        "PYI033",
        "PYI034",
        "PYI035",
        "PYI036",
        "PYI04",
        "PYI041",
        "PYI042",
        "PYI043",
        "PYI044",
        "PYI045",
        "PYI046",
        "PYI047",
        "PYI048",
        "PYI049",
        "PYI05",
        "PYI050",
        "PYI051",
        "PYI052",
        "PYI053",
        "PYI054",
        "PYI055",
        "PYI056",
        "PYI057",
        "PYI058",
        "PYI059",
        "PYI06",
        "PYI061",
        "PYI062",
        "PYI063",
        "PYI064",
        "PYI066",
        "Q",
        "Q0",
        "Q00",
        "Q000",
        "Q001",
        "Q002",
        "Q003",
        "Q004",
        "RET",
        "RET5",
        "RET50",
        "RET501",
        "RET502",
        "RET503",
        "RET504",
        "RET505",
        "RET506",
        "RET507",
        "RET508",
        "RSE",
        "RSE1",
        "RSE10",
        "RSE102",
        "RUF",
        "RUF0",
        "RUF00",
        "RUF001",
        "RUF002",
        "RUF003",
        "RUF005",
        "RUF006",
        "RUF007",
        "RUF008",
        "RUF009",
        "RUF01",
        "RUF010",
        "RUF012",
        "RUF013",
        "RUF015",
        "RUF016",
        "RUF017",
        "RUF018",
        "RUF019",
        "RUF02",
        "RUF020",
        "RUF021",
        "RUF022",
        "RUF023",
        "RUF024",
        "RUF026",
        "RUF027",
        "RUF028",
        "RUF029",
        "RUF03",
        "RUF030",
        "RUF031",
        "RUF032",
        "RUF033",
        "RUF034",
        "RUF036",
        "RUF037",
        "RUF038",
        "RUF039",
        "RUF04",
        "RUF040",
        "RUF041",
        "RUF043",
        "RUF045",
        "RUF046",
        "RUF047",
        "RUF048",
        "RUF049",
        "RUF05",
        "RUF051",
        "RUF052",
        "RUF053",
        "RUF054",
        "RUF055",
        "RUF056",
        "RUF057",
        "RUF058",
        "RUF059",
        "RUF06",
        "RUF060",
        "RUF061",
        "RUF063",
        "RUF064",
        "RUF065",
        "RUF1",
        "RUF10",
        "RUF100",
        "RUF101",
        "RUF102",
        "RUF2",
        "RUF20",
        "RUF200",
        "S",
        "S1",
        "S10",
        "S101",
        "S102",
        "S103",
        "S104",
        "S105",
        "S106",
        "S107",
        "S108",
        "S11",
        "S110",
        "S112",
        "S113",
        "S2",
        "S20",
        "S201",
        "S202",
        "S3",
        "S30",
        "S301",
        "S302",
        "S303",
        "S304",
        "S305",
        "S306",
        "S307",
        "S308",
        "S31",
        "S310",
        "S311",
        "S312",
        "S313",
        "S314",
        "S315",
        "S316",
        "S317",
        "S318",
        "S319",
        "S32",
        "S321",
        "S323",
        "S324",
        "S4",
        "S40",
        "S401",
        "S402",
        "S403",
        "S404",
        "S405",
        "S406",
        "S407",
        "S408",
        "S409",
        "S41",
        "S411",
        "S412",
        "S413",
        "S415",
        "S5",
        "S50",
        "S501",
        "S502",
        "S503",
        "S504",
        "S505",
        "S506",
        "S507",
        "S508",
        "S509",
        "S6",
        "S60",
        "S601",
        "S602",
        "S603",
        "S604",
        "S605",
        "S606",
        "S607",
        "S608",
        "S609",
        "S61",
        "S610",
        "S611",
        "S612",
        "S7",
        "S70",
        "S701",
        "S702",
        "S704",
        "SIM",
        "SIM1",
        "SIM10",
        "SIM101",
        "SIM102",
        "SIM103",
        "SIM105",
        "SIM107",
        "SIM108",
        "SIM109",
        "SIM11",
        "SIM110",
        "SIM112",
        "SIM113",
        "SIM114",
        "SIM115",
        "SIM116",
        "SIM117",
        "SIM118",
        "SIM2",
        "SIM20",
        "SIM201",
        "SIM202",
        "SIM208",
        "SIM21",
        "SIM210",
        "SIM211",
        "SIM212",
        "SIM22",
        "SIM220",
        "SIM221",
        "SIM222",
        "SIM223",
        "SIM3",
        "SIM30",
        "SIM300",
        "SIM4",
        "SIM40",
        "SIM401",
        "SIM9",
        "SIM90",
        "SIM905",
        "SIM91",
        "SIM910",
        "SIM911",
        "SLF",
        "SLF0",
        "SLF00",
        "SLF001",
        "SLOT",
        "SLOT0",
        "SLOT00",
        "SLOT000",
        "SLOT001",
        "SLOT002",
        "T",
        "T1",
        "T10",
        "T100",
        "T2",
        "T20",
        "T201",
        "T203",
        "TC",
        "TC0",
        "TC00",
        "TC001",
        "TC002",
        "TC003",
        "TC004",
        "TC005",
        "TC006",
        "TC007",
        "TC008",
        "TC01",
        "TC010",
        "TD",
        "TD0",
        "TD00",
        "TD001",
        "TD002",
        "TD003",
        "TD004",
        "TD005",
        "TD006",
        "TD007",
        "TID",
        "TID2",
        "TID25",
        "TID251",
        "TID252",
        "TID253",
        "TRY",
        "TRY0",
        "TRY00",
        "TRY002",
        "TRY003",
        "TRY004",
        "TRY2",
        "TRY20",
        "TRY201",
        "TRY203",
        "TRY3",
        "TRY30",
        "TRY300",
        "TRY301",
        "TRY4",
        "TRY40",
        "TRY400",
        "TRY401",
        "UP",
        "UP0",
        "UP00",
        "UP001",
        "UP003",
        "UP004",
        "UP005",
        "UP006",
        "UP007",
        "UP008",
        "UP009",
        "UP01",
        "UP010",
        "UP011",
        "UP012",
        "UP013",
        "UP014",
        "UP015",
        "UP017",
        "UP018",
        "UP019",
        "UP02",
        "UP020",
        "UP021",
        "UP022",
        "UP023",
        "UP024",
        "UP025",
        "UP026",
        "UP028",
        "UP029",
        "UP03",
        "UP030",
        "UP031",
        "UP032",
        "UP033",
        "UP034",
        "UP035",
        "UP036",
        "UP037",
        "UP039",
        "UP04",
        "UP040",
        "UP041",
        "UP042",
        "UP043",
        "UP044",
        "UP045",
        "UP046",
        "UP047",
        "UP049",
        "UP05",
        "UP050",
        "W",
        "W1",
        "W19",
        "W191",
        "W2",
        "W29",
        "W291",
        "W292",
        "W293",
        "W3",
        "W39",
        "W391",
        "W5",
        "W50",
        "W505",
        "W6",
        "W60",
        "W605",
        "YTT",
        "YTT1",
        "YTT10",
        "YTT101",
        "YTT102",
        "YTT103",
        "YTT2",
        "YTT20",
        "YTT201",
        "YTT202",
        "YTT203",
        "YTT204",
        "YTT3",
        "YTT30",
        "YTT301",
        "YTT302",
        "YTT303"
      ]
    },
    "Strictness": {
      "oneOf": [
        {
          "description": "Ban imports that extend into the parent module or beyond.",
          "type": "string",
          "const": "parents"
        },
        {
          "description": "Ban all relative imports.",
          "type": "string",
          "const": "all"
        }
      ]
    }
  }
}
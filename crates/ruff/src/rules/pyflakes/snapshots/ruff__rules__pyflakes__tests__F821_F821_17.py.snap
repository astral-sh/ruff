---
source: crates/ruff/src/rules/pyflakes/mod.rs
---
F821_17.py:15:12: F821 Undefined name `DoesNotExist`
   |
13 | # Types used in aliased assignment must exist
14 | 
15 | type Foo = DoesNotExist  # F821: Undefined name `DoesNotExist`
   |            ^^^^^^^^^^^^ F821
16 | type Foo = list[DoesNotExist]  # F821: Undefined name `DoesNotExist`
   |

F821_17.py:16:17: F821 Undefined name `DoesNotExist`
   |
15 | type Foo = DoesNotExist  # F821: Undefined name `DoesNotExist`
16 | type Foo = list[DoesNotExist]  # F821: Undefined name `DoesNotExist`
   |                 ^^^^^^^^^^^^ F821
17 | 
18 | # Type parameters do not escape alias scopes
   |

F821_17.py:21:1: F821 Undefined name `T`
   |
20 | type Foo[T] = T
21 | T  # F821: Undefined name `T` - not accessible afterward alias scope
   | ^ F821
22 | 
23 | # Type parameters in functions
   |

F821_17.py:38:17: F821 Undefined name `T`
   |
36 | from some_library import some_decorator
37 | 
38 | @some_decorator(T)  # F821: Undefined name `T` - not accessible in decorators
   |                 ^ F821
39 | 
40 | def foo[T](t: T) -> None: ...
   |

F821_17.py:41:1: F821 Undefined name `T`
   |
40 | def foo[T](t: T) -> None: ...
41 | T  # F821: Undefined name `T` - not accessible afterward function scope
   | ^ F821
   |

F821_17.py:63:17: F821 Undefined name `T`
   |
62 | from some_library import some_decorator
63 | @some_decorator(T)  # F821: Undefined name `T` - not accessible in decorators
   |                 ^ F821
64 | 
65 | class Foo[T](list[T]): ...
   |

F821_17.py:66:1: F821 Undefined name `T`
   |
65 | class Foo[T](list[T]): ...
66 | T  # F821: Undefined name `T` - not accessible after class scope
   | ^ F821
67 | 
68 | # Types specified in bounds should exist
   |

F821_17.py:70:13: F821 Undefined name `DoesNotExist`
   |
68 | # Types specified in bounds should exist
69 | 
70 | type Foo[T: DoesNotExist] = T  # F821: Undefined name `DoesNotExist`
   |             ^^^^^^^^^^^^ F821
71 | def foo[T: DoesNotExist](t: T) -> T: return t  # F821: Undefined name `DoesNotExist`
72 | class Foo[T: DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
   |

F821_17.py:71:12: F821 Undefined name `DoesNotExist`
   |
70 | type Foo[T: DoesNotExist] = T  # F821: Undefined name `DoesNotExist`
71 | def foo[T: DoesNotExist](t: T) -> T: return t  # F821: Undefined name `DoesNotExist`
   |            ^^^^^^^^^^^^ F821
72 | class Foo[T: DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
   |

F821_17.py:72:14: F821 Undefined name `DoesNotExist`
   |
70 | type Foo[T: DoesNotExist] = T  # F821: Undefined name `DoesNotExist`
71 | def foo[T: DoesNotExist](t: T) -> T: return t  # F821: Undefined name `DoesNotExist`
72 | class Foo[T: DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
   |              ^^^^^^^^^^^^ F821
73 | 
74 | type Foo[T: (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |

F821_17.py:74:14: F821 Undefined name `DoesNotExist1`
   |
72 | class Foo[T: DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
73 | 
74 | type Foo[T: (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |              ^^^^^^^^^^^^^ F821
75 | def foo[T: (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
76 | class Foo[T: (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |

F821_17.py:74:29: F821 Undefined name `DoesNotExist2`
   |
72 | class Foo[T: DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
73 | 
74 | type Foo[T: (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |                             ^^^^^^^^^^^^^ F821
75 | def foo[T: (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
76 | class Foo[T: (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |

F821_17.py:75:13: F821 Undefined name `DoesNotExist1`
   |
74 | type Foo[T: (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
75 | def foo[T: (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |             ^^^^^^^^^^^^^ F821
76 | class Foo[T: (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |

F821_17.py:75:28: F821 Undefined name `DoesNotExist2`
   |
74 | type Foo[T: (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
75 | def foo[T: (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |                            ^^^^^^^^^^^^^ F821
76 | class Foo[T: (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |

F821_17.py:76:15: F821 Undefined name `DoesNotExist1`
   |
74 | type Foo[T: (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
75 | def foo[T: (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
76 | class Foo[T: (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |               ^^^^^^^^^^^^^ F821
77 | 
78 | # Type parameters in nested classes
   |

F821_17.py:76:30: F821 Undefined name `DoesNotExist2`
   |
74 | type Foo[T: (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
75 | def foo[T: (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
76 | class Foo[T: (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |                              ^^^^^^^^^^^^^ F821
77 | 
78 | # Type parameters in nested classes
   |

F821_17.py:91:52: F821 Undefined name `t`
   |
89 |             return x
90 |         
91 |         def cannot_access_parent_variable(self, x: t) -> t:  # F821: Undefined name `T`
   |                                                    ^ F821
92 |                 t # F821: Undefined name `t`
93 |                 return x
   |

F821_17.py:91:58: F821 Undefined name `t`
   |
89 |             return x
90 |         
91 |         def cannot_access_parent_variable(self, x: t) -> t:  # F821: Undefined name `T`
   |                                                          ^ F821
92 |                 t # F821: Undefined name `t`
93 |                 return x
   |

F821_17.py:92:17: F821 Undefined name `t`
   |
91 |         def cannot_access_parent_variable(self, x: t) -> t:  # F821: Undefined name `T`
92 |                 t # F821: Undefined name `t`
   |                 ^ F821
93 |                 return x
   |



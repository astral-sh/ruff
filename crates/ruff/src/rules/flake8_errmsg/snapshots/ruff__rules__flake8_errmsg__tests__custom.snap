---
source: crates/ruff/src/rules/flake8_errmsg/mod.rs
---
EM.py:5:24: EM101 [*] Exception must not use a string literal, assign to variable first
  |
5 | def f_a():
6 |     raise RuntimeError("This is an example exception")
  |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
  |
  = help: Assign to variable; remove string literal

ℹ Suggested fix
2 2 | 
3 3 | 
4 4 | def f_a():
5   |-    raise RuntimeError("This is an example exception")
  5 |+    msg = "This is an example exception"
  6 |+    raise RuntimeError(msg)
6 7 | 
7 8 | 
8 9 | def f_a_short():

EM.py:18:24: EM102 [*] Exception must not use an f-string literal, assign to variable first
   |
18 | def f_b():
19 |     example = "example"
20 |     raise RuntimeError(f"This is an {example} exception")
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
   |
   = help: Assign to variable; remove f-string literal

ℹ Suggested fix
15 15 | 
16 16 | def f_b():
17 17 |     example = "example"
18    |-    raise RuntimeError(f"This is an {example} exception")
   18 |+    msg = f"This is an {example} exception"
   19 |+    raise RuntimeError(msg)
19 20 | 
20 21 | 
21 22 | def f_c():

EM.py:22:24: EM103 [*] Exception must not use a `.format()` string directly, assign to variable first
   |
22 | def f_c():
23 |     raise RuntimeError("This is an {example} exception".format(example="example"))
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM103
   |
   = help: Assign to variable; remove `.format()` string

ℹ Suggested fix
19 19 | 
20 20 | 
21 21 | def f_c():
22    |-    raise RuntimeError("This is an {example} exception".format(example="example"))
   22 |+    msg = "This is an {example} exception".format(example="example")
   23 |+    raise RuntimeError(msg)
23 24 | 
24 25 | 
25 26 | def f_ok():

EM.py:32:24: EM101 Exception must not use a string literal, assign to variable first
   |
32 | def f_unfixable():
33 |     msg = "hello"
34 |     raise RuntimeError("This is an example exception")
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
   |
   = help: Assign to variable; remove string literal

EM.py:39:24: EM101 [*] Exception must not use a string literal, assign to variable first
   |
39 |         msg = "hello"
40 | 
41 |     raise RuntimeError("This is an example exception")
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
   |
   = help: Assign to variable; remove string literal

ℹ Suggested fix
36 36 |     def nested():
37 37 |         msg = "hello"
38 38 | 
39    |-    raise RuntimeError("This is an example exception")
   39 |+    msg = "This is an example exception"
   40 |+    raise RuntimeError(msg)
40 41 | 
41 42 | 
42 43 | def f_msg_in_parent_scope():

EM.py:46:28: EM101 Exception must not use a string literal, assign to variable first
   |
46 |     def nested():
47 |         raise RuntimeError("This is an example exception")
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
   |
   = help: Assign to variable; remove string literal

EM.py:51:28: EM101 [*] Exception must not use a string literal, assign to variable first
   |
51 | def f_fix_indentation_check(foo):
52 |     if foo:
53 |         raise RuntimeError("This is an example exception")
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
54 |     else:
55 |         if foo == "foo":
   |
   = help: Assign to variable; remove string literal

ℹ Suggested fix
48 48 | 
49 49 | def f_fix_indentation_check(foo):
50 50 |     if foo:
51    |-        raise RuntimeError("This is an example exception")
   51 |+        msg = "This is an example exception"
   52 |+        raise RuntimeError(msg)
52 53 |     else:
53 54 |         if foo == "foo":
54 55 |             raise RuntimeError(f"This is an exception: {foo}")

EM.py:54:32: EM102 [*] Exception must not use an f-string literal, assign to variable first
   |
54 |     else:
55 |         if foo == "foo":
56 |             raise RuntimeError(f"This is an exception: {foo}")
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
57 |     raise RuntimeError("This is an exception: {}".format(foo))
   |
   = help: Assign to variable; remove f-string literal

ℹ Suggested fix
51 51 |         raise RuntimeError("This is an example exception")
52 52 |     else:
53 53 |         if foo == "foo":
54    |-            raise RuntimeError(f"This is an exception: {foo}")
   54 |+            msg = f"This is an exception: {foo}"
   55 |+            raise RuntimeError(msg)
55 56 |     raise RuntimeError("This is an exception: {}".format(foo))
56 57 | 
57 58 | 

EM.py:55:24: EM103 [*] Exception must not use a `.format()` string directly, assign to variable first
   |
55 |         if foo == "foo":
56 |             raise RuntimeError(f"This is an exception: {foo}")
57 |     raise RuntimeError("This is an exception: {}".format(foo))
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM103
   |
   = help: Assign to variable; remove `.format()` string

ℹ Suggested fix
52 52 |     else:
53 53 |         if foo == "foo":
54 54 |             raise RuntimeError(f"This is an exception: {foo}")
55    |-    raise RuntimeError("This is an exception: {}".format(foo))
   55 |+    msg = "This is an exception: {}".format(foo)
   56 |+    raise RuntimeError(msg)
56 57 | 
57 58 | 
58 59 | # Report these, but don't fix them

EM.py:59:28: EM101 Exception must not use a string literal, assign to variable first
   |
59 | # Report these, but don't fix them
60 | if foo: raise RuntimeError("This is an example exception")
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
61 | if foo: x = 1; raise RuntimeError("This is an example exception")
   |
   = help: Assign to variable; remove string literal

EM.py:60:35: EM101 Exception must not use a string literal, assign to variable first
   |
60 | # Report these, but don't fix them
61 | if foo: raise RuntimeError("This is an example exception")
62 | if foo: x = 1; raise RuntimeError("This is an example exception")
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
   |
   = help: Assign to variable; remove string literal



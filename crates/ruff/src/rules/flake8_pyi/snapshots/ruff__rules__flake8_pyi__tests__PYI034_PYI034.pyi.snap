---
source: crates/ruff/src/rules/flake8_pyi/mod.rs
---
PYI034.pyi:18:9: PYI034 `__new__` methods in classes like `Bad` usually return `self` at runtime
   |
16 |     object
17 | ):  # Y040 Do not inherit from "object" explicitly, as it is redundant in Python 3
18 |     def __new__(
   |         ^^^^^^^ PYI034
19 |         cls, *args: Any, **kwargs: Any
20 |     ) -> Bad: ...  # Y034 "__new__" methods usually return "self" at runtime. Consider using "typing_extensions.Self" in "Bad.__new__", e.g. "def __new__(cls, *args: Any, **kwargs: Any) -> Self: ..."
   |
   = help: Consider using `typing_extensions.Self` as return type

PYI034.pyi:33:9: PYI034 `__enter__` methods in classes like `Bad` usually return `self` at runtime
   |
31 |         self, other: typing.Any
32 |     ) -> typing.Any: ...  # Y032 Prefer "object" to "Any" for the second parameter in "__ne__" methods
33 |     def __enter__(
   |         ^^^^^^^^^ PYI034
34 |         self,
35 |     ) -> Bad: ...  # Y034 "__enter__" methods in classes like "Bad" usually return "self" at runtime. Consider using "typing_extensions.Self" in "Bad.__enter__", e.g. "def __enter__(self) -> Self: ..."
   |
   = help: Consider using `typing_extensions.Self` as return type

PYI034.pyi:36:15: PYI034 `__aenter__` methods in classes like `Bad` usually return `self` at runtime
   |
34 |         self,
35 |     ) -> Bad: ...  # Y034 "__enter__" methods in classes like "Bad" usually return "self" at runtime. Consider using "typing_extensions.Self" in "Bad.__enter__", e.g. "def __enter__(self) -> Self: ..."
36 |     async def __aenter__(
   |               ^^^^^^^^^^ PYI034
37 |         self,
38 |     ) -> Bad: ...  # Y034 "__aenter__" methods in classes like "Bad" usually return "self" at runtime. Consider using "typing_extensions.Self" in "Bad.__aenter__", e.g. "async def __aenter__(self) -> Self: ..."
   |
   = help: Consider using `typing_extensions.Self` as return type

PYI034.pyi:39:9: PYI034 `__iadd__` methods in classes like `Bad` usually return `self` at runtime
   |
37 |         self,
38 |     ) -> Bad: ...  # Y034 "__aenter__" methods in classes like "Bad" usually return "self" at runtime. Consider using "typing_extensions.Self" in "Bad.__aenter__", e.g. "async def __aenter__(self) -> Self: ..."
39 |     def __iadd__(
   |         ^^^^^^^^ PYI034
40 |         self, other: Bad
41 |     ) -> Bad: ...  # Y034 "__iadd__" methods in classes like "Bad" usually return "self" at runtime. Consider using "typing_extensions.Self" in "Bad.__iadd__", e.g. "def __iadd__(self, other: Bad) -> Self: ..."
   |
   = help: Consider using `typing_extensions.Self` as return type

PYI034.pyi:102:9: PYI034 `__iter__` methods in classes like `BadIterator1` usually return `self` at runtime
    |
101 | class BadIterator1(Iterator[int]):
102 |     def __iter__(
    |         ^^^^^^^^ PYI034
103 |         self,
104 |     ) -> Iterator[
    |
    = help: Consider using `typing_extensions.Self` as return type

PYI034.pyi:111:9: PYI034 `__iter__` methods in classes like `BadIterator2` usually return `self` at runtime
    |
109 |     typing.Iterator[int]
110 | ):  # Y022 Use "collections.abc.Iterator[T]" instead of "typing.Iterator[T]" (PEP 585 syntax)
111 |     def __iter__(
    |         ^^^^^^^^ PYI034
112 |         self,
113 |     ) -> Iterator[
    |
    = help: Consider using `typing_extensions.Self` as return type

PYI034.pyi:120:9: PYI034 `__iter__` methods in classes like `BadIterator3` usually return `self` at runtime
    |
118 |     typing.Iterator[int]
119 | ):  # Y022 Use "collections.abc.Iterator[T]" instead of "typing.Iterator[T]" (PEP 585 syntax)
120 |     def __iter__(
    |         ^^^^^^^^ PYI034
121 |         self,
122 |     ) -> collections.abc.Iterator[
    |
    = help: Consider using `typing_extensions.Self` as return type

PYI034.pyi:128:9: PYI034 `__iter__` methods in classes like `BadIterator4` usually return `self` at runtime
    |
126 | class BadIterator4(Iterator[int]):
127 |     # Note: *Iterable*, not *Iterator*, returned!
128 |     def __iter__(
    |         ^^^^^^^^ PYI034
129 |         self,
130 |     ) -> Iterable[
    |
    = help: Consider using `typing_extensions.Self` as return type

PYI034.pyi:142:9: PYI034 `__aiter__` methods in classes like `BadAsyncIterator` usually return `self` at runtime
    |
141 | class BadAsyncIterator(collections.abc.AsyncIterator[str]):
142 |     def __aiter__(
    |         ^^^^^^^^^ PYI034
143 |         self,
144 |     ) -> typing.AsyncIterator[
    |
    = help: Consider using `typing_extensions.Self` as return type



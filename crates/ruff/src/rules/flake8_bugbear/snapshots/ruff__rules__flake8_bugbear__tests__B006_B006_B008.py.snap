---
source: crates/ruff/src/rules/flake8_bugbear/mod.rs
---
B006_B008.py:63:25: B006 [*] Do not use mutable data structures for argument defaults
   |
63 | def this_is_wrong(value=[1, 2, 3]):
   |                         ^^^^^^^^^ B006
64 |     ...
   |
   = help: Replace with `None`; initialize within function

ℹ Possible fix
60 60 | # Flag mutable literals/comprehensions
61 61 | 
62 62 | 
63    |-def this_is_wrong(value=[1, 2, 3]):
   63 |+def this_is_wrong(value=None):
   64 |+    if value is None:
   65 |+        value = [1, 2, 3]
64 66 |     ...
65 67 | 
66 68 | 

B006_B008.py:67:30: B006 [*] Do not use mutable data structures for argument defaults
   |
67 | def this_is_also_wrong(value={}):
   |                              ^^ B006
68 |     ...
   |
   = help: Replace with `None`; initialize within function

ℹ Possible fix
64 64 |     ...
65 65 | 
66 66 | 
67    |-def this_is_also_wrong(value={}):
   67 |+def this_is_also_wrong(value=None):
   68 |+    if value is None:
   69 |+        value = {}
68 70 |     ...
69 71 | 
70 72 | 

B006_B008.py:73:52: B006 [*] Do not use mutable data structures for argument defaults
   |
71 | class Foo:
72 |     @staticmethod
73 |     def this_is_also_wrong_and_more_indented(value={}):
   |                                                    ^^ B006
74 |         pass
   |
   = help: Replace with `None`; initialize within function

ℹ Possible fix
70 70 | 
71 71 | class Foo:
72 72 |     @staticmethod
73    |-    def this_is_also_wrong_and_more_indented(value={}):
   73 |+    def this_is_also_wrong_and_more_indented(value=None):
   74 |+        if value is None:
   75 |+            value = {}
74 76 |         pass
75 77 | 
76 78 | 

B006_B008.py:77:31: B006 [*] Do not use mutable data structures for argument defaults
   |
77 |   def multiline_arg_wrong(value={
   |  _______________________________^
78 | | 
79 | | }):
   | |_^ B006
80 |       ...
   |
   = help: Replace with `None`; initialize within function

ℹ Possible fix
74 74 |         pass
75 75 | 
76 76 | 
77    |-def multiline_arg_wrong(value={
78    |-
79    |-}):
   77 |+def multiline_arg_wrong(value=None):
   78 |+    if value is None:
   79 |+        value = {}
80 80 |     ...
81 81 | 
82 82 | def single_line_func_wrong(value = {}): ...

B006_B008.py:82:36: B006 Do not use mutable data structures for argument defaults
   |
80 |     ...
81 | 
82 | def single_line_func_wrong(value = {}): ...
   |                                    ^^ B006
   |
   = help: Replace with `None`; initialize within function

B006_B008.py:85:20: B006 [*] Do not use mutable data structures for argument defaults
   |
85 | def and_this(value=set()):
   |                    ^^^^^ B006
86 |     ...
   |
   = help: Replace with `None`; initialize within function

ℹ Possible fix
82 82 | def single_line_func_wrong(value = {}): ...
83 83 | 
84 84 | 
85    |-def and_this(value=set()):
   85 |+def and_this(value=None):
   86 |+    if value is None:
   87 |+        value = set()
86 88 |     ...
87 89 | 
88 90 | 

B006_B008.py:89:20: B006 [*] Do not use mutable data structures for argument defaults
   |
89 | def this_too(value=collections.OrderedDict()):
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ B006
90 |     ...
   |
   = help: Replace with `None`; initialize within function

ℹ Possible fix
86 86 |     ...
87 87 | 
88 88 | 
89    |-def this_too(value=collections.OrderedDict()):
   89 |+def this_too(value=None):
   90 |+    if value is None:
   91 |+        value = collections.OrderedDict()
90 92 |     ...
91 93 | 
92 94 | 

B006_B008.py:93:32: B006 [*] Do not use mutable data structures for argument defaults
   |
93 | async def async_this_too(value=collections.defaultdict()):
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^ B006
94 |     ...
   |
   = help: Replace with `None`; initialize within function

ℹ Possible fix
90 90 |     ...
91 91 | 
92 92 | 
93    |-async def async_this_too(value=collections.defaultdict()):
   93 |+async def async_this_too(value=None):
   94 |+    if value is None:
   95 |+        value = collections.defaultdict()
94 96 |     ...
95 97 | 
96 98 | 

B006_B008.py:97:26: B006 [*] Do not use mutable data structures for argument defaults
   |
97 | def dont_forget_me(value=collections.deque()):
   |                          ^^^^^^^^^^^^^^^^^^^ B006
98 |     ...
   |
   = help: Replace with `None`; initialize within function

ℹ Possible fix
94  94  |     ...
95  95  | 
96  96  | 
97      |-def dont_forget_me(value=collections.deque()):
    97  |+def dont_forget_me(value=None):
    98  |+    if value is None:
    99  |+        value = collections.deque()
98  100 |     ...
99  101 | 
100 102 | 

B006_B008.py:102:46: B006 [*] Do not use mutable data structures for argument defaults
    |
101 | # N.B. we're also flagging the function call in the comprehension
102 | def list_comprehension_also_not_okay(default=[i**2 for i in range(3)]):
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^ B006
103 |     pass
    |
    = help: Replace with `None`; initialize within function

ℹ Possible fix
99  99  | 
100 100 | 
101 101 | # N.B. we're also flagging the function call in the comprehension
102     |-def list_comprehension_also_not_okay(default=[i**2 for i in range(3)]):
    102 |+def list_comprehension_also_not_okay(default=None):
    103 |+    if default is None:
    104 |+        default = [i ** 2 for i in range(3)]
103 105 |     pass
104 106 | 
105 107 | 

B006_B008.py:106:46: B006 [*] Do not use mutable data structures for argument defaults
    |
106 | def dict_comprehension_also_not_okay(default={i: i**2 for i in range(3)}):
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ B006
107 |     pass
    |
    = help: Replace with `None`; initialize within function

ℹ Possible fix
103 103 |     pass
104 104 | 
105 105 | 
106     |-def dict_comprehension_also_not_okay(default={i: i**2 for i in range(3)}):
    106 |+def dict_comprehension_also_not_okay(default=None):
    107 |+    if default is None:
    108 |+        default = {i: i ** 2 for i in range(3)}
107 109 |     pass
108 110 | 
109 111 | 

B006_B008.py:110:45: B006 [*] Do not use mutable data structures for argument defaults
    |
110 | def set_comprehension_also_not_okay(default={i**2 for i in range(3)}):
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^ B006
111 |     pass
    |
    = help: Replace with `None`; initialize within function

ℹ Possible fix
107 107 |     pass
108 108 | 
109 109 | 
110     |-def set_comprehension_also_not_okay(default={i**2 for i in range(3)}):
    110 |+def set_comprehension_also_not_okay(default=None):
    111 |+    if default is None:
    112 |+        default = {i ** 2 for i in range(3)}
111 113 |     pass
112 114 | 
113 115 | 

B006_B008.py:114:33: B006 [*] Do not use mutable data structures for argument defaults
    |
114 | def kwonlyargs_mutable(*, value=[]):
    |                                 ^^ B006
115 |     ...
    |
    = help: Replace with `None`; initialize within function

ℹ Possible fix
111 111 |     pass
112 112 | 
113 113 | 
114     |-def kwonlyargs_mutable(*, value=[]):
    114 |+def kwonlyargs_mutable(*, value=None):
    115 |+    if value is None:
    116 |+        value = []
115 117 |     ...
116 118 | 
117 119 | 

B006_B008.py:235:20: B006 [*] Do not use mutable data structures for argument defaults
    |
233 | # B006 and B008
234 | # We should handle arbitrary nesting of these B008.
235 | def nested_combo(a=[float(3), dt.datetime.now()]):
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B006
236 |     pass
    |
    = help: Replace with `None`; initialize within function

ℹ Possible fix
232 232 | 
233 233 | # B006 and B008
234 234 | # We should handle arbitrary nesting of these B008.
235     |-def nested_combo(a=[float(3), dt.datetime.now()]):
    235 |+def nested_combo(a=None):
    236 |+    if a is None:
    237 |+        a = [float(3), dt.datetime.now()]
236 238 |     pass
237 239 | 
238 240 | 

B006_B008.py:272:27: B006 [*] Do not use mutable data structures for argument defaults
    |
271 | def mutable_annotations(
272 |     a: list[int] | None = [],
    |                           ^^ B006
273 |     b: Optional[Dict[int, int]] = {},
274 |     c: Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
    |
    = help: Replace with `None`; initialize within function

ℹ Possible fix
269 269 | 
270 270 | 
271 271 | def mutable_annotations(
272     |-    a: list[int] | None = [],
    272 |+    a: list[int] | None = None,
273 273 |     b: Optional[Dict[int, int]] = {},
274 274 |     c: Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
275 275 |     d: typing_extensions.Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
276 276 | ):
    277 |+    if a is None:
    278 |+        a = []
277 279 |     pass
278 280 | 
279 281 | 

B006_B008.py:273:35: B006 [*] Do not use mutable data structures for argument defaults
    |
271 | def mutable_annotations(
272 |     a: list[int] | None = [],
273 |     b: Optional[Dict[int, int]] = {},
    |                                   ^^ B006
274 |     c: Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
275 |     d: typing_extensions.Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
    |
    = help: Replace with `None`; initialize within function

ℹ Possible fix
270 270 | 
271 271 | def mutable_annotations(
272 272 |     a: list[int] | None = [],
273     |-    b: Optional[Dict[int, int]] = {},
    273 |+    b: Optional[Dict[int, int]] = None,
274 274 |     c: Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
275 275 |     d: typing_extensions.Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
276 276 | ):
    277 |+    if b is None:
    278 |+        b = {}
277 279 |     pass
278 280 | 
279 281 | 

B006_B008.py:274:62: B006 [*] Do not use mutable data structures for argument defaults
    |
272 |     a: list[int] | None = [],
273 |     b: Optional[Dict[int, int]] = {},
274 |     c: Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
    |                                                              ^^^^^ B006
275 |     d: typing_extensions.Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
276 | ):
    |
    = help: Replace with `None`; initialize within function

ℹ Possible fix
271 271 | def mutable_annotations(
272 272 |     a: list[int] | None = [],
273 273 |     b: Optional[Dict[int, int]] = {},
274     |-    c: Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
    274 |+    c: Annotated[Union[Set[str], abc.Sized], "annotation"] = None,
275 275 |     d: typing_extensions.Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
276 276 | ):
    277 |+    if c is None:
    278 |+        c = set()
277 279 |     pass
278 280 | 
279 281 | 

B006_B008.py:275:80: B006 [*] Do not use mutable data structures for argument defaults
    |
273 |     b: Optional[Dict[int, int]] = {},
274 |     c: Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
275 |     d: typing_extensions.Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
    |                                                                                ^^^^^ B006
276 | ):
277 |     pass
    |
    = help: Replace with `None`; initialize within function

ℹ Possible fix
272 272 |     a: list[int] | None = [],
273 273 |     b: Optional[Dict[int, int]] = {},
274 274 |     c: Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
275     |-    d: typing_extensions.Annotated[Union[Set[str], abc.Sized], "annotation"] = set(),
    275 |+    d: typing_extensions.Annotated[Union[Set[str], abc.Sized], "annotation"] = None,
276 276 | ):
    277 |+    if d is None:
    278 |+        d = set()
277 279 |     pass
278 280 | 
279 281 | 

B006_B008.py:280:52: B006 [*] Do not use mutable data structures for argument defaults
    |
280 | def single_line_func_wrong(value: dict[str, str] = {}):
    |                                                    ^^ B006
281 |     """Docstring"""
    |
    = help: Replace with `None`; initialize within function

ℹ Possible fix
277 277 |     pass
278 278 | 
279 279 | 
280     |-def single_line_func_wrong(value: dict[str, str] = {}):
    280 |+def single_line_func_wrong(value: dict[str, str] = None):
281 281 |     """Docstring"""
    282 |+    if value is None:
    283 |+        value = {}
282 284 | 
283 285 | 
284 286 | def single_line_func_wrong(value: dict[str, str] = {}):

B006_B008.py:284:52: B006 [*] Do not use mutable data structures for argument defaults
    |
284 | def single_line_func_wrong(value: dict[str, str] = {}):
    |                                                    ^^ B006
285 |     """Docstring"""
286 |     ...
    |
    = help: Replace with `None`; initialize within function

ℹ Possible fix
281 281 |     """Docstring"""
282 282 | 
283 283 | 
284     |-def single_line_func_wrong(value: dict[str, str] = {}):
    284 |+def single_line_func_wrong(value: dict[str, str] = None):
285 285 |     """Docstring"""
    286 |+    if value is None:
    287 |+        value = {}
286 288 |     ...
287 289 | 
288 290 | 

B006_B008.py:289:52: B006 Do not use mutable data structures for argument defaults
    |
289 | def single_line_func_wrong(value: dict[str, str] = {}):
    |                                                    ^^ B006
290 |     """Docstring"""; ...
    |
    = help: Replace with `None`; initialize within function

B006_B008.py:293:52: B006 Do not use mutable data structures for argument defaults
    |
293 | def single_line_func_wrong(value: dict[str, str] = {}):
    |                                                    ^^ B006
294 |     """Docstring"""; \
295 |         ...
    |
    = help: Replace with `None`; initialize within function

B006_B008.py:298:52: B006 [*] Do not use mutable data structures for argument defaults
    |
298 |   def single_line_func_wrong(value: dict[str, str] = {
    |  ____________________________________________________^
299 | |     # This is a comment
300 | | }):
    | |_^ B006
301 |       """Docstring"""
    |
    = help: Replace with `None`; initialize within function

ℹ Possible fix
295 295 |         ...
296 296 | 
297 297 | 
298     |-def single_line_func_wrong(value: dict[str, str] = {
299     |-    # This is a comment
300     |-}):
    298 |+def single_line_func_wrong(value: dict[str, str] = None):
301 299 |     """Docstring"""
    300 |+    if value is None:
    301 |+        value = {}
302 302 | 
303 303 | 
304 304 | def single_line_func_wrong(value: dict[str, str] = {}) \

B006_B008.py:304:52: B006 Do not use mutable data structures for argument defaults
    |
304 | def single_line_func_wrong(value: dict[str, str] = {}) \
    |                                                    ^^ B006
305 |     : \
306 |     """Docstring"""
    |
    = help: Replace with `None`; initialize within function



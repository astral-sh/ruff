---
source: crates/ruff/src/rules/pyupgrade/mod.rs
expression: diagnostics
---
- kind:
    name: ConvertTypedDictFunctionalToClass
    body: "Convert `MyType` from `TypedDict` functional to class syntax"
    suggestion: "Convert `MyType` to class syntax"
    fixable: true
  location:
    row: 5
    column: 0
  end_location:
    row: 5
    column: 50
  fix:
    edits:
      - location:
          row: 5
          column: 0
        end_location:
          row: 5
          column: 50
        content: "class MyType(TypedDict):\n    a: int\n    b: str"
  parent: ~
- kind:
    name: ConvertTypedDictFunctionalToClass
    body: "Convert `MyType` from `TypedDict` functional to class syntax"
    suggestion: "Convert `MyType` to class syntax"
    fixable: true
  location:
    row: 8
    column: 0
  end_location:
    row: 8
    column: 48
  fix:
    edits:
      - location:
          row: 8
          column: 0
        end_location:
          row: 8
          column: 48
        content: "class MyType(TypedDict):\n    a: int\n    b: str"
  parent: ~
- kind:
    name: ConvertTypedDictFunctionalToClass
    body: "Convert `MyType` from `TypedDict` functional to class syntax"
    suggestion: "Convert `MyType` to class syntax"
    fixable: true
  location:
    row: 11
    column: 0
  end_location:
    row: 11
    column: 42
  fix:
    edits:
      - location:
          row: 11
          column: 0
        end_location:
          row: 11
          column: 42
        content: "class MyType(TypedDict):\n    a: int\n    b: str"
  parent: ~
- kind:
    name: ConvertTypedDictFunctionalToClass
    body: "Convert `MyType` from `TypedDict` functional to class syntax"
    suggestion: "Convert `MyType` to class syntax"
    fixable: true
  location:
    row: 14
    column: 0
  end_location:
    row: 14
    column: 28
  fix:
    edits:
      - location:
          row: 14
          column: 0
        end_location:
          row: 14
          column: 28
        content: "class MyType(TypedDict):\n    pass"
  parent: ~
- kind:
    name: ConvertTypedDictFunctionalToClass
    body: "Convert `MyType` from `TypedDict` functional to class syntax"
    suggestion: "Convert `MyType` to class syntax"
    fixable: true
  location:
    row: 17
    column: 0
  end_location:
    row: 17
    column: 44
  fix:
    edits:
      - location:
          row: 17
          column: 0
        end_location:
          row: 17
          column: 44
        content: "class MyType(TypedDict):\n    a: \"hello\""
  parent: ~
- kind:
    name: ConvertTypedDictFunctionalToClass
    body: "Convert `MyType` from `TypedDict` functional to class syntax"
    suggestion: "Convert `MyType` to class syntax"
    fixable: true
  location:
    row: 18
    column: 0
  end_location:
    row: 18
    column: 39
  fix:
    edits:
      - location:
          row: 18
          column: 0
        end_location:
          row: 18
          column: 39
        content: "class MyType(TypedDict):\n    a: \"hello\""
  parent: ~
- kind:
    name: ConvertTypedDictFunctionalToClass
    body: "Convert `MyType` from `TypedDict` functional to class syntax"
    suggestion: "Convert `MyType` to class syntax"
    fixable: true
  location:
    row: 21
    column: 0
  end_location:
    row: 21
    column: 54
  fix:
    edits:
      - location:
          row: 21
          column: 0
        end_location:
          row: 21
          column: 54
        content: "class MyType(TypedDict):\n    a: NotRequired[dict]"
  parent: ~
- kind:
    name: ConvertTypedDictFunctionalToClass
    body: "Convert `MyType` from `TypedDict` functional to class syntax"
    suggestion: "Convert `MyType` to class syntax"
    fixable: true
  location:
    row: 24
    column: 0
  end_location:
    row: 24
    column: 63
  fix:
    edits:
      - location:
          row: 24
          column: 0
        end_location:
          row: 24
          column: 63
        content: "class MyType(TypedDict, total=False):\n    x: int\n    y: int"
  parent: ~
- kind:
    name: ConvertTypedDictFunctionalToClass
    body: "Convert `MyType` from `TypedDict` functional to class syntax"
    suggestion: "Convert `MyType` to class syntax"
    fixable: true
  location:
    row: 27
    column: 0
  end_location:
    row: 27
    column: 55
  fix:
    edits:
      - location:
          row: 27
          column: 0
        end_location:
          row: 27
          column: 55
        content: "class MyType(TypedDict):\n    key: Literal[\"value\"]"
  parent: ~
- kind:
    name: ConvertTypedDictFunctionalToClass
    body: "Convert `MyType` from `TypedDict` functional to class syntax"
    suggestion: "Convert `MyType` to class syntax"
    fixable: true
  location:
    row: 30
    column: 0
  end_location:
    row: 30
    column: 49
  fix:
    edits:
      - location:
          row: 30
          column: 0
        end_location:
          row: 30
          column: 49
        content: "class MyType(typing.TypedDict):\n    key: int"
  parent: ~
- kind:
    name: ConvertTypedDictFunctionalToClass
    body: "Convert `MyType` from `TypedDict` functional to class syntax"
    suggestion: "Convert `MyType` to class syntax"
    fixable: true
  location:
    row: 40
    column: 0
  end_location:
    row: 40
    column: 32
  fix:
    edits:
      - location:
          row: 40
          column: 0
        end_location:
          row: 40
          column: 32
        content: "class MyType(TypedDict):\n    pass"
  parent: ~
- kind:
    name: ConvertTypedDictFunctionalToClass
    body: "Convert `MyType` from `TypedDict` functional to class syntax"
    suggestion: "Convert `MyType` to class syntax"
    fixable: true
  location:
    row: 43
    column: 0
  end_location:
    row: 43
    column: 36
  fix:
    edits:
      - location:
          row: 43
          column: 0
        end_location:
          row: 43
          column: 36
        content: "class MyType(TypedDict):\n    pass"
  parent: ~


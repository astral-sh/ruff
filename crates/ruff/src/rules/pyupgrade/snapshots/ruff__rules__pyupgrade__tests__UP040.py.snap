---
source: crates/ruff/src/rules/pyupgrade/mod.rs
---
UP040.py:5:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
  |
4 | # UP040
5 | x: typing.TypeAlias = int
  | ^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
6 | x: TypeAlias = int
  |
  = help: Use the `type` keyword

ℹ Fix
2 2 | from typing import TypeAlias
3 3 | 
4 4 | # UP040
5   |-x: typing.TypeAlias = int
  5 |+type x = int
6 6 | x: TypeAlias = int
7 7 | 
8 8 | # UP040 simple generic

UP040.py:6:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
  |
4 | # UP040
5 | x: typing.TypeAlias = int
6 | x: TypeAlias = int
  | ^^^^^^^^^^^^^^^^^^ UP040
7 | 
8 | # UP040 simple generic
  |
  = help: Use the `type` keyword

ℹ Fix
3 3 | 
4 4 | # UP040
5 5 | x: typing.TypeAlias = int
6   |-x: TypeAlias = int
  6 |+type x = int
7 7 | 
8 8 | # UP040 simple generic
9 9 | T = typing.TypeVar["T"]

UP040.py:10:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
 8 | # UP040 simple generic
 9 | T = typing.TypeVar["T"]
10 | x: typing.TypeAlias = list[T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
11 | 
12 | # UP040 call style generic
   |
   = help: Use the `type` keyword

ℹ Fix
7  7  | 
8  8  | # UP040 simple generic
9  9  | T = typing.TypeVar["T"]
10    |-x: typing.TypeAlias = list[T]
   10 |+type x[T] = list[T]
11 11 | 
12 12 | # UP040 call style generic
13 13 | T = typing.TypeVar("T")

UP040.py:14:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
12 | # UP040 call style generic
13 | T = typing.TypeVar("T")
14 | x: typing.TypeAlias = list[T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
15 | 
16 | # UP040 bounded generic (todo)
   |
   = help: Use the `type` keyword

ℹ Fix
11 11 | 
12 12 | # UP040 call style generic
13 13 | T = typing.TypeVar("T")
14    |-x: typing.TypeAlias = list[T]
   14 |+type x[T] = list[T]
15 15 | 
16 16 | # UP040 bounded generic (todo)
17 17 | T = typing.TypeVar("T", bound=int)

UP040.py:18:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
16 | # UP040 bounded generic (todo)
17 | T = typing.TypeVar("T", bound=int)
18 | x: typing.TypeAlias = list[T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
19 | 
20 | T = typing.TypeVar("T", int, str)
   |
   = help: Use the `type` keyword

ℹ Fix
15 15 | 
16 16 | # UP040 bounded generic (todo)
17 17 | T = typing.TypeVar("T", bound=int)
18    |-x: typing.TypeAlias = list[T]
   18 |+type x = list[T]
19 19 | 
20 20 | T = typing.TypeVar("T", int, str)
21 21 | x: typing.TypeAlias = list[T]

UP040.py:21:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
20 | T = typing.TypeVar("T", int, str)
21 | x: typing.TypeAlias = list[T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
22 | 
23 | # UP040 contravariant generic (todo)
   |
   = help: Use the `type` keyword

ℹ Fix
18 18 | x: typing.TypeAlias = list[T]
19 19 | 
20 20 | T = typing.TypeVar("T", int, str)
21    |-x: typing.TypeAlias = list[T]
   21 |+type x = list[T]
22 22 | 
23 23 | # UP040 contravariant generic (todo)
24 24 | T = typing.TypeVar("T", contravariant=True)

UP040.py:25:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
23 | # UP040 contravariant generic (todo)
24 | T = typing.TypeVar("T", contravariant=True)
25 | x: typing.TypeAlias = list[T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
26 | 
27 | # UP040 covariant generic (todo)
   |
   = help: Use the `type` keyword

ℹ Fix
22 22 | 
23 23 | # UP040 contravariant generic (todo)
24 24 | T = typing.TypeVar("T", contravariant=True)
25    |-x: typing.TypeAlias = list[T]
   25 |+type x = list[T]
26 26 | 
27 27 | # UP040 covariant generic (todo)
28 28 | T = typing.TypeVar("T", covariant=True)

UP040.py:29:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
27 | # UP040 covariant generic (todo)
28 | T = typing.TypeVar("T", covariant=True)
29 | x: typing.TypeAlias = list[T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
30 | 
31 | # UP040 in class scope
   |
   = help: Use the `type` keyword

ℹ Fix
26 26 | 
27 27 | # UP040 covariant generic (todo)
28 28 | T = typing.TypeVar("T", covariant=True)
29    |-x: typing.TypeAlias = list[T]
   29 |+type x = list[T]
30 30 | 
31 31 | # UP040 in class scope
32 32 | T = typing.TypeVar["T"]

UP040.py:35:5: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
33 | class Foo:
34 |     # reference to global variable
35 |     x: typing.TypeAlias = list[T]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
36 | 
37 |     # reference to class variable
   |
   = help: Use the `type` keyword

ℹ Fix
32 32 | T = typing.TypeVar["T"]
33 33 | class Foo:
34 34 |     # reference to global variable
35    |-    x: typing.TypeAlias = list[T]
   35 |+    type x[T] = list[T]
36 36 | 
37 37 |     # reference to class variable
38 38 |     TCLS = typing.TypeVar["TCLS"]

UP040.py:39:5: UP040 [*] Type alias `y` uses `TypeAlias` annotation instead of the `type` keyword
   |
37 |     # reference to class variable
38 |     TCLS = typing.TypeVar["TCLS"]
39 |     y: typing.TypeAlias = list[TCLS]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
40 | 
41 | # UP040 wont add generics in fix
   |
   = help: Use the `type` keyword

ℹ Fix
36 36 | 
37 37 |     # reference to class variable
38 38 |     TCLS = typing.TypeVar["TCLS"]
39    |-    y: typing.TypeAlias = list[TCLS]
   39 |+    type y[TCLS] = list[TCLS]
40 40 | 
41 41 | # UP040 wont add generics in fix
42 42 | T = typing.TypeVar(*args)

UP040.py:43:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
41 | # UP040 wont add generics in fix
42 | T = typing.TypeVar(*args)
43 | x: typing.TypeAlias = list[T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
44 | 
45 | # OK
   |
   = help: Use the `type` keyword

ℹ Fix
40 40 | 
41 41 | # UP040 wont add generics in fix
42 42 | T = typing.TypeVar(*args)
43    |-x: typing.TypeAlias = list[T]
   43 |+type x = list[T]
44 44 | 
45 45 | # OK
46 46 | x: TypeAlias



---
source: crates/ty_test/src/lib.rs
expression: snapshot
---
---
mdtest name: super.md - Super - Basic Usage - Implicit Super Object
mdtest path: crates/ty_python_semantic/resources/mdtest/class/super.md
---

# Python source files

## mdtest_snippet.py

```
  1 | from __future__ import annotations
  2 | 
  3 | class A:
  4 |     def __init__(self, a: int): ...
  5 |     @classmethod
  6 |     def f(cls): ...
  7 | 
  8 | class B(A):
  9 |     def __init__(self, a: int):
 10 |         # TODO: Once `Self` is supported, this should be `<super: <class 'B'>, B>`
 11 |         reveal_type(super())  # revealed: <super: <class 'B'>, Unknown>
 12 |         reveal_type(super(object, super()))  # revealed: <super: <class 'object'>, super>
 13 |         super().__init__(a)
 14 | 
 15 |     @classmethod
 16 |     def f(cls):
 17 |         # TODO: Once `Self` is supported, this should be `<super: <class 'B'>, <class 'B'>>`
 18 |         reveal_type(super())  # revealed: <super: <class 'B'>, Unknown>
 19 |         super().f()
 20 | 
 21 | super(B, B(42)).__init__(42)
 22 | super(B, B).f()
 23 | import enum
 24 | from typing import Any, Self, Never, Protocol, Callable
 25 | from ty_extensions import Intersection
 26 | 
 27 | class BuilderMeta(type):
 28 |     def __new__(
 29 |         cls: type[Any],
 30 |         name: str,
 31 |         bases: tuple[type, ...],
 32 |         dct: dict[str, Any],
 33 |     ) -> BuilderMeta:
 34 |         # revealed: <super: <class 'BuilderMeta'>, Any>
 35 |         s = reveal_type(super())
 36 |         # revealed: Any
 37 |         return reveal_type(s.__new__(cls, name, bases, dct))
 38 | 
 39 | class BuilderMeta2(type):
 40 |     def __new__(
 41 |         cls: type[BuilderMeta2],
 42 |         name: str,
 43 |         bases: tuple[type, ...],
 44 |         dct: dict[str, Any],
 45 |     ) -> BuilderMeta2:
 46 |         # revealed: <super: <class 'BuilderMeta2'>, <class 'BuilderMeta2'>>
 47 |         s = reveal_type(super())
 48 |         # TODO: should be `BuilderMeta2` (needs https://github.com/astral-sh/ty/issues/501)
 49 |         # revealed:  Unknown
 50 |         return reveal_type(s.__new__(cls, name, bases, dct))
 51 | 
 52 | class Foo[T]:
 53 |     x: T
 54 | 
 55 |     def method(self: Any):
 56 |         reveal_type(super())  # revealed: <super: <class 'Foo'>, Any>
 57 | 
 58 |         if isinstance(self, Foo):
 59 |             reveal_type(super())  # revealed: <super: <class 'Foo'>, Any>
 60 | 
 61 |     def method2(self: Foo[T]):
 62 |         # revealed: <super: <class 'Foo'>, Foo[T@Foo]>
 63 |         reveal_type(super())
 64 | 
 65 |     def method3(self: Foo):
 66 |         # revealed: <super: <class 'Foo'>, Foo[Unknown]>
 67 |         reveal_type(super())
 68 | 
 69 |     def method4(self: Self):
 70 |         # revealed: <super: <class 'Foo'>, Foo[T@Foo]>
 71 |         reveal_type(super())
 72 | 
 73 |     def method5[S: Foo[int]](self: S, other: S) -> S:
 74 |         # revealed: <super: <class 'Foo'>, Foo[int]>
 75 |         reveal_type(super())
 76 |         return self
 77 | 
 78 |     def method6[S: (Foo[int], Foo[str])](self: S, other: S) -> S:
 79 |         # revealed: <super: <class 'Foo'>, Foo[int]> | <super: <class 'Foo'>, Foo[str]>
 80 |         reveal_type(super())
 81 |         return self
 82 | 
 83 |     def method7[S](self: S, other: S) -> S:
 84 |         # error: [invalid-super-argument]
 85 |         # revealed: Unknown
 86 |         reveal_type(super())
 87 |         return self
 88 | 
 89 |     def method8[S: int](self: S, other: S) -> S:
 90 |         # error: [invalid-super-argument]
 91 |         # revealed: Unknown
 92 |         reveal_type(super())
 93 |         return self
 94 | 
 95 |     def method9[S: (int, str)](self: S, other: S) -> S:
 96 |         # error: [invalid-super-argument]
 97 |         # revealed: Unknown
 98 |         reveal_type(super())
 99 |         return self
100 | 
101 |     def method10[S: Callable[..., str]](self: S, other: S) -> S:
102 |         # error: [invalid-super-argument]
103 |         # revealed: Unknown
104 |         reveal_type(super())
105 |         return self
106 | 
107 | type Alias = Bar
108 | 
109 | class Bar:
110 |     def method(self: Alias):
111 |         # revealed: <super: <class 'Bar'>, Bar>
112 |         reveal_type(super())
113 | 
114 |     def pls_dont_call_me(self: Never):
115 |         # revealed: <super: <class 'Bar'>, Unknown>
116 |         reveal_type(super())
117 | 
118 |     def only_call_me_on_callable_subclasses(self: Intersection[Bar, Callable[..., object]]):
119 |         # revealed: <super: <class 'Bar'>, Bar>
120 |         reveal_type(super())
121 | 
122 | class P(Protocol):
123 |     def method(self: P):
124 |         # revealed: <super: <class 'P'>, P>
125 |         reveal_type(super())
126 | 
127 | class E(enum.Enum):
128 |     X = 1
129 | 
130 |     def method(self: E):
131 |         match self:
132 |             case E.X:
133 |                 # revealed: <super: <class 'E'>, E>
134 |                 reveal_type(super())
```

# Diagnostics

```
error[invalid-super-argument]: `S@method7` is not an instance or subclass of `<class 'Foo'>` in `super(<class 'Foo'>, S@method7)` call
  --> src/mdtest_snippet.py:86:21
   |
84 |         # error: [invalid-super-argument]
85 |         # revealed: Unknown
86 |         reveal_type(super())
   |                     ^^^^^^^
87 |         return self
   |
info: Type variable `S` has `object` as its implicit upper bound
info: `object` is not an instance or subclass of `<class 'Foo'>`
info: rule `invalid-super-argument` is enabled by default

```

```
error[invalid-super-argument]: `S@method8` is not an instance or subclass of `<class 'Foo'>` in `super(<class 'Foo'>, S@method8)` call
  --> src/mdtest_snippet.py:92:21
   |
90 |         # error: [invalid-super-argument]
91 |         # revealed: Unknown
92 |         reveal_type(super())
   |                     ^^^^^^^
93 |         return self
   |
info: Type variable `S` has upper bound `int`
info: `int` is not an instance or subclass of `<class 'Foo'>`
info: rule `invalid-super-argument` is enabled by default

```

```
error[invalid-super-argument]: `S@method9` is not an instance or subclass of `<class 'Foo'>` in `super(<class 'Foo'>, S@method9)` call
  --> src/mdtest_snippet.py:98:21
   |
96 |         # error: [invalid-super-argument]
97 |         # revealed: Unknown
98 |         reveal_type(super())
   |                     ^^^^^^^
99 |         return self
   |
info: Type variable `S` has constraints `int, str`
info: `int | str` is not an instance or subclass of `<class 'Foo'>`
info: rule `invalid-super-argument` is enabled by default

```

```
error[invalid-super-argument]: `S@method10` is a type variable with an abstract/structural type as its bounds or constraints, in `super(<class 'Foo'>, S@method10)` call
   --> src/mdtest_snippet.py:104:21
    |
102 |         # error: [invalid-super-argument]
103 |         # revealed: Unknown
104 |         reveal_type(super())
    |                     ^^^^^^^
105 |         return self
    |
info: Type variable `S` has upper bound `(...) -> str`
info: rule `invalid-super-argument` is enabled by default

```

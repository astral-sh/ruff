---
source: crates/ty_test/src/lib.rs
expression: snapshot
---
---
mdtest name: attributes.md - Attributes - "Did you mean?" suggestions
mdtest path: crates/ty_python_semantic/resources/mdtest/attributes.md
---

# Python source files

## mdtest_snippet.py

```
 1 | import collections
 2 | 
 3 | print(collections.dequee)  # error: [unresolved-attribute]
 4 | class Foo:
 5 |     _bar = 42
 6 | 
 7 | print(Foo.bar)  # error: [unresolved-attribute]
 8 | print(Foo._barr)  # error: [unresolved-attribute]
 9 | class Bar:
10 |     _attribute = 42
11 | 
12 |     def f(self, x: "Bar"):
13 |         # TODO: we should emit `[unresolved-attribute]` here, should have the same behaviour as `x.attribute` below
14 |         print(self.attribute)
15 | 
16 |         # We give a suggestion here, even though the only good candidates start with underscores and the typo does not,
17 |         # because we're in a method context and `x` is an instance of the enclosing class.
18 |         print(x.attribute)  # error: [unresolved-attribute]
19 | 
20 | class Baz:
21 |     def f(self, x: Bar):
22 |         # No suggestion is given here, because:
23 |         # - the good suggestions all start with underscores
24 |         # - the typo does not start with an underscore
25 |         # - We *are* in a method context, but `x` is not an instance of the enclosing class
26 |         print(x.attribute)  # error: [unresolved-attribute]
```

# Diagnostics

```
error[unresolved-attribute]: Type `<module 'collections'>` has no attribute `dequee`
 --> src/mdtest_snippet.py:3:7
  |
1 | import collections
2 |
3 | print(collections.dequee)  # error: [unresolved-attribute]
  |       ^^^^^^^^^^^^^^^^^^ Did you mean `deque`?
4 | class Foo:
5 |     _bar = 42
  |
info: rule `unresolved-attribute` is enabled by default

```

```
error[unresolved-attribute]: Type `<class 'Foo'>` has no attribute `bar`
 --> src/mdtest_snippet.py:7:7
  |
5 |     _bar = 42
6 |
7 | print(Foo.bar)  # error: [unresolved-attribute]
  |       ^^^^^^^
8 | print(Foo._barr)  # error: [unresolved-attribute]
9 | class Bar:
  |
info: rule `unresolved-attribute` is enabled by default

```

```
error[unresolved-attribute]: Type `<class 'Foo'>` has no attribute `_barr`
  --> src/mdtest_snippet.py:8:7
   |
 7 | print(Foo.bar)  # error: [unresolved-attribute]
 8 | print(Foo._barr)  # error: [unresolved-attribute]
   |       ^^^^^^^^^ Did you mean `_bar`?
 9 | class Bar:
10 |     _attribute = 42
   |
info: rule `unresolved-attribute` is enabled by default

```

```
error[unresolved-attribute]: Type `Bar` has no attribute `attribute`
  --> src/mdtest_snippet.py:18:15
   |
16 |         # We give a suggestion here, even though the only good candidates start with underscores and the typo does not,
17 |         # because we're in a method context and `x` is an instance of the enclosing class.
18 |         print(x.attribute)  # error: [unresolved-attribute]
   |               ^^^^^^^^^^^ Did you mean `_attribute`?
19 |
20 | class Baz:
   |
info: rule `unresolved-attribute` is enabled by default

```

```
error[unresolved-attribute]: Type `Bar` has no attribute `attribute`
  --> src/mdtest_snippet.py:26:15
   |
24 |         # - the typo does not start with an underscore
25 |         # - We *are* in a method context, but `x` is not an instance of the enclosing class
26 |         print(x.attribute)  # error: [unresolved-attribute]
   |               ^^^^^^^^^^^
   |
info: rule `unresolved-attribute` is enabled by default

```

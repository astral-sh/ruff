---
source: crates/ty_test/src/lib.rs
expression: snapshot
---
---
mdtest name: slots.md - `__slots__` - Built-ins with implicit layouts
mdtest path: crates/ty_python_semantic/resources/mdtest/slots.md
---

# Python source files

## mdtest_snippet.py

```
 1 | # fmt: off
 2 | 
 3 | class A(  # error: [instance-layout-conflict]
 4 |     int,
 5 |     str
 6 | ): ...
 7 | 
 8 | class B:
 9 |     __slots__ = ("b",)
10 | 
11 | class C(  # error: [instance-layout-conflict]
12 |     int,
13 |     B,
14 | ): ...
15 | class D(int): ...
16 | 
17 | class E(  # error: [instance-layout-conflict]
18 |     D,
19 |     str
20 | ): ...
21 | 
22 | # fmt: on
23 | class Foo(range, str): ...  # error: [subclass-of-final-class]
```

# Diagnostics

```
error[instance-layout-conflict]: Class will raise `TypeError` at runtime due to its bases
 --> src/mdtest_snippet.py:3:7
  |
1 |   # fmt: off
2 |
3 |   class A(  # error: [instance-layout-conflict]
  |  _______^
4 | |     int,
5 | |     str
6 | | ): ...
  | |_^ Bases `int`, `str` cannot be combined in multiple inheritance
7 |
8 |   class B:
  |
info: Two "solid bases" cannot coexist in a class's MRO unless one inherits from the other
 --> src/mdtest_snippet.py:4:5
  |
3 | class A(  # error: [instance-layout-conflict]
4 |     int,
  |     --- `int` is a solid base because of the way it is implemented in a C extension
5 |     str
  |     --- `str` is a solid base because of the way it is implemented in a C extension
6 | ): ...
  |
info: rule `instance-layout-conflict` is enabled by default

```

```
error[instance-layout-conflict]: Class will raise `TypeError` at runtime due to its bases
  --> src/mdtest_snippet.py:11:7
   |
 9 |       __slots__ = ("b",)
10 |
11 |   class C(  # error: [instance-layout-conflict]
   |  _______^
12 | |     int,
13 | |     B,
14 | | ): ...
   | |_^ Bases `int`, `B` cannot be combined in multiple inheritance
15 |   class D(int): ...
   |
info: Two "solid bases" cannot coexist in a class's MRO unless one inherits from the other
  --> src/mdtest_snippet.py:12:5
   |
11 | class C(  # error: [instance-layout-conflict]
12 |     int,
   |     --- `int` is a solid base because of the way it is implemented in a C extension
13 |     B,
   |     - `B` is a solid base because it defines non-empty `__slots__`
14 | ): ...
15 | class D(int): ...
   |
info: rule `instance-layout-conflict` is enabled by default

```

```
error[instance-layout-conflict]: Class will raise `TypeError` at runtime due to its bases
  --> src/mdtest_snippet.py:17:7
   |
15 |   class D(int): ...
16 |
17 |   class E(  # error: [instance-layout-conflict]
   |  _______^
18 | |     D,
19 | |     str
20 | | ): ...
   | |_^ Bases `D`, `str` cannot be combined in multiple inheritance
21 |
22 |   # fmt: on
   |
info: Two "solid bases" cannot coexist in a class's MRO unless one inherits from the other
  --> src/mdtest_snippet.py:18:5
   |
17 | class E(  # error: [instance-layout-conflict]
18 |     D,
   |     - D inherits from solid base `int`
19 |     str
   |     --- `str` is a solid base because of the way it is implemented in a C extension
20 | ): ...
   |
info: `int` (superclass of `D`) is a solid base because of the way it is implemented in a C extension
info: rule `instance-layout-conflict` is enabled by default

```

```
error[subclass-of-final-class]: Class `Foo` cannot inherit from final class `range`
  --> src/mdtest_snippet.py:23:11
   |
22 | # fmt: on
23 | class Foo(range, str): ...  # error: [subclass-of-final-class]
   |           ^^^^^
   |
info: rule `subclass-of-final-class` is enabled by default

```

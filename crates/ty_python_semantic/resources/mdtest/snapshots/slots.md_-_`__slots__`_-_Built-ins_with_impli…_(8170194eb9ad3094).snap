---
source: crates/ty_test/src/lib.rs
expression: snapshot
---
---
mdtest name: slots.md - `__slots__` - Built-ins with implicit layouts
mdtest path: crates/ty_python_semantic/resources/mdtest/slots.md
---

# Python source files

## mdtest_snippet.py

```
 1 | class A(  # error: [instance-layout-conflict]
 2 |     int,
 3 |     str
 4 | ): ...
 5 | 
 6 | class B:
 7 |     __slots__ = "b",
 8 | 
 9 | class C(  # error: [instance-layout-conflict]
10 |     int,
11 |     B,
12 | ): ...
13 | 
14 | class D(int): ...
15 | 
16 | class E(  # error: [instance-layout-conflict]
17 |     D,
18 |     str
19 | ): ...
```

# Diagnostics

```
error[instance-layout-conflict]: Class will raise `TypeError` at runtime due to its bases
 --> src/mdtest_snippet.py:1:7
  |
1 |   class A(  # error: [instance-layout-conflict]
  |  _______^
2 | |     int,
3 | |     str
4 | | ): ...
  | |_^ Bases `int`, `str` cannot be combined in multiple inheritance
5 |
6 |   class B:
  |
info: Two "solid bases" cannot coexist in a class's MRO unless one inherits from the other
 --> src/mdtest_snippet.py:2:5
  |
1 | class A(  # error: [instance-layout-conflict]
2 |     int,
  |     --- `int` is a solid base because of the way it is implemented in a C extension
3 |     str
  |     --- `str` is a solid base because of the way it is implemented in a C extension
4 | ): ...
  |
info: rule `instance-layout-conflict` is enabled by default

```

```
error[instance-layout-conflict]: Class will raise `TypeError` at runtime due to its bases
  --> src/mdtest_snippet.py:9:7
   |
 7 |       __slots__ = "b",
 8 |
 9 |   class C(  # error: [instance-layout-conflict]
   |  _______^
10 | |     int,
11 | |     B,
12 | | ): ...
   | |_^ Bases `int`, `B` cannot be combined in multiple inheritance
13 |
14 |   class D(int): ...
   |
info: Two "solid bases" cannot coexist in a class's MRO unless one inherits from the other
  --> src/mdtest_snippet.py:10:5
   |
 9 | class C(  # error: [instance-layout-conflict]
10 |     int,
   |     --- `int` is a solid base because of the way it is implemented in a C extension
11 |     B,
   |     - `B` is a solid base because it defines non-empty `__slots__`
12 | ): ...
   |
info: rule `instance-layout-conflict` is enabled by default

```

```
error[instance-layout-conflict]: Class will raise `TypeError` at runtime due to its bases
  --> src/mdtest_snippet.py:16:7
   |
14 |   class D(int): ...
15 |
16 |   class E(  # error: [instance-layout-conflict]
   |  _______^
17 | |     D,
18 | |     str
19 | | ): ...
   | |_^ Bases `D`, `str` cannot be combined in multiple inheritance
   |
info: Two "solid bases" cannot coexist in a class's MRO unless one inherits from the other
  --> src/mdtest_snippet.py:17:5
   |
16 | class E(  # error: [instance-layout-conflict]
17 |     D,
   |     - D inherits from solid base `int`
18 |     str
   |     --- `str` is a solid base because of the way it is implemented in a C extension
19 | ): ...
   |
info: `int` (superclass of `D`) is a solid base because of the way it is implemented in a C extension
info: rule `instance-layout-conflict` is enabled by default

```

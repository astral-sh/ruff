---
source: crates/ty_test/src/lib.rs
expression: snapshot
---
---
mdtest name: sync.md - With statements - Accidental use of non-async `with`
mdtest path: crates/ty_python_semantic/resources/mdtest/with/sync.md
---

# Python source files

## mdtest_snippet.py

```
1 | class Manager:
2 |     async def __aenter__(self): ...
3 |     async def __aexit__(self, *args): ...
4 | 
5 | # error: [invalid-context-manager] "Object of type `Manager` cannot be used with `with` because it does not implement `__enter__` and `__exit__`"
6 | with Manager():
7 |     ...
```

# Diagnostics

```
error[invalid-context-manager]: Object of type `Manager` cannot be used with `with` because it does not implement `__enter__` and `__exit__`
 --> src/mdtest_snippet.py:6:6
  |
5 | # error: [invalid-context-manager] "Object of type `Manager` cannot be used with `with` because it does not implement `__enter__` and `â€¦
6 | with Manager():
  |      ^^^^^^^^^
7 |     ...
  |
info: Objects of type `Manager` can be used as async context managers
info: Consider using `async with` here
info: rule `invalid-context-manager` is enabled by default

```

---
source: crates/ty_test/src/lib.rs
expression: snapshot
---
---
mdtest name: for.md - For loops - Bad `__getitem__` method
mdtest path: crates/ty_python_semantic/resources/mdtest/loops/for.md
---

# Python source files

## mdtest_snippet.py

```
1 | class Iterable:
2 |     # invalid because it will implicitly be passed an `int`
3 |     # by the interpreter
4 |     def __getitem__(self, key: str) -> int:
5 |         return 42
6 | 
7 | # error: [not-iterable]
8 | for x in Iterable():
9 |     reveal_type(x)  # revealed: int
```

# Diagnostics

```
error[not-iterable]: Object of type `Iterable` is not iterable
 --> src/mdtest_snippet.py:8:10
  |
7 | # error: [not-iterable]
8 | for x in Iterable():
  |          ^^^^^^^^^^
9 |     reveal_type(x)  # revealed: int
  |
info: It has no `__iter__` method and its `__getitem__` method has an incorrect signature for the old-style iteration protocol
info: `__getitem__` must be at least as permissive as `def __getitem__(self, key: int): ...` to satisfy the old-style iteration protocol
info: rule `not-iterable` is enabled by default

```

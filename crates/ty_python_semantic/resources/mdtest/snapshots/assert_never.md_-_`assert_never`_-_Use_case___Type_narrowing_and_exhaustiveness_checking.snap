---
source: crates/ty_test/src/lib.rs
expression: snapshot
---
---
mdtest name: assert_never.md - `assert_never` - Use case: Type narrowing and exhaustiveness checking
mdtest path: crates/ty_python_semantic/resources/mdtest/directives/assert_never.md
---

# Python source files

## mdtest_snippet.py

```
 1 | from typing_extensions import assert_never, Literal
 2 | 
 3 | class A: ...
 4 | class B: ...
 5 | class C: ...
 6 | 
 7 | def if_else_isinstance_success(obj: A | B):
 8 |     if isinstance(obj, A):
 9 |         pass
10 |     elif isinstance(obj, B):
11 |         pass
12 |     elif isinstance(obj, C):
13 |         pass
14 |     else:
15 |         assert_never(obj)
16 | 
17 | def if_else_isinstance_error(obj: A | B):
18 |     if isinstance(obj, A):
19 |         pass
20 |     # B is missing
21 |     elif isinstance(obj, C):
22 |         pass
23 |     else:
24 |         # error: [type-assertion-failure] "Argument does not have expected type `Never`"
25 |         assert_never(obj)
26 | 
27 | def if_else_singletons_success(obj: Literal[1, "a"] | None):
28 |     if obj == 1:
29 |         pass
30 |     elif obj == "a":
31 |         pass
32 |     elif obj is None:
33 |         pass
34 |     else:
35 |         assert_never(obj)
36 | 
37 | def if_else_singletons_error(obj: Literal[1, "a"] | None):
38 |     if obj == 1:
39 |         pass
40 |     elif obj is "A":  # "A" instead of "a"
41 |         pass
42 |     elif obj is None:
43 |         pass
44 |     else:
45 |         # error: [type-assertion-failure] "Argument does not have expected type `Never`"
46 |         assert_never(obj)
47 | 
48 | def match_singletons_success(obj: Literal[1, "a"] | None):
49 |     match obj:
50 |         case 1:
51 |             pass
52 |         case "a":
53 |             pass
54 |         case None:
55 |             pass
56 |         case _ as obj:
57 |             # TODO: Ideally, we would not emit an error here
58 |             # error: [type-assertion-failure] "Argument does not have expected type `Never`"
59 |             assert_never(obj)
60 | 
61 | def match_singletons_error(obj: Literal[1, "a"] | None):
62 |     match obj:
63 |         case 1:
64 |             pass
65 |         case "A":  # "A" instead of "a"
66 |             pass
67 |         case None:
68 |             pass
69 |         case _ as obj:
70 |             # TODO: We should emit an error here, but the message should
71 |             # show the type `Literal["a"]` instead of `@Todo(…)`.
72 |             # error: [type-assertion-failure] "Argument does not have expected type `Never`"
73 |             assert_never(obj)
```

# Diagnostics

```
error[type-assertion-failure]: Argument does not have expected type `Never`
  --> src/mdtest_snippet.py:25:9
   |
23 |     else:
24 |         # error: [type-assertion-failure] "Argument does not have expected type `Never`"
25 |         assert_never(obj)
   |         ^^^^^^^^^^^^^^^^^
26 |
27 | def if_else_singletons_success(obj: Literal[1, "a"] | None):
   |
info: `B & ~A & ~C` is not an equivalent type to `Never`
  --> src/mdtest_snippet.py:25:22
   |
23 |     else:
24 |         # error: [type-assertion-failure] "Argument does not have expected type `Never`"
25 |         assert_never(obj)
   |                      ^^^ Inferred type of argument is `B & ~A & ~C`
26 |
27 | def if_else_singletons_success(obj: Literal[1, "a"] | None):
   |
info: rule `type-assertion-failure` is enabled by default

```

```
error[type-assertion-failure]: Argument does not have expected type `Never`
  --> src/mdtest_snippet.py:46:9
   |
44 |     else:
45 |         # error: [type-assertion-failure] "Argument does not have expected type `Never`"
46 |         assert_never(obj)
   |         ^^^^^^^^^^^^^^^^^
47 |
48 | def match_singletons_success(obj: Literal[1, "a"] | None):
   |
info: `Literal["a"]` is not an equivalent type to `Never`
  --> src/mdtest_snippet.py:46:22
   |
44 |     else:
45 |         # error: [type-assertion-failure] "Argument does not have expected type `Never`"
46 |         assert_never(obj)
   |                      ^^^ Inferred type of argument is `Literal["a"]`
47 |
48 | def match_singletons_success(obj: Literal[1, "a"] | None):
   |
info: rule `type-assertion-failure` is enabled by default

```

```
error[type-assertion-failure]: Argument does not have expected type `Never`
  --> src/mdtest_snippet.py:59:13
   |
57 |             # TODO: Ideally, we would not emit an error here
58 |             # error: [type-assertion-failure] "Argument does not have expected type `Never`"
59 |             assert_never(obj)
   |             ^^^^^^^^^^^^^^^^^
60 |
61 | def match_singletons_error(obj: Literal[1, "a"] | None):
   |
info: `@Todo(`match` pattern definition types)` is not an equivalent type to `Never`
  --> src/mdtest_snippet.py:59:26
   |
57 |             # TODO: Ideally, we would not emit an error here
58 |             # error: [type-assertion-failure] "Argument does not have expected type `Never`"
59 |             assert_never(obj)
   |                          ^^^ Inferred type of argument is `@Todo(`match` pattern definition types)`
60 |
61 | def match_singletons_error(obj: Literal[1, "a"] | None):
   |
info: rule `type-assertion-failure` is enabled by default

```

```
error[type-assertion-failure]: Argument does not have expected type `Never`
  --> src/mdtest_snippet.py:73:13
   |
71 |             # show the type `Literal["a"]` instead of `@Todo(…)`.
72 |             # error: [type-assertion-failure] "Argument does not have expected type `Never`"
73 |             assert_never(obj)
   |             ^^^^^^^^^^^^^^^^^
   |
info: `@Todo(`match` pattern definition types)` is not an equivalent type to `Never`
  --> src/mdtest_snippet.py:73:26
   |
71 |             # show the type `Literal["a"]` instead of `@Todo(…)`.
72 |             # error: [type-assertion-failure] "Argument does not have expected type `Never`"
73 |             assert_never(obj)
   |                          ^^^ Inferred type of argument is `@Todo(`match` pattern definition types)`
   |
info: rule `type-assertion-failure` is enabled by default

```

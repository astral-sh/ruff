---
source: crates/ty_test/src/lib.rs
expression: snapshot
---
---
mdtest name: async.md - Async with statements - Accidental use of async `async with`
mdtest path: crates/ty_python_semantic/resources/mdtest/with/async.md
---

# Python source files

## mdtest_snippet.py

```
1 | class Manager:
2 |     def __enter__(self): ...
3 |     def __exit__(self, *args): ...
4 | 
5 | async def main():
6 |     # error: [invalid-context-manager] "Object of type `Manager` cannot be used with `async with` because it does not implement `__aenter__` and `__aexit__`"
7 |     async with Manager():
8 |         ...
```

# Diagnostics

```
error[invalid-context-manager]: Object of type `Manager` cannot be used with `async with` because it does not implement `__aenter__` and `__aexit__`
 --> src/mdtest_snippet.py:7:16
  |
5 | async def main():
6 |     # error: [invalid-context-manager] "Object of type `Manager` cannot be used with `async with` because it does not implement `__aentâ€¦
7 |     async with Manager():
  |                ^^^^^^^^^
8 |         ...
  |
info: Objects of type `Manager` can be used as sync context managers
info: Consider using `with` here
info: rule `invalid-context-manager` is enabled by default

```

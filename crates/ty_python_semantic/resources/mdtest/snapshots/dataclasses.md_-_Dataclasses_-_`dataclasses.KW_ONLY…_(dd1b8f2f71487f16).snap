---
source: crates/ty_test/src/lib.rs
expression: snapshot
---
---
mdtest name: dataclasses.md - Dataclasses - `dataclasses.KW_ONLY`
mdtest path: crates/ty_python_semantic/resources/mdtest/dataclasses.md
---

# Python source files

## mdtest_snippet.py

```
 1 | from dataclasses import dataclass, field, KW_ONLY
 2 | 
 3 | @dataclass
 4 | class C:
 5 |     x: int
 6 |     _: KW_ONLY
 7 |     y: str
 8 | 
 9 | reveal_type(C.__init__)  # revealed: (self: C, x: int, *, y: str) -> None
10 | 
11 | # error: [missing-argument]
12 | # error: [too-many-positional-arguments]
13 | C(3, "")
14 | 
15 | C(3, y="")
16 | @dataclass
17 | class Fails:  # error: [duplicate-kw-only]
18 |     a: int
19 |     b: KW_ONLY
20 |     c: str
21 |     d: KW_ONLY
22 |     e: bytes
23 | 
24 | reveal_type(Fails.__init__)  # revealed: (self: Fails, a: int, *, c: str, e: bytes) -> None
```

# Diagnostics

```
error[duplicate-kw-only]: Dataclass has more than one field annotated with `KW_ONLY`
 --> src/mdtest_snippet.py:4:7
  |
3 | @dataclass
4 | class C:
  |       ^
5 |     x: int
6 |     _: KW_ONLY
  |
info: First `KW_ONLY` field: `_`
info: Other fields: 
info: rule `duplicate-kw-only` is enabled by default

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:9:1
   |
 7 |     y: str
 8 |
 9 | reveal_type(C.__init__)  # revealed: (self: C, x: int, *, y: str) -> None
   | ^^^^^^^^^^^
10 |
11 | # error: [missing-argument]
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:9:13
   |
 7 |     y: str
 8 |
 9 | reveal_type(C.__init__)  # revealed: (self: C, x: int, *, y: str) -> None
   |             ^^^^^^^^^^ `(self: C, x: int, *, y: str) -> None`
10 |
11 | # error: [missing-argument]
   |

```

```
error[missing-argument]: No argument provided for required parameter `y`
  --> src/mdtest_snippet.py:13:1
   |
11 | # error: [missing-argument]
12 | # error: [too-many-positional-arguments]
13 | C(3, "")
   | ^^^^^^^^
14 |
15 | C(3, y="")
   |
info: rule `missing-argument` is enabled by default

```

```
error[too-many-positional-arguments]: Too many positional arguments: expected 1, got 2
  --> src/mdtest_snippet.py:13:6
   |
11 | # error: [missing-argument]
12 | # error: [too-many-positional-arguments]
13 | C(3, "")
   |      ^^
14 |
15 | C(3, y="")
   |
info: rule `too-many-positional-arguments` is enabled by default

```

```
error[duplicate-kw-only]: Dataclass has more than one field annotated with `KW_ONLY`
  --> src/mdtest_snippet.py:17:7
   |
15 | C(3, y="")
16 | @dataclass
17 | class Fails:  # error: [duplicate-kw-only]
   |       ^^^^^
18 |     a: int
19 |     b: KW_ONLY
   |
info: First `KW_ONLY` field: `b`
info: Other fields: `d`
info: rule `duplicate-kw-only` is enabled by default

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:24:1
   |
22 |     e: bytes
23 |
24 | reveal_type(Fails.__init__)  # revealed: (self: Fails, a: int, *, c: str, e: bytes) -> None
   | ^^^^^^^^^^^
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:24:13
   |
22 |     e: bytes
23 |
24 | reveal_type(Fails.__init__)  # revealed: (self: Fails, a: int, *, c: str, e: bytes) -> None
   |             ^^^^^^^^^^^^^^ `(self: Fails, a: int, *, c: str, e: bytes) -> None`
   |

```

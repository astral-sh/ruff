---
source: crates/ty_test/src/lib.rs
expression: snapshot
---
---
mdtest name: return_type.md - Function return type - Invalid return type
mdtest path: crates/ty_python_semantic/resources/mdtest/function/return_type.md
---

# Python source files

## mdtest_snippet.py

```
 1 | # error: [invalid-return-type]
 2 | def f() -> int:
 3 |     1
 4 | 
 5 | def f() -> str:
 6 |     # error: [invalid-return-type]
 7 |     return 1
 8 | 
 9 | def f() -> int:
10 |     # error: [invalid-return-type]
11 |     return
12 | 
13 | from typing import TypeVar
14 | 
15 | T = TypeVar("T")
16 | 
17 | # error: [invalid-return-type]
18 | def m(x: T) -> T: ...
19 | 
20 | class A[T]: ...
21 | 
22 | def f() -> A[int]:
23 |     class A[T]: ...
24 |     return A[int]()  # error: [invalid-return-type]
25 | 
26 | class B: ...
27 | 
28 | def g() -> B:
29 |     class B: ...
30 |     return B()  # error: [invalid-return-type]
```

# Diagnostics

```
error[invalid-return-type]: Function always implicitly returns `None`, which is not assignable to return type `int`
 --> src/mdtest_snippet.py:2:12
  |
1 | # error: [invalid-return-type]
2 | def f() -> int:
  |            ^^^
3 |     1
  |
info: Consider changing the return annotation to `-> None` or adding a `return` statement
info: rule `invalid-return-type` is enabled by default

```

```
error[invalid-return-type]: Return type does not match returned value
 --> src/mdtest_snippet.py:5:12
  |
3 |     1
4 |
5 | def f() -> str:
  |            --- Expected `str` because of return type
6 |     # error: [invalid-return-type]
7 |     return 1
  |            ^ expected `str`, found `Literal[1]`
8 |
9 | def f() -> int:
  |
info: rule `invalid-return-type` is enabled by default

```

```
error[invalid-return-type]: Return type does not match returned value
  --> src/mdtest_snippet.py:9:12
   |
 7 |     return 1
 8 |
 9 | def f() -> int:
   |            --- Expected `int` because of return type
10 |     # error: [invalid-return-type]
11 |     return
   |     ^^^^^^ expected `int`, found `None`
12 |
13 | from typing import TypeVar
   |
info: rule `invalid-return-type` is enabled by default

```

```
error[invalid-return-type]: Function always implicitly returns `None`, which is not assignable to return type `T@m`
  --> src/mdtest_snippet.py:18:16
   |
17 | # error: [invalid-return-type]
18 | def m(x: T) -> T: ...
   |                ^
19 |
20 | class A[T]: ...
   |
info: Consider changing the return annotation to `-> None` or adding a `return` statement
info: Only functions in stub files, methods on protocol classes, or methods with `@abstractmethod` are permitted to have empty bodies
info: rule `invalid-return-type` is enabled by default

```

```
error[invalid-return-type]: Return type does not match returned value
  --> src/mdtest_snippet.py:22:12
   |
20 | class A[T]: ...
21 |
22 | def f() -> A[int]:
   |            ------ Expected `mdtest_snippet.A[int]` because of return type
23 |     class A[T]: ...
24 |     return A[int]()  # error: [invalid-return-type]
   |            ^^^^^^^^ expected `mdtest_snippet.A[int]`, found `mdtest_snippet.<locals of function 'f'>.A[int]`
25 |
26 | class B: ...
   |
info: rule `invalid-return-type` is enabled by default

```

```
error[invalid-return-type]: Return type does not match returned value
  --> src/mdtest_snippet.py:28:12
   |
26 | class B: ...
27 |
28 | def g() -> B:
   |            - Expected `mdtest_snippet.B` because of return type
29 |     class B: ...
30 |     return B()  # error: [invalid-return-type]
   |            ^^^ expected `mdtest_snippet.B`, found `mdtest_snippet.<locals of function 'g'>.B`
   |
info: rule `invalid-return-type` is enabled by default

```

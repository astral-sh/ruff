---
source: crates/ty_test/src/lib.rs
expression: snapshot
---
---
mdtest name: stdlib_typing_aliases.md - Typing-module aliases to other stdlib classes - Incorrect number of type arguments
mdtest path: crates/ty_python_semantic/resources/mdtest/annotations/stdlib_typing_aliases.md
---

# Python source files

## mdtest_snippet.py

```
 1 | import typing
 2 | 
 3 | def f(
 4 |     # error: [invalid-type-form]
 5 |     incorrect_list: typing.List[int, int],
 6 |     # error: [invalid-type-form]
 7 |     incorrect_dict: typing.Dict[int, int, int],
 8 |     # error: [invalid-type-form]
 9 |     incorrect_dict2: typing.Dict[int],  # type argument is not a tuple here
10 |     # error: [invalid-type-form]
11 |     incorrect_set: typing.Set[int, int],
12 |     # error: [invalid-type-form]
13 |     incorrect_frozen_set: typing.FrozenSet[int, int],
14 |     # error: [invalid-type-form]
15 |     incorrect_chain_map: typing.ChainMap[int, int, int],
16 |     # error: [invalid-type-form]
17 |     incorrect_chain_map2: typing.ChainMap[int],
18 |     # error: [invalid-type-form]
19 |     incorrect_counter: typing.Counter[int, int],
20 |     # error: [invalid-type-form]
21 |     incorrect_default_dict: typing.DefaultDict[int, int, int],
22 |     # error: [invalid-type-form]
23 |     incorrect_default_dict2: typing.DefaultDict[int],
24 |     # error: [invalid-type-form]
25 |     incorrect_deque: typing.Deque[int, int],
26 |     # error: [invalid-type-form]
27 |     incorrect_ordered_dict: typing.OrderedDict[int, int, int],
28 |     # error: [invalid-type-form]
29 |     incorrect_ordered_dict2: typing.OrderedDict[int],
30 | ):
31 |     reveal_type(incorrect_list)  # revealed: list[Unknown]
32 |     reveal_type(incorrect_dict)  # revealed: dict[Unknown, Unknown]
33 |     reveal_type(incorrect_dict2)  # revealed: dict[Unknown, Unknown]
34 |     reveal_type(incorrect_set)  # revealed: set[Unknown]
35 |     reveal_type(incorrect_frozen_set)  # revealed: frozenset[Unknown]
36 |     reveal_type(incorrect_chain_map)  # revealed: ChainMap[Unknown, Unknown]
37 |     reveal_type(incorrect_chain_map2)  # revealed: ChainMap[Unknown, Unknown]
38 |     reveal_type(incorrect_counter)  # revealed: Counter[Unknown]
39 |     reveal_type(incorrect_default_dict)  # revealed: defaultdict[Unknown, Unknown]
40 |     reveal_type(incorrect_default_dict2)  # revealed: defaultdict[Unknown, Unknown]
41 |     reveal_type(incorrect_deque)  # revealed: deque[Unknown]
42 |     reveal_type(incorrect_ordered_dict)  # revealed: OrderedDict[Unknown, Unknown]
43 |     reveal_type(incorrect_ordered_dict2)  # revealed: OrderedDict[Unknown, Unknown]
```

# Diagnostics

```
error[invalid-type-form]: Legacy alias `typing.List` expected exactly 1 arguments, got 2
 --> src/mdtest_snippet.py:5:21
  |
3 | def f(
4 |     # error: [invalid-type-form]
5 |     incorrect_list: typing.List[int, int],
  |                     ^^^^^^^^^^^^^^^^^^^^^
6 |     # error: [invalid-type-form]
7 |     incorrect_dict: typing.Dict[int, int, int],
  |
info: rule `invalid-type-form` is enabled by default

```

```
error[invalid-type-form]: Legacy alias `typing.Dict` expected exactly 2 arguments, got 3
 --> src/mdtest_snippet.py:7:21
  |
5 |     incorrect_list: typing.List[int, int],
6 |     # error: [invalid-type-form]
7 |     incorrect_dict: typing.Dict[int, int, int],
  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |     # error: [invalid-type-form]
9 |     incorrect_dict2: typing.Dict[int],  # type argument is not a tuple here
  |
info: rule `invalid-type-form` is enabled by default

```

```
error[invalid-type-form]: Legacy alias `typing.Dict` expected exactly 2 arguments, got 1
  --> src/mdtest_snippet.py:9:22
   |
 7 |     incorrect_dict: typing.Dict[int, int, int],
 8 |     # error: [invalid-type-form]
 9 |     incorrect_dict2: typing.Dict[int],  # type argument is not a tuple here
   |                      ^^^^^^^^^^^^^^^^
10 |     # error: [invalid-type-form]
11 |     incorrect_set: typing.Set[int, int],
   |
info: rule `invalid-type-form` is enabled by default

```

```
error[invalid-type-form]: Legacy alias `typing.Set` expected exactly 1 arguments, got 2
  --> src/mdtest_snippet.py:11:20
   |
 9 |     incorrect_dict2: typing.Dict[int],  # type argument is not a tuple here
10 |     # error: [invalid-type-form]
11 |     incorrect_set: typing.Set[int, int],
   |                    ^^^^^^^^^^^^^^^^^^^^
12 |     # error: [invalid-type-form]
13 |     incorrect_frozen_set: typing.FrozenSet[int, int],
   |
info: rule `invalid-type-form` is enabled by default

```

```
error[invalid-type-form]: Legacy alias `typing.FrozenSet` expected exactly 1 arguments, got 2
  --> src/mdtest_snippet.py:13:27
   |
11 |     incorrect_set: typing.Set[int, int],
12 |     # error: [invalid-type-form]
13 |     incorrect_frozen_set: typing.FrozenSet[int, int],
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |     # error: [invalid-type-form]
15 |     incorrect_chain_map: typing.ChainMap[int, int, int],
   |
info: rule `invalid-type-form` is enabled by default

```

```
error[invalid-type-form]: Legacy alias `typing.ChainMap` expected exactly 2 arguments, got 3
  --> src/mdtest_snippet.py:15:26
   |
13 |     incorrect_frozen_set: typing.FrozenSet[int, int],
14 |     # error: [invalid-type-form]
15 |     incorrect_chain_map: typing.ChainMap[int, int, int],
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 |     # error: [invalid-type-form]
17 |     incorrect_chain_map2: typing.ChainMap[int],
   |
info: rule `invalid-type-form` is enabled by default

```

```
error[invalid-type-form]: Legacy alias `typing.ChainMap` expected exactly 2 arguments, got 1
  --> src/mdtest_snippet.py:17:27
   |
15 |     incorrect_chain_map: typing.ChainMap[int, int, int],
16 |     # error: [invalid-type-form]
17 |     incorrect_chain_map2: typing.ChainMap[int],
   |                           ^^^^^^^^^^^^^^^^^^^^
18 |     # error: [invalid-type-form]
19 |     incorrect_counter: typing.Counter[int, int],
   |
info: rule `invalid-type-form` is enabled by default

```

```
error[invalid-type-form]: Legacy alias `typing.Counter` expected exactly 1 arguments, got 2
  --> src/mdtest_snippet.py:19:24
   |
17 |     incorrect_chain_map2: typing.ChainMap[int],
18 |     # error: [invalid-type-form]
19 |     incorrect_counter: typing.Counter[int, int],
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^
20 |     # error: [invalid-type-form]
21 |     incorrect_default_dict: typing.DefaultDict[int, int, int],
   |
info: rule `invalid-type-form` is enabled by default

```

```
error[invalid-type-form]: Legacy alias `typing.DefaultDict` expected exactly 2 arguments, got 3
  --> src/mdtest_snippet.py:21:29
   |
19 |     incorrect_counter: typing.Counter[int, int],
20 |     # error: [invalid-type-form]
21 |     incorrect_default_dict: typing.DefaultDict[int, int, int],
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
22 |     # error: [invalid-type-form]
23 |     incorrect_default_dict2: typing.DefaultDict[int],
   |
info: rule `invalid-type-form` is enabled by default

```

```
error[invalid-type-form]: Legacy alias `typing.DefaultDict` expected exactly 2 arguments, got 1
  --> src/mdtest_snippet.py:23:30
   |
21 |     incorrect_default_dict: typing.DefaultDict[int, int, int],
22 |     # error: [invalid-type-form]
23 |     incorrect_default_dict2: typing.DefaultDict[int],
   |                              ^^^^^^^^^^^^^^^^^^^^^^^
24 |     # error: [invalid-type-form]
25 |     incorrect_deque: typing.Deque[int, int],
   |
info: rule `invalid-type-form` is enabled by default

```

```
error[invalid-type-form]: Legacy alias `typing.Deque` expected exactly 1 arguments, got 2
  --> src/mdtest_snippet.py:25:22
   |
23 |     incorrect_default_dict2: typing.DefaultDict[int],
24 |     # error: [invalid-type-form]
25 |     incorrect_deque: typing.Deque[int, int],
   |                      ^^^^^^^^^^^^^^^^^^^^^^
26 |     # error: [invalid-type-form]
27 |     incorrect_ordered_dict: typing.OrderedDict[int, int, int],
   |
info: rule `invalid-type-form` is enabled by default

```

```
error[invalid-type-form]: Legacy alias `typing.OrderedDict` expected exactly 2 arguments, got 3
  --> src/mdtest_snippet.py:27:29
   |
25 |     incorrect_deque: typing.Deque[int, int],
26 |     # error: [invalid-type-form]
27 |     incorrect_ordered_dict: typing.OrderedDict[int, int, int],
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
28 |     # error: [invalid-type-form]
29 |     incorrect_ordered_dict2: typing.OrderedDict[int],
   |
info: rule `invalid-type-form` is enabled by default

```

```
error[invalid-type-form]: Legacy alias `typing.OrderedDict` expected exactly 2 arguments, got 1
  --> src/mdtest_snippet.py:29:30
   |
27 |     incorrect_ordered_dict: typing.OrderedDict[int, int, int],
28 |     # error: [invalid-type-form]
29 |     incorrect_ordered_dict2: typing.OrderedDict[int],
   |                              ^^^^^^^^^^^^^^^^^^^^^^^
30 | ):
31 |     reveal_type(incorrect_list)  # revealed: list[Unknown]
   |
info: rule `invalid-type-form` is enabled by default

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:31:5
   |
29 |     incorrect_ordered_dict2: typing.OrderedDict[int],
30 | ):
31 |     reveal_type(incorrect_list)  # revealed: list[Unknown]
   |     ^^^^^^^^^^^
32 |     reveal_type(incorrect_dict)  # revealed: dict[Unknown, Unknown]
33 |     reveal_type(incorrect_dict2)  # revealed: dict[Unknown, Unknown]
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:31:17
   |
29 |     incorrect_ordered_dict2: typing.OrderedDict[int],
30 | ):
31 |     reveal_type(incorrect_list)  # revealed: list[Unknown]
   |                 ^^^^^^^^^^^^^^ `list[Unknown]`
32 |     reveal_type(incorrect_dict)  # revealed: dict[Unknown, Unknown]
33 |     reveal_type(incorrect_dict2)  # revealed: dict[Unknown, Unknown]
   |

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:32:5
   |
30 | ):
31 |     reveal_type(incorrect_list)  # revealed: list[Unknown]
32 |     reveal_type(incorrect_dict)  # revealed: dict[Unknown, Unknown]
   |     ^^^^^^^^^^^
33 |     reveal_type(incorrect_dict2)  # revealed: dict[Unknown, Unknown]
34 |     reveal_type(incorrect_set)  # revealed: set[Unknown]
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:32:17
   |
30 | ):
31 |     reveal_type(incorrect_list)  # revealed: list[Unknown]
32 |     reveal_type(incorrect_dict)  # revealed: dict[Unknown, Unknown]
   |                 ^^^^^^^^^^^^^^ `dict[Unknown, Unknown]`
33 |     reveal_type(incorrect_dict2)  # revealed: dict[Unknown, Unknown]
34 |     reveal_type(incorrect_set)  # revealed: set[Unknown]
   |

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:33:5
   |
31 |     reveal_type(incorrect_list)  # revealed: list[Unknown]
32 |     reveal_type(incorrect_dict)  # revealed: dict[Unknown, Unknown]
33 |     reveal_type(incorrect_dict2)  # revealed: dict[Unknown, Unknown]
   |     ^^^^^^^^^^^
34 |     reveal_type(incorrect_set)  # revealed: set[Unknown]
35 |     reveal_type(incorrect_frozen_set)  # revealed: frozenset[Unknown]
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:33:17
   |
31 |     reveal_type(incorrect_list)  # revealed: list[Unknown]
32 |     reveal_type(incorrect_dict)  # revealed: dict[Unknown, Unknown]
33 |     reveal_type(incorrect_dict2)  # revealed: dict[Unknown, Unknown]
   |                 ^^^^^^^^^^^^^^^ `dict[Unknown, Unknown]`
34 |     reveal_type(incorrect_set)  # revealed: set[Unknown]
35 |     reveal_type(incorrect_frozen_set)  # revealed: frozenset[Unknown]
   |

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:34:5
   |
32 |     reveal_type(incorrect_dict)  # revealed: dict[Unknown, Unknown]
33 |     reveal_type(incorrect_dict2)  # revealed: dict[Unknown, Unknown]
34 |     reveal_type(incorrect_set)  # revealed: set[Unknown]
   |     ^^^^^^^^^^^
35 |     reveal_type(incorrect_frozen_set)  # revealed: frozenset[Unknown]
36 |     reveal_type(incorrect_chain_map)  # revealed: ChainMap[Unknown, Unknown]
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:34:17
   |
32 |     reveal_type(incorrect_dict)  # revealed: dict[Unknown, Unknown]
33 |     reveal_type(incorrect_dict2)  # revealed: dict[Unknown, Unknown]
34 |     reveal_type(incorrect_set)  # revealed: set[Unknown]
   |                 ^^^^^^^^^^^^^ `set[Unknown]`
35 |     reveal_type(incorrect_frozen_set)  # revealed: frozenset[Unknown]
36 |     reveal_type(incorrect_chain_map)  # revealed: ChainMap[Unknown, Unknown]
   |

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:35:5
   |
33 |     reveal_type(incorrect_dict2)  # revealed: dict[Unknown, Unknown]
34 |     reveal_type(incorrect_set)  # revealed: set[Unknown]
35 |     reveal_type(incorrect_frozen_set)  # revealed: frozenset[Unknown]
   |     ^^^^^^^^^^^
36 |     reveal_type(incorrect_chain_map)  # revealed: ChainMap[Unknown, Unknown]
37 |     reveal_type(incorrect_chain_map2)  # revealed: ChainMap[Unknown, Unknown]
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:35:17
   |
33 |     reveal_type(incorrect_dict2)  # revealed: dict[Unknown, Unknown]
34 |     reveal_type(incorrect_set)  # revealed: set[Unknown]
35 |     reveal_type(incorrect_frozen_set)  # revealed: frozenset[Unknown]
   |                 ^^^^^^^^^^^^^^^^^^^^ `frozenset[Unknown]`
36 |     reveal_type(incorrect_chain_map)  # revealed: ChainMap[Unknown, Unknown]
37 |     reveal_type(incorrect_chain_map2)  # revealed: ChainMap[Unknown, Unknown]
   |

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:36:5
   |
34 |     reveal_type(incorrect_set)  # revealed: set[Unknown]
35 |     reveal_type(incorrect_frozen_set)  # revealed: frozenset[Unknown]
36 |     reveal_type(incorrect_chain_map)  # revealed: ChainMap[Unknown, Unknown]
   |     ^^^^^^^^^^^
37 |     reveal_type(incorrect_chain_map2)  # revealed: ChainMap[Unknown, Unknown]
38 |     reveal_type(incorrect_counter)  # revealed: Counter[Unknown]
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:36:17
   |
34 |     reveal_type(incorrect_set)  # revealed: set[Unknown]
35 |     reveal_type(incorrect_frozen_set)  # revealed: frozenset[Unknown]
36 |     reveal_type(incorrect_chain_map)  # revealed: ChainMap[Unknown, Unknown]
   |                 ^^^^^^^^^^^^^^^^^^^ `ChainMap[Unknown, Unknown]`
37 |     reveal_type(incorrect_chain_map2)  # revealed: ChainMap[Unknown, Unknown]
38 |     reveal_type(incorrect_counter)  # revealed: Counter[Unknown]
   |

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:37:5
   |
35 |     reveal_type(incorrect_frozen_set)  # revealed: frozenset[Unknown]
36 |     reveal_type(incorrect_chain_map)  # revealed: ChainMap[Unknown, Unknown]
37 |     reveal_type(incorrect_chain_map2)  # revealed: ChainMap[Unknown, Unknown]
   |     ^^^^^^^^^^^
38 |     reveal_type(incorrect_counter)  # revealed: Counter[Unknown]
39 |     reveal_type(incorrect_default_dict)  # revealed: defaultdict[Unknown, Unknown]
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:37:17
   |
35 |     reveal_type(incorrect_frozen_set)  # revealed: frozenset[Unknown]
36 |     reveal_type(incorrect_chain_map)  # revealed: ChainMap[Unknown, Unknown]
37 |     reveal_type(incorrect_chain_map2)  # revealed: ChainMap[Unknown, Unknown]
   |                 ^^^^^^^^^^^^^^^^^^^^ `ChainMap[Unknown, Unknown]`
38 |     reveal_type(incorrect_counter)  # revealed: Counter[Unknown]
39 |     reveal_type(incorrect_default_dict)  # revealed: defaultdict[Unknown, Unknown]
   |

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:38:5
   |
36 |     reveal_type(incorrect_chain_map)  # revealed: ChainMap[Unknown, Unknown]
37 |     reveal_type(incorrect_chain_map2)  # revealed: ChainMap[Unknown, Unknown]
38 |     reveal_type(incorrect_counter)  # revealed: Counter[Unknown]
   |     ^^^^^^^^^^^
39 |     reveal_type(incorrect_default_dict)  # revealed: defaultdict[Unknown, Unknown]
40 |     reveal_type(incorrect_default_dict2)  # revealed: defaultdict[Unknown, Unknown]
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:38:17
   |
36 |     reveal_type(incorrect_chain_map)  # revealed: ChainMap[Unknown, Unknown]
37 |     reveal_type(incorrect_chain_map2)  # revealed: ChainMap[Unknown, Unknown]
38 |     reveal_type(incorrect_counter)  # revealed: Counter[Unknown]
   |                 ^^^^^^^^^^^^^^^^^ `Counter[Unknown]`
39 |     reveal_type(incorrect_default_dict)  # revealed: defaultdict[Unknown, Unknown]
40 |     reveal_type(incorrect_default_dict2)  # revealed: defaultdict[Unknown, Unknown]
   |

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:39:5
   |
37 |     reveal_type(incorrect_chain_map2)  # revealed: ChainMap[Unknown, Unknown]
38 |     reveal_type(incorrect_counter)  # revealed: Counter[Unknown]
39 |     reveal_type(incorrect_default_dict)  # revealed: defaultdict[Unknown, Unknown]
   |     ^^^^^^^^^^^
40 |     reveal_type(incorrect_default_dict2)  # revealed: defaultdict[Unknown, Unknown]
41 |     reveal_type(incorrect_deque)  # revealed: deque[Unknown]
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:39:17
   |
37 |     reveal_type(incorrect_chain_map2)  # revealed: ChainMap[Unknown, Unknown]
38 |     reveal_type(incorrect_counter)  # revealed: Counter[Unknown]
39 |     reveal_type(incorrect_default_dict)  # revealed: defaultdict[Unknown, Unknown]
   |                 ^^^^^^^^^^^^^^^^^^^^^^ `defaultdict[Unknown, Unknown]`
40 |     reveal_type(incorrect_default_dict2)  # revealed: defaultdict[Unknown, Unknown]
41 |     reveal_type(incorrect_deque)  # revealed: deque[Unknown]
   |

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:40:5
   |
38 |     reveal_type(incorrect_counter)  # revealed: Counter[Unknown]
39 |     reveal_type(incorrect_default_dict)  # revealed: defaultdict[Unknown, Unknown]
40 |     reveal_type(incorrect_default_dict2)  # revealed: defaultdict[Unknown, Unknown]
   |     ^^^^^^^^^^^
41 |     reveal_type(incorrect_deque)  # revealed: deque[Unknown]
42 |     reveal_type(incorrect_ordered_dict)  # revealed: OrderedDict[Unknown, Unknown]
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:40:17
   |
38 |     reveal_type(incorrect_counter)  # revealed: Counter[Unknown]
39 |     reveal_type(incorrect_default_dict)  # revealed: defaultdict[Unknown, Unknown]
40 |     reveal_type(incorrect_default_dict2)  # revealed: defaultdict[Unknown, Unknown]
   |                 ^^^^^^^^^^^^^^^^^^^^^^^ `defaultdict[Unknown, Unknown]`
41 |     reveal_type(incorrect_deque)  # revealed: deque[Unknown]
42 |     reveal_type(incorrect_ordered_dict)  # revealed: OrderedDict[Unknown, Unknown]
   |

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:41:5
   |
39 |     reveal_type(incorrect_default_dict)  # revealed: defaultdict[Unknown, Unknown]
40 |     reveal_type(incorrect_default_dict2)  # revealed: defaultdict[Unknown, Unknown]
41 |     reveal_type(incorrect_deque)  # revealed: deque[Unknown]
   |     ^^^^^^^^^^^
42 |     reveal_type(incorrect_ordered_dict)  # revealed: OrderedDict[Unknown, Unknown]
43 |     reveal_type(incorrect_ordered_dict2)  # revealed: OrderedDict[Unknown, Unknown]
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:41:17
   |
39 |     reveal_type(incorrect_default_dict)  # revealed: defaultdict[Unknown, Unknown]
40 |     reveal_type(incorrect_default_dict2)  # revealed: defaultdict[Unknown, Unknown]
41 |     reveal_type(incorrect_deque)  # revealed: deque[Unknown]
   |                 ^^^^^^^^^^^^^^^ `deque[Unknown]`
42 |     reveal_type(incorrect_ordered_dict)  # revealed: OrderedDict[Unknown, Unknown]
43 |     reveal_type(incorrect_ordered_dict2)  # revealed: OrderedDict[Unknown, Unknown]
   |

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:42:5
   |
40 |     reveal_type(incorrect_default_dict2)  # revealed: defaultdict[Unknown, Unknown]
41 |     reveal_type(incorrect_deque)  # revealed: deque[Unknown]
42 |     reveal_type(incorrect_ordered_dict)  # revealed: OrderedDict[Unknown, Unknown]
   |     ^^^^^^^^^^^
43 |     reveal_type(incorrect_ordered_dict2)  # revealed: OrderedDict[Unknown, Unknown]
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:42:17
   |
40 |     reveal_type(incorrect_default_dict2)  # revealed: defaultdict[Unknown, Unknown]
41 |     reveal_type(incorrect_deque)  # revealed: deque[Unknown]
42 |     reveal_type(incorrect_ordered_dict)  # revealed: OrderedDict[Unknown, Unknown]
   |                 ^^^^^^^^^^^^^^^^^^^^^^ `OrderedDict[Unknown, Unknown]`
43 |     reveal_type(incorrect_ordered_dict2)  # revealed: OrderedDict[Unknown, Unknown]
   |

```

```
warning[undefined-reveal]: `reveal_type` used without importing it
  --> src/mdtest_snippet.py:43:5
   |
41 |     reveal_type(incorrect_deque)  # revealed: deque[Unknown]
42 |     reveal_type(incorrect_ordered_dict)  # revealed: OrderedDict[Unknown, Unknown]
43 |     reveal_type(incorrect_ordered_dict2)  # revealed: OrderedDict[Unknown, Unknown]
   |     ^^^^^^^^^^^
   |
info: This is allowed for debugging convenience but will fail at runtime
info: rule `undefined-reveal` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:43:17
   |
41 |     reveal_type(incorrect_deque)  # revealed: deque[Unknown]
42 |     reveal_type(incorrect_ordered_dict)  # revealed: OrderedDict[Unknown, Unknown]
43 |     reveal_type(incorrect_ordered_dict2)  # revealed: OrderedDict[Unknown, Unknown]
   |                 ^^^^^^^^^^^^^^^^^^^^^^^ `OrderedDict[Unknown, Unknown]`
   |

```

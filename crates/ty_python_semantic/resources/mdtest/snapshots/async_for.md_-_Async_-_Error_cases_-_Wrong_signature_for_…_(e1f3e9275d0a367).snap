---
source: crates/ty_test/src/lib.rs
expression: snapshot
---
---
mdtest name: async_for.md - Async - Error cases - Wrong signature for `__aiter__`
mdtest path: crates/ty_python_semantic/resources/mdtest/loops/async_for.md
---

# Python source files

## mdtest_snippet.py

```
 1 | from typing_extensions import reveal_type
 2 | 
 3 | class AsyncIterator:
 4 |     async def __anext__(self) -> int:
 5 |         return 42
 6 | 
 7 | class AsyncIterable:
 8 |     def __aiter__(self, arg: int) -> AsyncIterator:  # wrong
 9 |         return AsyncIterator()
10 | 
11 | async def foo():
12 |     # error: [not-iterable] "Object of type `AsyncIterable` is not async-iterable"
13 |     async for x in AsyncIterable():
14 |         reveal_type(x)  # revealed: int
```

# Diagnostics

```
error[not-iterable]: Object of type `AsyncIterable` is not async-iterable
  --> src/mdtest_snippet.py:13:20
   |
11 | async def foo():
12 |     # error: [not-iterable] "Object of type `AsyncIterable` is not async-iterable"
13 |     async for x in AsyncIterable():
   |                    ^^^^^^^^^^^^^^^
14 |         reveal_type(x)  # revealed: int
   |
info: Its `__aiter__` method has an invalid signature
info: Expected signature `def __aiter__(self): ...`
info: rule `not-iterable` is enabled by default

```

```
info[revealed-type]: Revealed type
  --> src/mdtest_snippet.py:14:21
   |
12 |     # error: [not-iterable] "Object of type `AsyncIterable` is not async-iterable"
13 |     async for x in AsyncIterable():
14 |         reveal_type(x)  # revealed: int
   |                     ^ `int`
   |

```

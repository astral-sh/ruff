---
source: crates/ruff_python_parser/tests/fixtures.rs
input_file: crates/ruff_python_parser/resources/inline/err/decorator_missing_expression.py
---
## AST

```
Module(
    ModModule {
        node_index: AtomicNodeIndex(..),
        range: 0..51,
        body: [
            AnnAssign(
                StmtAnnAssign {
                    node_index: AtomicNodeIndex(..),
                    range: 5..15,
                    target: Call(
                        ExprCall {
                            node_index: AtomicNodeIndex(..),
                            range: 5..10,
                            func: Name(
                                ExprName {
                                    node_index: AtomicNodeIndex(..),
                                    range: 5..8,
                                    id: Name("foo"),
                                    ctx: Load,
                                },
                            ),
                            arguments: Arguments {
                                range: 8..10,
                                node_index: AtomicNodeIndex(..),
                                args: [],
                                keywords: [],
                            },
                        },
                    ),
                    annotation: EllipsisLiteral(
                        ExprEllipsisLiteral {
                            node_index: AtomicNodeIndex(..),
                            range: 12..15,
                        },
                    ),
                    value: None,
                    simple: false,
                },
            ),
            FunctionDef(
                StmtFunctionDef {
                    node_index: AtomicNodeIndex(..),
                    range: 16..32,
                    is_async: false,
                    decorator_list: [
                        Decorator {
                            range: 16..17,
                            node_index: AtomicNodeIndex(..),
                            expression: Name(
                                ExprName {
                                    node_index: AtomicNodeIndex(..),
                                    range: 17..17,
                                    id: Name(""),
                                    ctx: Invalid,
                                },
                            ),
                        },
                    ],
                    name: Identifier {
                        id: Name("foo"),
                        range: 22..25,
                        node_index: AtomicNodeIndex(..),
                    },
                    type_params: None,
                    parameters: Parameters {
                        range: 25..27,
                        node_index: AtomicNodeIndex(
                            0,
                        ),
                        posonlyargs: [],
                        args: [],
                        vararg: None,
                        kwonlyargs: [],
                        kwarg: None,
                    },
                    returns: None,
                    body: [
                        Expr(
                            StmtExpr {
                                node_index: AtomicNodeIndex(..),
                                range: 29..32,
                                value: EllipsisLiteral(
                                    ExprEllipsisLiteral {
                                        node_index: AtomicNodeIndex(..),
                                        range: 29..32,
                                    },
                                ),
                            },
                        ),
                    ],
                },
            ),
            FunctionDef(
                StmtFunctionDef {
                    node_index: AtomicNodeIndex(..),
                    range: 33..50,
                    is_async: false,
                    decorator_list: [
                        Decorator {
                            range: 33..35,
                            node_index: AtomicNodeIndex(..),
                            expression: BinOp(
                                ExprBinOp {
                                    node_index: AtomicNodeIndex(..),
                                    range: 34..35,
                                    left: Name(
                                        ExprName {
                                            node_index: AtomicNodeIndex(..),
                                            range: 34..34,
                                            id: Name(""),
                                            ctx: Invalid,
                                        },
                                    ),
                                    op: MatMult,
                                    right: Name(
                                        ExprName {
                                            node_index: AtomicNodeIndex(..),
                                            range: 35..35,
                                            id: Name(""),
                                            ctx: Invalid,
                                        },
                                    ),
                                },
                            ),
                        },
                    ],
                    name: Identifier {
                        id: Name("foo"),
                        range: 40..43,
                        node_index: AtomicNodeIndex(..),
                    },
                    type_params: None,
                    parameters: Parameters {
                        range: 43..45,
                        node_index: AtomicNodeIndex(
                            0,
                        ),
                        posonlyargs: [],
                        args: [],
                        vararg: None,
                        kwonlyargs: [],
                        kwarg: None,
                    },
                    returns: None,
                    body: [
                        Expr(
                            StmtExpr {
                                node_index: AtomicNodeIndex(..),
                                range: 47..50,
                                value: EllipsisLiteral(
                                    ExprEllipsisLiteral {
                                        node_index: AtomicNodeIndex(..),
                                        range: 47..50,
                                    },
                                ),
                            },
                        ),
                    ],
                },
            ),
        ],
    },
)
```
## Errors

  |
1 | @def foo(): ...
  |  ^^^ Syntax Error: Expected an identifier, but found a keyword 'def' that cannot be used here
2 | @
3 | def foo(): ...
  |


  |
1 | @def foo(): ...
  |      ^^^ Syntax Error: Expected newline, found name
2 | @
3 | def foo(): ...
  |


  |
1 | @def foo(): ...
2 | @
  |  ^ Syntax Error: Expected an expression
3 | def foo(): ...
4 | @@
5 | def foo(): ...
  |


  |
2 | @
3 | def foo(): ...
4 | @@
  |  ^ Syntax Error: Expected an expression
5 | def foo(): ...
  |


  |
2 | @
3 | def foo(): ...
4 | @@
  |   ^ Syntax Error: Expected an expression
5 | def foo(): ...
  |

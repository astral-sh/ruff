---
source: crates/ruff_python_parser/tests/fixtures.rs
input_file: crates/ruff_python_parser/resources/inline/ok/match_as_pattern.py
---
## AST

```
Module(
    ModModule {
        node_index: AtomicNodeIndex(..),
        range: 0..60,
        body: [
            Match(
                StmtMatch {
                    node_index: AtomicNodeIndex(..),
                    range: 0..32,
                    subject: Name(
                        ExprName {
                            node_index: AtomicNodeIndex(..),
                            range: 6..9,
                            id: Name("foo"),
                            ctx: Load,
                        },
                    ),
                    cases: [
                        MatchCase {
                            range: 15..32,
                            node_index: AtomicNodeIndex(..),
                            pattern: MatchAs(
                                PatternMatchAs {
                                    range: 20..27,
                                    node_index: AtomicNodeIndex(..),
                                    pattern: None,
                                    name: Some(
                                        Identifier {
                                            id: Name("foo_bar"),
                                            range: 20..27,
                                            node_index: AtomicNodeIndex(..),
                                        },
                                    ),
                                },
                            ),
                            guard: None,
                            body: [
                                Expr(
                                    StmtExpr {
                                        node_index: AtomicNodeIndex(..),
                                        range: 29..32,
                                        value: EllipsisLiteral(
                                            ExprEllipsisLiteral {
                                                node_index: AtomicNodeIndex(..),
                                                range: 29..32,
                                            },
                                        ),
                                    },
                                ),
                            ],
                        },
                    ],
                },
            ),
            Match(
                StmtMatch {
                    node_index: AtomicNodeIndex(..),
                    range: 33..59,
                    subject: Name(
                        ExprName {
                            node_index: AtomicNodeIndex(..),
                            range: 39..42,
                            id: Name("foo"),
                            ctx: Load,
                        },
                    ),
                    cases: [
                        MatchCase {
                            range: 48..59,
                            node_index: AtomicNodeIndex(..),
                            pattern: MatchAs(
                                PatternMatchAs {
                                    range: 53..54,
                                    node_index: AtomicNodeIndex(..),
                                    pattern: None,
                                    name: None,
                                },
                            ),
                            guard: None,
                            body: [
                                Expr(
                                    StmtExpr {
                                        node_index: AtomicNodeIndex(..),
                                        range: 56..59,
                                        value: EllipsisLiteral(
                                            ExprEllipsisLiteral {
                                                node_index: AtomicNodeIndex(..),
                                                range: 56..59,
                                            },
                                        ),
                                    },
                                ),
                            ],
                        },
                    ],
                },
            ),
        ],
    },
)
```

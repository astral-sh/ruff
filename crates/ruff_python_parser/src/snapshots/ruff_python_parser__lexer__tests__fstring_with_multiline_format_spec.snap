---
source: crates/ruff_python_parser/src/lexer.rs
expression: lex_source(source)
---
[
    (
        FStringStart(
            StringFlags(
                StringFlagsInner(
                    TRIPLE_QUOTED | F_PREFIX,
                ),
            ),
        ),
        0..4,
    ),
    (
        FStringMiddle {
            value: "__",
            flags: StringFlags(
                StringFlagsInner(
                    TRIPLE_QUOTED | F_PREFIX,
                ),
            ),
        },
        4..6,
    ),
    (
        Lbrace,
        6..7,
    ),
    (
        NonLogicalNewline,
        7..8,
    ),
    (
        Name {
            name: "x",
        },
        12..13,
    ),
    (
        Colon,
        13..14,
    ),
    (
        FStringMiddle {
            value: "d\n",
            flags: StringFlags(
                StringFlagsInner(
                    TRIPLE_QUOTED | F_PREFIX,
                ),
            ),
        },
        14..16,
    ),
    (
        Rbrace,
        16..17,
    ),
    (
        FStringMiddle {
            value: "__",
            flags: StringFlags(
                StringFlagsInner(
                    TRIPLE_QUOTED | F_PREFIX,
                ),
            ),
        },
        17..19,
    ),
    (
        FStringEnd(
            StringFlags(
                StringFlagsInner(
                    TRIPLE_QUOTED | F_PREFIX,
                ),
            ),
        ),
        19..22,
    ),
    (
        Newline,
        22..23,
    ),
    (
        FStringStart(
            StringFlags(
                StringFlagsInner(
                    TRIPLE_QUOTED | F_PREFIX,
                ),
            ),
        ),
        23..27,
    ),
    (
        FStringMiddle {
            value: "__",
            flags: StringFlags(
                StringFlagsInner(
                    TRIPLE_QUOTED | F_PREFIX,
                ),
            ),
        },
        27..29,
    ),
    (
        Lbrace,
        29..30,
    ),
    (
        NonLogicalNewline,
        30..31,
    ),
    (
        Name {
            name: "x",
        },
        35..36,
    ),
    (
        Colon,
        36..37,
    ),
    (
        FStringMiddle {
            value: "a\n        b\n          c\n",
            flags: StringFlags(
                StringFlagsInner(
                    TRIPLE_QUOTED | F_PREFIX,
                ),
            ),
        },
        37..61,
    ),
    (
        Rbrace,
        61..62,
    ),
    (
        FStringMiddle {
            value: "__",
            flags: StringFlags(
                StringFlagsInner(
                    TRIPLE_QUOTED | F_PREFIX,
                ),
            ),
        },
        62..64,
    ),
    (
        FStringEnd(
            StringFlags(
                StringFlagsInner(
                    TRIPLE_QUOTED | F_PREFIX,
                ),
            ),
        ),
        64..67,
    ),
    (
        Newline,
        67..68,
    ),
    (
        FStringStart(
            StringFlags(
                StringFlagsInner(
                    F_PREFIX,
                ),
            ),
        ),
        68..70,
    ),
    (
        FStringMiddle {
            value: "__",
            flags: StringFlags(
                StringFlagsInner(
                    F_PREFIX,
                ),
            ),
        },
        70..72,
    ),
    (
        Lbrace,
        72..73,
    ),
    (
        NonLogicalNewline,
        73..74,
    ),
    (
        Name {
            name: "x",
        },
        78..79,
    ),
    (
        Colon,
        79..80,
    ),
    (
        FStringMiddle {
            value: "d",
            flags: StringFlags(
                StringFlagsInner(
                    F_PREFIX,
                ),
            ),
        },
        80..81,
    ),
    (
        NonLogicalNewline,
        81..82,
    ),
    (
        Rbrace,
        82..83,
    ),
    (
        FStringMiddle {
            value: "__",
            flags: StringFlags(
                StringFlagsInner(
                    F_PREFIX,
                ),
            ),
        },
        83..85,
    ),
    (
        FStringEnd(
            StringFlags(
                StringFlagsInner(
                    F_PREFIX,
                ),
            ),
        ),
        85..86,
    ),
    (
        Newline,
        86..87,
    ),
    (
        FStringStart(
            StringFlags(
                StringFlagsInner(
                    F_PREFIX,
                ),
            ),
        ),
        87..89,
    ),
    (
        FStringMiddle {
            value: "__",
            flags: StringFlags(
                StringFlagsInner(
                    F_PREFIX,
                ),
            ),
        },
        89..91,
    ),
    (
        Lbrace,
        91..92,
    ),
    (
        NonLogicalNewline,
        92..93,
    ),
    (
        Name {
            name: "x",
        },
        97..98,
    ),
    (
        Colon,
        98..99,
    ),
    (
        FStringMiddle {
            value: "a",
            flags: StringFlags(
                StringFlagsInner(
                    F_PREFIX,
                ),
            ),
        },
        99..100,
    ),
    (
        NonLogicalNewline,
        100..101,
    ),
    (
        Name {
            name: "b",
        },
        109..110,
    ),
    (
        NonLogicalNewline,
        110..111,
    ),
    (
        Rbrace,
        111..112,
    ),
    (
        FStringMiddle {
            value: "__",
            flags: StringFlags(
                StringFlagsInner(
                    F_PREFIX,
                ),
            ),
        },
        112..114,
    ),
    (
        FStringEnd(
            StringFlags(
                StringFlagsInner(
                    F_PREFIX,
                ),
            ),
        ),
        114..115,
    ),
    (
        Newline,
        115..116,
    ),
]

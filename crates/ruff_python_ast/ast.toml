# This file is used by generate.py to autogenerate our Python AST data model.
#
# We have defined a Rust struct for each syntax node in `src/nodes.rs`.  Many of
# these nodes belong to groups. For instance, there is a `Stmt` group
# consisting of all of the syntax nodes that represent valid Python statements.
#
# There is a special group named `ungrouped` that contains syntax nodes that do
# not belong to any group.
#
# Each group is defined by two sections below. The `[GROUP]` section defines
# options that control the auto-generation for that group. The `[GROUP.nodes]`
# section defines which syntax nodes belong to that group. The name of each
# entry in the nodes section must match the name of the corresponding Rust
# struct. The value of each entry defines options that control the
# auto-generation for that syntax node.
#
# The following group options are available:
#
# add_suffix_to_is_methods: [true/false]
#   Controls the name of the is_foo methods of the group's enums.  If false (the
#   default), these methods will use the variant name in snake_case.  If true,
#   then the group prefix will be moved to the end before snake_casing.  (That
#   is, `StmtIf` will become `if_stmt`.)
#
# anynode_is_label: foo_bar
#   Controls the name of the AnyNodeRef::is_foo_bar method.  The default is the
#   group name in snake_case.
#
# rustdoc:
#   A rustdoc comment that is added to the group's enums.
#
# The following syntax node options are available:
#
# variant:
#   The name of the enum variant for this syntax node.  Defaults to the node
#   name with the group prefix removed.  (That is, `StmtIf` becomes `If`.)

[Mod]
anynode_is_label = "module"
rustdoc = "/// See also [mod](https://docs.python.org/3/library/ast.html#ast.mod)"

[Mod.nodes]
ModModule = {}
ModExpression = {}

[Stmt]
add_suffix_to_is_methods = true
anynode_is_label = "statement"
rustdoc = "/// See also [stmt](https://docs.python.org/3/library/ast.html#ast.stmt)"

[Stmt.nodes]
StmtFunctionDef = {}
StmtClassDef = {}
StmtReturn = {}
StmtDelete = {}
StmtTypeAlias = {}
StmtAssign = {}
StmtAugAssign = {}
StmtAnnAssign = {}
StmtFor = {}
StmtWhile = {}
StmtIf = {}
StmtWith = {}
StmtMatch = {}
StmtRaise = {}
StmtTry = {}
StmtAssert = {}
StmtImport = {}
StmtImportFrom = {}
StmtGlobal = {}
StmtNonlocal = {}
StmtExpr = {}
StmtPass = {}
StmtBreak = {}
StmtContinue = {}
StmtIpyEscapeCommand = {}

[Expr]
add_suffix_to_is_methods = true
anynode_is_label = "expression"
rustdoc = "/// See also [expr](https://docs.python.org/3/library/ast.html#ast.expr)"

[Expr.nodes.ExprBoolOp]
rustdoc = "/// See also [BoolOp](https://docs.python.org/3/library/ast.html#ast.BoolOp)"

[[Expr.nodes.ExprBoolOp.fields]]
name = "op"
type = "BoolOp"

[[Expr.nodes.ExprBoolOp.fields]]
name = "values"
type = "Expr"
seq = true

[Expr.nodes.ExprNamed]
rustdoc = "/// See also [NamedExpr](https://docs.python.org/3/library/ast.html#ast.NamedExpr)"

[[Expr.nodes.ExprNamed.fields]]
name = "target"
type = "Expr"

[[Expr.nodes.ExprNamed.fields]]
name = "value"
type = "Expr"

[Expr.nodes.ExprBinOp]
rustdoc = "/// See also [BinOp](https://docs.python.org/3/library/ast.html#ast.BinOp)"

[[Expr.nodes.ExprBinOp.fields]]
name = "left"
type = "Expr"

[[Expr.nodes.ExprBinOp.fields]]
name = "op"
type = "Operator"

[[Expr.nodes.ExprBinOp.fields]]
name = "right"
type = "Expr"

[Expr.nodes.ExprUnaryOp]
rustdoc = "/// See also [UnaryOp](https://docs.python.org/3/library/ast.html#ast.UnaryOp)"

[[Expr.nodes.ExprUnaryOp.fields]]
name = "op"
type = "UnaryOp"

[[Expr.nodes.ExprUnaryOp.fields]]
name = "operand"
type = "Expr"

[Expr.nodes.ExprLambda]
rustdoc = "/// See also [Lambda](https://docs.python.org/3/library/ast.html#ast.Lambda)"

[[Expr.nodes.ExprLambda.fields]]
name = "parameters"
type = "Box<crate::Parameters>"
optional = true

[[Expr.nodes.ExprLambda.fields]]
name = "body"
type = "Expr"

[Expr.nodes.ExprIf]
rustdoc = "/// See also [IfExp](https://docs.python.org/3/library/ast.html#ast.IfExp)"

[[Expr.nodes.ExprIf.fields]]
name = "test"
type = "Expr"

[[Expr.nodes.ExprIf.fields]]
name = "body"
type = "Expr"

[[Expr.nodes.ExprIf.fields]]
name = "orelse"
type = "Expr"

[Expr.nodes.ExprDict]
rustdoc = "/// See also [Dict](https://docs.python.org/3/library/ast.html#ast.Dict)"

[[Expr.nodes.ExprDict.fields]]
name = "items"
type = "DictItem"
seq = true

[Expr.nodes.ExprSet]
rustdoc = "/// See also [Set](https://docs.python.org/3/library/ast.html#ast.Set)"

[[Expr.nodes.ExprSet.fields]]
name = "elts"
type = "Expr"
seq = true

[Expr.nodes.ExprListComp]
rustdoc = "/// See also [ListComp](https://docs.python.org/3/library/ast.html#ast.ListComp)"

[[Expr.nodes.ExprListComp.fields]]
name = "elt"
type = "Expr"

[[Expr.nodes.ExprListComp.fields]]
name = "generators"
type = "Comprehension"
seq = true

[Expr.nodes.ExprSetComp]
rustdoc = "/// See also [SetComp](https://docs.python.org/3/library/ast.html#ast.SetComp)"

[[Expr.nodes.ExprSetComp.fields]]
name = "elt"
type = "Expr"

[[Expr.nodes.ExprSetComp.fields]]
name = "generators"
type = "Comprehension"
seq = true

[Expr.nodes.ExprDictComp]
rustdoc = "/// See also [DictComp](https://docs.python.org/3/library/ast.html#ast.DictComp)"

[[Expr.nodes.ExprDictComp.fields]]
name = "key"
type = "Expr"

[[Expr.nodes.ExprDictComp.fields]]
name = "value"
type = "Expr"

[[Expr.nodes.ExprDictComp.fields]]
name = "generators"
type = "Comprehension"
seq = true

[Expr.nodes.ExprGenerator]
rustdoc = "/// See also [GeneratorExp](https://docs.python.org/3/library/ast.html#ast.GeneratorExp)"

[[Expr.nodes.ExprGenerator.fields]]
name = "elt"
type = "Expr"

[[Expr.nodes.ExprGenerator.fields]]
name = "generators"
type = "Comprehension"
seq = true

[[Expr.nodes.ExprGenerator.fields]]
name = "parenthesized"
type = "bool"

[Expr.nodes.ExprAwait]
rustdoc = "/// See also [Await](https://docs.python.org/3/library/ast.html#ast.Await)"

[[Expr.nodes.ExprAwait.fields]]
name = "value"
type = "Expr"

[Expr.nodes.ExprYield]
rustdoc = "/// See also [Yield](https://docs.python.org/3/library/ast.html#ast.Yield)"

[[Expr.nodes.ExprYield.fields]]
name = "value"
type = "Expr"
optional = true

[Expr.nodes.ExprYieldFrom]
rustdoc = "/// See also [YieldFrom](https://docs.python.org/3/library/ast.html#ast.YieldFrom)"

[[Expr.nodes.ExprYieldFrom.fields]]
name = "value"
type = "Expr"

[Expr.nodes.ExprCompare]
rustdoc = "/// See also [Compare](https://docs.python.org/3/library/ast.html#ast.Compare)"

[[Expr.nodes.ExprCompare.fields]]
name = "left"
type = "Expr"

[[Expr.nodes.ExprCompare.fields]]
name = "ops"
type = "Box<[crate::CmpOp]>"

[[Expr.nodes.ExprCompare.fields]]
name = "comparators"
type = "Box<[Expr]>"

[Expr.nodes.ExprCall]
rustdoc = "/// See also [Call](https://docs.python.org/3/library/ast.html#ast.Call)"

[[Expr.nodes.ExprCall.fields]]
name = "func"
type = "Expr"

[[Expr.nodes.ExprCall.fields]]
name = "arguments"
type = "Arguments"

[Expr.nodes.ExprFString]
rustdoc = """/// An AST node that represents either a single-part f-string literal
/// or an implicitly concatenated f-string literal.
///
/// This type differs from the original Python AST ([JoinedStr]) in that it
/// doesn't join the implicitly concatenated parts into a single string. Instead,
/// it keeps them separate and provide various methods to access the parts.
///
/// [JoinedStr]: https://docs.python.org/3/library/ast.html#ast.JoinedStr"""

[[Expr.nodes.ExprFString.fields]]
name = "value"
type = "FStringValue"

[Expr.nodes.ExprStringLiteral]
rustdoc = """/// An AST node that represents either a single-part string literal
/// or an implicitly concatenated string literal."""

[[Expr.nodes.ExprStringLiteral.fields]]
name = "value"
type = "StringLiteralValue"

[Expr.nodes.ExprBytesLiteral]
rustdoc = """/// An AST node that represents either a single-part bytestring literal
/// or an implicitly concatenated bytestring literal."""

[[Expr.nodes.ExprBytesLiteral.fields]]
name = "value"
type = "BytesLiteralValue"

[[Expr.nodes.ExprNumberLiteral.fields]]
name = "value"
type = "Number"

[[Expr.nodes.ExprBooleanLiteral.fields]]
name = "value"
type = "bool"

[Expr.nodes.ExprBooleanLiteral]
derives = ["Default"]

[Expr.nodes.ExprNoneLiteral]
fields = []
derives = ["Default"]

[Expr.nodes.ExprEllipsisLiteral]
fields = []
derives = ["Default"]

[Expr.nodes.ExprAttribute]
rustdoc = "/// See also [Attribute](https://docs.python.org/3/library/ast.html#ast.Attribute)"

[[Expr.nodes.ExprAttribute.fields]]
name = "value"
type = "Expr"

[[Expr.nodes.ExprAttribute.fields]]
name = "attr"
type = "Identifier"

[[Expr.nodes.ExprAttribute.fields]]
name = "ctx"
type = "ExprContext"

[Expr.nodes.ExprSubscript]
rustdoc = "/// See also [Subscript](https://docs.python.org/3/library/ast.html#ast.Subscript)"

[[Expr.nodes.ExprSubscript.fields]]
name = "value"
type = "Expr"

[[Expr.nodes.ExprSubscript.fields]]
name = "slice"
type = "Expr"

[[Expr.nodes.ExprSubscript.fields]]
name = "ctx"
type = "ExprContext"

[Expr.nodes.ExprStarred]
rustdoc = "/// See also [Starred](https://docs.python.org/3/library/ast.html#ast.Starred)"

[[Expr.nodes.ExprStarred.fields]]
name = "value"
type = "Expr"

[[Expr.nodes.ExprStarred.fields]]
name = "ctx"
type = "ExprContext"

[Expr.nodes.ExprName]
rustdoc = "/// See also [Name](https://docs.python.org/3/library/ast.html#ast.Name)"

[[Expr.nodes.ExprName.fields]]
name = "id"
type = "Name"

[[Expr.nodes.ExprName.fields]]
name = "ctx"
type = "ExprContext"

[Expr.nodes.ExprList]
rustdoc = "/// See also [List](https://docs.python.org/3/library/ast.html#ast.List)"

[[Expr.nodes.ExprList.fields]]
name = "elts"
type = "Expr"
seq = true

[[Expr.nodes.ExprList.fields]]
name = "ctx"
type = "ExprContext"

[Expr.nodes.ExprTuple]
rustdoc = "/// See also [Tuple](https://docs.python.org/3/library/ast.html#ast.Tuple)"

[[Expr.nodes.ExprTuple.fields]]
name = "elts"
type = "Expr"
seq = true

[[Expr.nodes.ExprTuple.fields]]
name = "ctx"
type = "ExprContext"

[[Expr.nodes.ExprTuple.fields]]
name = "parenthesized"
type = "bool"

[Expr.nodes.ExprSlice]
rustdoc = "/// See also [Slice](https://docs.python.org/3/library/ast.html#ast.Slice)"

[[Expr.nodes.ExprSlice.fields]]
name = "lower"
type = "Expr"
optional = true

[[Expr.nodes.ExprSlice.fields]]
name = "upper"
type = "Expr"
optional = true

[[Expr.nodes.ExprSlice.fields]]
name = "step"
type = "Expr"
optional = true

[Expr.nodes.ExprIpyEscapeCommand]
rustdoc = """/// An AST node used to represent a IPython escape command at the expression level.
///
/// For example,
/// ```python
/// dir = !pwd
///
/// For more information related to terminology and syntax of escape commands,
///  see [`StmtIpyEscapeCommand`]."""

[[Expr.nodes.ExprIpyEscapeCommand.fields]]
name = "kind"
type = "IpyEscapeKind"

[[Expr.nodes.ExprIpyEscapeCommand.fields]]
name = "value"
type = "Box<str>"


[ExceptHandler]
rustdoc = "/// See also [excepthandler](https://docs.python.org/3/library/ast.html#ast.excepthandler)"

[ExceptHandler.nodes]
ExceptHandlerExceptHandler = {}

[FStringElement.nodes]
FStringExpressionElement = {variant = "Expression"}
FStringLiteralElement = {variant = "Literal"}

[Pattern]
rustdoc = "/// See also [pattern](https://docs.python.org/3/library/ast.html#ast.pattern)"

[Pattern.nodes]
PatternMatchValue = {}
PatternMatchSingleton = {}
PatternMatchSequence = {}
PatternMatchMapping = {}
PatternMatchClass = {}
PatternMatchStar = {}
PatternMatchAs = {}
PatternMatchOr = {}

[TypeParam]
rustdoc = "/// See also [type_param](https://docs.python.org/3/library/ast.html#ast.type_param)"

[TypeParam.nodes]
TypeParamTypeVar = {}
TypeParamTypeVarTuple = {}
TypeParamParamSpec = {}

[ungrouped.nodes]
FStringFormatSpec = {}
PatternArguments = {}
PatternKeyword = {}
Comprehension = {}
Arguments = {}
Parameters = {}
Parameter = {}
ParameterWithDefault = {}
Keyword = {}
Alias = {}
WithItem = {}
MatchCase = {}
Decorator = {}
ElifElseClause = {}
TypeParams = {}
FString = {}
StringLiteral = {}
BytesLiteral = {}
Identifier = {}

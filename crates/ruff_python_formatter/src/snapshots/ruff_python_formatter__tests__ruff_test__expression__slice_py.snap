---
source: crates/ruff_python_formatter/src/lib.rs
expression: snapshot
---
## Input
```py
# Handle comments both when lower and upper exist and when they don't
a1 = "a"[
    # a
    1  # b
    :  # c
    2  # d
]
a2 = "a"[
    # a
      # b
    :  # c
      # d
]

# Check all places where comments can exist
b1 = "b"[ # a
    # b
    1 # c
    # d
    : # e
    # f
    2 # g
    # h
    : # i
    # j
    3 # k
    # l
]

# Handle the spacing from the colon correctly with upper leading comments
c1 = "c"[
    1
    :  # e
    # f
    2
]
c2 = "c"[
    1
    :  # e
    2
]
c3 = "c"[
    1
    :
    # f
    2
]
c4 = "c"[
    1
    : # f
    2
]

# End of line comments
d1 = "d"[ # comment
    :
]
d2 = "d"[  # comment
    1:
]
d3 = "d"[
    1  # comment
    :
]

# Spacing around the colon(s)
def a():
    ...

e00 = "e"[:]
e01 = "e"[:1]
e02 = "e"[: a()]
e10 = "e"[1:]
e11 = "e"[1:1]
e12 = "e"[1 : a()]
e20 = "e"[a() :]
e21 = "e"[a() : 1]
e22 = "e"[a() : a()]
e200 = "e"[a() :: ]
e201 = "e"[a() :: 1]
e202 = "e"[a() :: a()]
e210 = "e"[a() : 1 :]
```



## Output
```py
# Handle comments both when lower and upper exist and when they don't
a1 = "NOT_YET_IMPLEMENTED_STRING"[
    # a
    1  # b
    :  # c
    2  # d
]
a2 = "NOT_YET_IMPLEMENTED_STRING"[
    # a
    # b
    :  # c
    # d
]

# Check all places where comments can exist
b1 = "NOT_YET_IMPLEMENTED_STRING"[  # a
    # b
    1  # c
    # d
    :  # e
    # f
    2  # g
    # h
    :  # i
    # j
    3  # k
    # l
]

# Handle the spacing from the colon correctly with upper leading comments
c1 = "NOT_YET_IMPLEMENTED_STRING"[
    1:  # e
    # f
    2
]
c2 = "NOT_YET_IMPLEMENTED_STRING"[
    1:  # e
    2
]
c3 = "NOT_YET_IMPLEMENTED_STRING"[
    1:
    # f
    2
]
c4 = "NOT_YET_IMPLEMENTED_STRING"[
    1:  # f
    2
]

# End of line comments
d1 = "NOT_YET_IMPLEMENTED_STRING"[  # comment
    :
]
d2 = "NOT_YET_IMPLEMENTED_STRING"[  # comment
    1:
]
d3 = "NOT_YET_IMPLEMENTED_STRING"[
    1  # comment
    :
]


# Spacing around the colon(s)
def a():
    ...


e00 = "NOT_YET_IMPLEMENTED_STRING"[:]
e01 = "NOT_YET_IMPLEMENTED_STRING"[:1]
e02 = "NOT_YET_IMPLEMENTED_STRING"[ : NOT_IMPLEMENTED_call()]
e10 = "NOT_YET_IMPLEMENTED_STRING"[1:]
e11 = "NOT_YET_IMPLEMENTED_STRING"[1:1]
e12 = "NOT_YET_IMPLEMENTED_STRING"[1 : NOT_IMPLEMENTED_call()]
e20 = "NOT_YET_IMPLEMENTED_STRING"[NOT_IMPLEMENTED_call() :]
e21 = "NOT_YET_IMPLEMENTED_STRING"[NOT_IMPLEMENTED_call() : 1]
e22 = "NOT_YET_IMPLEMENTED_STRING"[NOT_IMPLEMENTED_call() : NOT_IMPLEMENTED_call()]
e200 = "NOT_YET_IMPLEMENTED_STRING"[NOT_IMPLEMENTED_call() : :]
e201 = "NOT_YET_IMPLEMENTED_STRING"[NOT_IMPLEMENTED_call() :: 1]
e202 = "NOT_YET_IMPLEMENTED_STRING"[NOT_IMPLEMENTED_call() :: NOT_IMPLEMENTED_call()]
e210 = "NOT_YET_IMPLEMENTED_STRING"[NOT_IMPLEMENTED_call() : 1 :]
```



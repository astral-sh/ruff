---
source: crates/ruff_python_formatter/src/lib.rs
expression: snapshot
input_file: crates/ruff_python_formatter/resources/test/fixtures/black/simple_cases/remove_newline_after_code_block_open.py
---
## Input

```py
import random


def foo1():

    print("The newline above me should be deleted!")


def foo2():



    print("All the newlines above me should be deleted!")


def foo3():

    print("No newline above me!")

    print("There is a newline above me, and that's OK!")


def foo4():

    # There is a comment here

    print("The newline above me should not be deleted!")


class Foo:
    def bar(self):

        print("The newline above me should be deleted!")


for i in range(5):

    print(f"{i}) The line above me should be removed!")


for i in range(5):



    print(f"{i}) The lines above me should be removed!")


for i in range(5):

    for j in range(7):

        print(f"{i}) The lines above me should be removed!")


if random.randint(0, 3) == 0:

    print("The new line above me is about to be removed!")


if random.randint(0, 3) == 0:




    print("The new lines above me is about to be removed!")


if random.randint(0, 3) == 0:
    if random.uniform(0, 1) > 0.5:
        print("Two lines above me are about to be removed!")


while True:

    print("The newline above me should be deleted!")


while True:



    print("The newlines above me should be deleted!")


while True:

    while False:

        print("The newlines above me should be deleted!")


with open("/path/to/file.txt", mode="w") as file:

    file.write("The new line above me is about to be removed!")


with open("/path/to/file.txt", mode="w") as file:



    file.write("The new lines above me is about to be removed!")


with open("/path/to/file.txt", mode="r") as read_file:

    with open("/path/to/output_file.txt", mode="w") as write_file:

        write_file.writelines(read_file.readlines())
```

## Black Differences

```diff
--- Black
+++ Ruff
@@ -1,78 +1,56 @@
-import random
+NOT_YET_IMPLEMENTED_StmtImport
 
 
-def foo1():
-    print("The newline above me should be deleted!")
+NOT_YET_IMPLEMENTED_StmtFunctionDef
 
 
-def foo2():
-    print("All the newlines above me should be deleted!")
+NOT_YET_IMPLEMENTED_StmtFunctionDef
 
 
-def foo3():
-    print("No newline above me!")
+NOT_YET_IMPLEMENTED_StmtFunctionDef
 
-    print("There is a newline above me, and that's OK!")
 
+NOT_YET_IMPLEMENTED_StmtFunctionDef
 
-def foo4():
-    # There is a comment here
 
-    print("The newline above me should not be deleted!")
+NOT_YET_IMPLEMENTED_StmtClassDef
 
 
-class Foo:
-    def bar(self):
-        print("The newline above me should be deleted!")
+NOT_YET_IMPLEMENTED_StmtFor
 
 
-for i in range(5):
-    print(f"{i}) The line above me should be removed!")
+NOT_YET_IMPLEMENTED_StmtFor
 
 
-for i in range(5):
-    print(f"{i}) The lines above me should be removed!")
+NOT_YET_IMPLEMENTED_StmtFor
 
 
-for i in range(5):
-    for j in range(7):
-        print(f"{i}) The lines above me should be removed!")
+NOT_YET_IMPLEMENTED_StmtIf
 
 
-if random.randint(0, 3) == 0:
-    print("The new line above me is about to be removed!")
-
-
-if random.randint(0, 3) == 0:
-    print("The new lines above me is about to be removed!")
+NOT_YET_IMPLEMENTED_StmtIf
 
 
-if random.randint(0, 3) == 0:
-    if random.uniform(0, 1) > 0.5:
-        print("Two lines above me are about to be removed!")
+NOT_YET_IMPLEMENTED_StmtIf
 
 
-while True:
-    print("The newline above me should be deleted!")
+while NOT_YET_IMPLEMENTED_ExprConstant:
+    NOT_YET_IMPLEMENTED_ExprCall
 
 
-while True:
-    print("The newlines above me should be deleted!")
+while NOT_YET_IMPLEMENTED_ExprConstant:
+    NOT_YET_IMPLEMENTED_ExprCall
 
 
-while True:
-    while False:
-        print("The newlines above me should be deleted!")
+while NOT_YET_IMPLEMENTED_ExprConstant:
+    while NOT_YET_IMPLEMENTED_ExprConstant:
+        NOT_YET_IMPLEMENTED_ExprCall
 
 
-with open("/path/to/file.txt", mode="w") as file:
-    file.write("The new line above me is about to be removed!")
+NOT_YET_IMPLEMENTED_StmtWith
 
 
-with open("/path/to/file.txt", mode="w") as file:
-    file.write("The new lines above me is about to be removed!")
+NOT_YET_IMPLEMENTED_StmtWith
 
 
-with open("/path/to/file.txt", mode="r") as read_file:
-    with open("/path/to/output_file.txt", mode="w") as write_file:
-        write_file.writelines(read_file.readlines())
+NOT_YET_IMPLEMENTED_StmtWith
```

## Ruff Output

```py
NOT_YET_IMPLEMENTED_StmtImport


NOT_YET_IMPLEMENTED_StmtFunctionDef


NOT_YET_IMPLEMENTED_StmtFunctionDef


NOT_YET_IMPLEMENTED_StmtFunctionDef


NOT_YET_IMPLEMENTED_StmtFunctionDef


NOT_YET_IMPLEMENTED_StmtClassDef


NOT_YET_IMPLEMENTED_StmtFor


NOT_YET_IMPLEMENTED_StmtFor


NOT_YET_IMPLEMENTED_StmtFor


NOT_YET_IMPLEMENTED_StmtIf


NOT_YET_IMPLEMENTED_StmtIf


NOT_YET_IMPLEMENTED_StmtIf


while NOT_YET_IMPLEMENTED_ExprConstant:
    NOT_YET_IMPLEMENTED_ExprCall


while NOT_YET_IMPLEMENTED_ExprConstant:
    NOT_YET_IMPLEMENTED_ExprCall


while NOT_YET_IMPLEMENTED_ExprConstant:
    while NOT_YET_IMPLEMENTED_ExprConstant:
        NOT_YET_IMPLEMENTED_ExprCall


NOT_YET_IMPLEMENTED_StmtWith


NOT_YET_IMPLEMENTED_StmtWith


NOT_YET_IMPLEMENTED_StmtWith
```

## Black Output

```py
import random


def foo1():
    print("The newline above me should be deleted!")


def foo2():
    print("All the newlines above me should be deleted!")


def foo3():
    print("No newline above me!")

    print("There is a newline above me, and that's OK!")


def foo4():
    # There is a comment here

    print("The newline above me should not be deleted!")


class Foo:
    def bar(self):
        print("The newline above me should be deleted!")


for i in range(5):
    print(f"{i}) The line above me should be removed!")


for i in range(5):
    print(f"{i}) The lines above me should be removed!")


for i in range(5):
    for j in range(7):
        print(f"{i}) The lines above me should be removed!")


if random.randint(0, 3) == 0:
    print("The new line above me is about to be removed!")


if random.randint(0, 3) == 0:
    print("The new lines above me is about to be removed!")


if random.randint(0, 3) == 0:
    if random.uniform(0, 1) > 0.5:
        print("Two lines above me are about to be removed!")


while True:
    print("The newline above me should be deleted!")


while True:
    print("The newlines above me should be deleted!")


while True:
    while False:
        print("The newlines above me should be deleted!")


with open("/path/to/file.txt", mode="w") as file:
    file.write("The new line above me is about to be removed!")


with open("/path/to/file.txt", mode="w") as file:
    file.write("The new lines above me is about to be removed!")


with open("/path/to/file.txt", mode="r") as read_file:
    with open("/path/to/output_file.txt", mode="w") as write_file:
        write_file.writelines(read_file.readlines())
```



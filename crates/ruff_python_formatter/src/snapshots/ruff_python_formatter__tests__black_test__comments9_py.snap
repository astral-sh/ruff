---
source: crates/ruff_python_formatter/src/lib.rs
expression: snapshot
input_file: crates/ruff_python_formatter/resources/test/fixtures/black/simple_cases/comments9.py
---
## Input

```py
# Test for https://github.com/psf/black/issues/246.

some = statement
# This comment should be split from the statement above by two lines.
def function():
    pass


some = statement
# This multiline comments section
# should be split from the statement
# above by two lines.
def function():
    pass


some = statement
# This comment should be split from the statement above by two lines.
async def async_function():
    pass


some = statement
# This comment should be split from the statement above by two lines.
class MyClass:
    pass


some = statement
# This should be stick to the statement above

# This should be split from the above by two lines
class MyClassWithComplexLeadingComments:
    pass


class ClassWithDocstring:
    """A docstring."""
# Leading comment after a class with just a docstring
class MyClassAfterAnotherClassWithDocstring:
    pass


some = statement
# leading 1
@deco1
# leading 2
# leading 2 extra
@deco2(with_args=True)
# leading 3
@deco3
# leading 4
def decorated():
    pass


some = statement
# leading 1
@deco1
# leading 2
@deco2(with_args=True)

# leading 3 that already has an empty line
@deco3
# leading 4
def decorated_with_split_leading_comments():
    pass


some = statement
# leading 1
@deco1
# leading 2
@deco2(with_args=True)
# leading 3
@deco3

# leading 4 that already has an empty line
def decorated_with_split_leading_comments():
    pass


def main():
    if a:
        # Leading comment before inline function
        def inline():
            pass
        # Another leading comment
        def another_inline():
            pass
    else:
        # More leading comments
        def inline_after_else():
            pass


if a:
    # Leading comment before "top-level inline" function
    def top_level_quote_inline():
        pass
    # Another leading comment
    def another_top_level_quote_inline_inline():
        pass
else:
    # More leading comments
    def top_level_quote_inline_after_else():
        pass


class MyClass:
    # First method has no empty lines between bare class def.
    # More comments.
    def first_method(self):
        pass


# Regression test for https://github.com/psf/black/issues/3454.
def foo():
    pass
    # Trailing comment that belongs to this function


@decorator1
@decorator2  # fmt: skip
def bar():
    pass


# Regression test for https://github.com/psf/black/issues/3454.
def foo():
    pass
    # Trailing comment that belongs to this function.
    # NOTE this comment only has one empty line below, and the formatter
    # should enforce two blank lines.

@decorator1
# A standalone comment
def bar():
    pass
```

## Black Differences

```diff
--- Black
+++ Ruff
@@ -5,7 +5,7 @@
 
 # This comment should be split from the statement above by two lines.
 def function():
-    pass
+    NOT_YET_IMPLEMENTED_StmtPass
 
 
 some = statement
@@ -15,7 +15,7 @@
 # should be split from the statement
 # above by two lines.
 def function():
-    pass
+    NOT_YET_IMPLEMENTED_StmtPass
 
 
 some = statement
@@ -23,15 +23,14 @@
 
 # This comment should be split from the statement above by two lines.
 async def async_function():
-    pass
+    NOT_YET_IMPLEMENTED_StmtPass
 
 
 some = statement
 
 
 # This comment should be split from the statement above by two lines.
-class MyClass:
-    pass
+NOT_YET_IMPLEMENTED_StmtClassDef
 
 
 some = statement
@@ -39,17 +38,14 @@
 
 
 # This should be split from the above by two lines
-class MyClassWithComplexLeadingComments:
-    pass
+NOT_YET_IMPLEMENTED_StmtClassDef
 
 
-class ClassWithDocstring:
-    """A docstring."""
+NOT_YET_IMPLEMENTED_StmtClassDef
 
 
 # Leading comment after a class with just a docstring
-class MyClassAfterAnotherClassWithDocstring:
-    pass
+NOT_YET_IMPLEMENTED_StmtClassDef
 
 
 some = statement
@@ -59,12 +55,12 @@
 @deco1
 # leading 2
 # leading 2 extra
-@deco2(with_args=True)
+@NOT_IMPLEMENTED_call()
 # leading 3
 @deco3
 # leading 4
 def decorated():
-    pass
+    NOT_YET_IMPLEMENTED_StmtPass
 
 
 some = statement
@@ -73,13 +69,13 @@
 # leading 1
 @deco1
 # leading 2
-@deco2(with_args=True)
+@NOT_IMPLEMENTED_call()
 
 # leading 3 that already has an empty line
 @deco3
 # leading 4
 def decorated_with_split_leading_comments():
-    pass
+    NOT_YET_IMPLEMENTED_StmtPass
 
 
 some = statement
@@ -88,68 +84,40 @@
 # leading 1
 @deco1
 # leading 2
-@deco2(with_args=True)
+@NOT_IMPLEMENTED_call()
 # leading 3
 @deco3
 
 # leading 4 that already has an empty line
 def decorated_with_split_leading_comments():
-    pass
+    NOT_YET_IMPLEMENTED_StmtPass
 
 
 def main():
-    if a:
-        # Leading comment before inline function
-        def inline():
-            pass
-
-        # Another leading comment
-        def another_inline():
-            pass
+    NOT_YET_IMPLEMENTED_StmtIf
 
-    else:
-        # More leading comments
-        def inline_after_else():
-            pass
 
-
-if a:
-    # Leading comment before "top-level inline" function
-    def top_level_quote_inline():
-        pass
+NOT_YET_IMPLEMENTED_StmtIf
 
-    # Another leading comment
-    def another_top_level_quote_inline_inline():
-        pass
 
-else:
-    # More leading comments
-    def top_level_quote_inline_after_else():
-        pass
-
-
-class MyClass:
-    # First method has no empty lines between bare class def.
-    # More comments.
-    def first_method(self):
-        pass
+NOT_YET_IMPLEMENTED_StmtClassDef
 
 
 # Regression test for https://github.com/psf/black/issues/3454.
 def foo():
-    pass
+    NOT_YET_IMPLEMENTED_StmtPass
     # Trailing comment that belongs to this function
 
 
 @decorator1
 @decorator2  # fmt: skip
 def bar():
-    pass
+    NOT_YET_IMPLEMENTED_StmtPass
 
 
 # Regression test for https://github.com/psf/black/issues/3454.
 def foo():
-    pass
+    NOT_YET_IMPLEMENTED_StmtPass
     # Trailing comment that belongs to this function.
     # NOTE this comment only has one empty line below, and the formatter
     # should enforce two blank lines.
@@ -158,4 +126,4 @@
 @decorator1
 # A standalone comment
 def bar():
-    pass
+    NOT_YET_IMPLEMENTED_StmtPass
```

## Ruff Output

```py
# Test for https://github.com/psf/black/issues/246.

some = statement


# This comment should be split from the statement above by two lines.
def function():
    NOT_YET_IMPLEMENTED_StmtPass


some = statement


# This multiline comments section
# should be split from the statement
# above by two lines.
def function():
    NOT_YET_IMPLEMENTED_StmtPass


some = statement


# This comment should be split from the statement above by two lines.
async def async_function():
    NOT_YET_IMPLEMENTED_StmtPass


some = statement


# This comment should be split from the statement above by two lines.
NOT_YET_IMPLEMENTED_StmtClassDef


some = statement
# This should be stick to the statement above


# This should be split from the above by two lines
NOT_YET_IMPLEMENTED_StmtClassDef


NOT_YET_IMPLEMENTED_StmtClassDef


# Leading comment after a class with just a docstring
NOT_YET_IMPLEMENTED_StmtClassDef


some = statement


# leading 1
@deco1
# leading 2
# leading 2 extra
@NOT_IMPLEMENTED_call()
# leading 3
@deco3
# leading 4
def decorated():
    NOT_YET_IMPLEMENTED_StmtPass


some = statement


# leading 1
@deco1
# leading 2
@NOT_IMPLEMENTED_call()

# leading 3 that already has an empty line
@deco3
# leading 4
def decorated_with_split_leading_comments():
    NOT_YET_IMPLEMENTED_StmtPass


some = statement


# leading 1
@deco1
# leading 2
@NOT_IMPLEMENTED_call()
# leading 3
@deco3

# leading 4 that already has an empty line
def decorated_with_split_leading_comments():
    NOT_YET_IMPLEMENTED_StmtPass


def main():
    NOT_YET_IMPLEMENTED_StmtIf


NOT_YET_IMPLEMENTED_StmtIf


NOT_YET_IMPLEMENTED_StmtClassDef


# Regression test for https://github.com/psf/black/issues/3454.
def foo():
    NOT_YET_IMPLEMENTED_StmtPass
    # Trailing comment that belongs to this function


@decorator1
@decorator2  # fmt: skip
def bar():
    NOT_YET_IMPLEMENTED_StmtPass


# Regression test for https://github.com/psf/black/issues/3454.
def foo():
    NOT_YET_IMPLEMENTED_StmtPass
    # Trailing comment that belongs to this function.
    # NOTE this comment only has one empty line below, and the formatter
    # should enforce two blank lines.


@decorator1
# A standalone comment
def bar():
    NOT_YET_IMPLEMENTED_StmtPass
```

## Black Output

```py
# Test for https://github.com/psf/black/issues/246.

some = statement


# This comment should be split from the statement above by two lines.
def function():
    pass


some = statement


# This multiline comments section
# should be split from the statement
# above by two lines.
def function():
    pass


some = statement


# This comment should be split from the statement above by two lines.
async def async_function():
    pass


some = statement


# This comment should be split from the statement above by two lines.
class MyClass:
    pass


some = statement
# This should be stick to the statement above


# This should be split from the above by two lines
class MyClassWithComplexLeadingComments:
    pass


class ClassWithDocstring:
    """A docstring."""


# Leading comment after a class with just a docstring
class MyClassAfterAnotherClassWithDocstring:
    pass


some = statement


# leading 1
@deco1
# leading 2
# leading 2 extra
@deco2(with_args=True)
# leading 3
@deco3
# leading 4
def decorated():
    pass


some = statement


# leading 1
@deco1
# leading 2
@deco2(with_args=True)

# leading 3 that already has an empty line
@deco3
# leading 4
def decorated_with_split_leading_comments():
    pass


some = statement


# leading 1
@deco1
# leading 2
@deco2(with_args=True)
# leading 3
@deco3

# leading 4 that already has an empty line
def decorated_with_split_leading_comments():
    pass


def main():
    if a:
        # Leading comment before inline function
        def inline():
            pass

        # Another leading comment
        def another_inline():
            pass

    else:
        # More leading comments
        def inline_after_else():
            pass


if a:
    # Leading comment before "top-level inline" function
    def top_level_quote_inline():
        pass

    # Another leading comment
    def another_top_level_quote_inline_inline():
        pass

else:
    # More leading comments
    def top_level_quote_inline_after_else():
        pass


class MyClass:
    # First method has no empty lines between bare class def.
    # More comments.
    def first_method(self):
        pass


# Regression test for https://github.com/psf/black/issues/3454.
def foo():
    pass
    # Trailing comment that belongs to this function


@decorator1
@decorator2  # fmt: skip
def bar():
    pass


# Regression test for https://github.com/psf/black/issues/3454.
def foo():
    pass
    # Trailing comment that belongs to this function.
    # NOTE this comment only has one empty line below, and the formatter
    # should enforce two blank lines.


@decorator1
# A standalone comment
def bar():
    pass
```



---
source: crates/ruff_python_formatter/src/lib.rs
expression: snapshot
input_file: crates/ruff_python_formatter/resources/test/fixtures/black/simple_cases/function2.py
---
## Input

```py
def f(
  a,
  **kwargs,
) -> A:
    with cache_dir():
        if something:
            result = (
                CliRunner().invoke(black.main, [str(src1), str(src2), "--diff", "--check"])
            )
    limited.append(-limited.pop())  # negate top
    return A(
        very_long_argument_name1=very_long_value_for_the_argument,
        very_long_argument_name2=-very.long.value.for_the_argument,
        **kwargs,
    )
def g():
    "Docstring."
    def inner():
        pass
    print("Inner defs should breathe a little.")
def h():
    def inner():
        pass
    print("Inner defs should breathe a little.")


if os.name == "posix":
    import termios
    def i_should_be_followed_by_only_one_newline():
        pass
elif os.name == "nt":
    try:
        import msvcrt
        def i_should_be_followed_by_only_one_newline():
            pass

    except ImportError:

        def i_should_be_followed_by_only_one_newline():
            pass

elif False:

    class IHopeYouAreHavingALovelyDay:
        def __call__(self):
            print("i_should_be_followed_by_only_one_newline")
else:

    def foo():
        pass

with hmm_but_this_should_get_two_preceding_newlines():
    pass
```

## Black Differences

```diff
--- Black
+++ Ruff
@@ -1,65 +1,12 @@
-def f(
-    a,
-    **kwargs,
-) -> A:
-    with cache_dir():
-        if something:
-            result = CliRunner().invoke(
-                black.main, [str(src1), str(src2), "--diff", "--check"]
-            )
-    limited.append(-limited.pop())  # negate top
-    return A(
-        very_long_argument_name1=very_long_value_for_the_argument,
-        very_long_argument_name2=-very.long.value.for_the_argument,
-        **kwargs,
-    )
-
-
-def g():
-    "Docstring."
-
-    def inner():
-        pass
-
-    print("Inner defs should breathe a little.")
-
-
-def h():
-    def inner():
-        pass
-
-    print("Inner defs should breathe a little.")
-
-
-if os.name == "posix":
-    import termios
-
-    def i_should_be_followed_by_only_one_newline():
-        pass
-
-elif os.name == "nt":
-    try:
-        import msvcrt
-
-        def i_should_be_followed_by_only_one_newline():
-            pass
+NOT_YET_IMPLEMENTED_StmtFunctionDef
 
-    except ImportError:
 
-        def i_should_be_followed_by_only_one_newline():
-            pass
-
-elif False:
+NOT_YET_IMPLEMENTED_StmtFunctionDef
 
-    class IHopeYouAreHavingALovelyDay:
-        def __call__(self):
-            print("i_should_be_followed_by_only_one_newline")
 
-else:
+NOT_YET_IMPLEMENTED_StmtFunctionDef
 
-    def foo():
-        pass
 
+NOT_YET_IMPLEMENTED_StmtIf
 
-with hmm_but_this_should_get_two_preceding_newlines():
-    pass
+NOT_YET_IMPLEMENTED_StmtWith
```

## Ruff Output

```py
NOT_YET_IMPLEMENTED_StmtFunctionDef


NOT_YET_IMPLEMENTED_StmtFunctionDef


NOT_YET_IMPLEMENTED_StmtFunctionDef


NOT_YET_IMPLEMENTED_StmtIf

NOT_YET_IMPLEMENTED_StmtWith
```

## Black Output

```py
def f(
    a,
    **kwargs,
) -> A:
    with cache_dir():
        if something:
            result = CliRunner().invoke(
                black.main, [str(src1), str(src2), "--diff", "--check"]
            )
    limited.append(-limited.pop())  # negate top
    return A(
        very_long_argument_name1=very_long_value_for_the_argument,
        very_long_argument_name2=-very.long.value.for_the_argument,
        **kwargs,
    )


def g():
    "Docstring."

    def inner():
        pass

    print("Inner defs should breathe a little.")


def h():
    def inner():
        pass

    print("Inner defs should breathe a little.")


if os.name == "posix":
    import termios

    def i_should_be_followed_by_only_one_newline():
        pass

elif os.name == "nt":
    try:
        import msvcrt

        def i_should_be_followed_by_only_one_newline():
            pass

    except ImportError:

        def i_should_be_followed_by_only_one_newline():
            pass

elif False:

    class IHopeYouAreHavingALovelyDay:
        def __call__(self):
            print("i_should_be_followed_by_only_one_newline")

else:

    def foo():
        pass


with hmm_but_this_should_get_two_preceding_newlines():
    pass
```



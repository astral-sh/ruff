---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/black/miscellaneous/debug_visitor.py
---
## Input

```py
@dataclass
class DebugVisitor(Visitor[T]):
    tree_depth: int = 0

    def visit_default(self, node: LN) -> Iterator[T]:
        indent = ' ' * (2 * self.tree_depth)
        if isinstance(node, Node):
            _type = type_repr(node.type)
            out(f'{indent}{_type}', fg='yellow')
            self.tree_depth += 1
            for child in node.children:
                yield from self.visit(child)

            self.tree_depth -= 1
            out(f'{indent}/{_type}', fg='yellow', bold=False)
        else:
            _type = token.tok_name.get(node.type, str(node.type))
            out(f'{indent}{_type}', fg='blue', nl=False)
            if node.prefix:
                # We don't have to handle prefixes for `Node` objects since
                # that delegates to the first child anyway.
                out(f' {node.prefix!r}', fg='green', bold=False, nl=False)
            out(f' {node.value!r}', fg='blue', bold=False)

    @classmethod
    def show(cls, code: str) -> None:
        """Pretty-prints a given string of `code`.

        Convenience method for debugging.
        """
        v: DebugVisitor[None] = DebugVisitor()
        list(v.visit(lib2to3_parse(code)))
```

## Black Differences

```diff
--- Black
+++ Ruff
@@ -1,26 +1,26 @@
 @dataclass
 class DebugVisitor(Visitor[T]):
-    tree_depth: int = 0
+    NOT_YET_IMPLEMENTED_StmtAnnAssign
 
     def visit_default(self, node: LN) -> Iterator[T]:
-        indent = ' ' * (2 * self.tree_depth)
+        indent = " " * (2 * self.tree_depth)
         if isinstance(node, Node):
             _type = type_repr(node.type)
-            out(f'{indent}{_type}', fg='yellow')
-            self.tree_depth += 1
+            out(NOT_YET_IMPLEMENTED_ExprJoinedStr, fg="yellow")
+            NOT_YET_IMPLEMENTED_StmtAugAssign
             for child in node.children:
-                yield from self.visit(child)
+                NOT_YET_IMPLEMENTED_ExprYieldFrom
 
-            self.tree_depth -= 1
-            out(f'{indent}/{_type}', fg='yellow', bold=False)
+            NOT_YET_IMPLEMENTED_StmtAugAssign
+            out(NOT_YET_IMPLEMENTED_ExprJoinedStr, fg="yellow", bold=False)
         else:
             _type = token.tok_name.get(node.type, str(node.type))
-            out(f'{indent}{_type}', fg='blue', nl=False)
+            out(NOT_YET_IMPLEMENTED_ExprJoinedStr, fg="blue", nl=False)
             if node.prefix:
                 # We don't have to handle prefixes for `Node` objects since
                 # that delegates to the first child anyway.
-                out(f' {node.prefix!r}', fg='green', bold=False, nl=False)
-            out(f' {node.value!r}', fg='blue', bold=False)
+                out(NOT_YET_IMPLEMENTED_ExprJoinedStr, fg="green", bold=False, nl=False)
+            out(NOT_YET_IMPLEMENTED_ExprJoinedStr, fg="blue", bold=False)
 
     @classmethod
     def show(cls, code: str) -> None:
@@ -28,5 +28,5 @@
 
         Convenience method for debugging.
         """
-        v: DebugVisitor[None] = DebugVisitor()
+        NOT_YET_IMPLEMENTED_StmtAnnAssign
         list(v.visit(lib2to3_parse(code)))
```

## Ruff Output

```py
@dataclass
class DebugVisitor(Visitor[T]):
    NOT_YET_IMPLEMENTED_StmtAnnAssign

    def visit_default(self, node: LN) -> Iterator[T]:
        indent = " " * (2 * self.tree_depth)
        if isinstance(node, Node):
            _type = type_repr(node.type)
            out(NOT_YET_IMPLEMENTED_ExprJoinedStr, fg="yellow")
            NOT_YET_IMPLEMENTED_StmtAugAssign
            for child in node.children:
                NOT_YET_IMPLEMENTED_ExprYieldFrom

            NOT_YET_IMPLEMENTED_StmtAugAssign
            out(NOT_YET_IMPLEMENTED_ExprJoinedStr, fg="yellow", bold=False)
        else:
            _type = token.tok_name.get(node.type, str(node.type))
            out(NOT_YET_IMPLEMENTED_ExprJoinedStr, fg="blue", nl=False)
            if node.prefix:
                # We don't have to handle prefixes for `Node` objects since
                # that delegates to the first child anyway.
                out(NOT_YET_IMPLEMENTED_ExprJoinedStr, fg="green", bold=False, nl=False)
            out(NOT_YET_IMPLEMENTED_ExprJoinedStr, fg="blue", bold=False)

    @classmethod
    def show(cls, code: str) -> None:
        """Pretty-prints a given string of `code`.

        Convenience method for debugging.
        """
        NOT_YET_IMPLEMENTED_StmtAnnAssign
        list(v.visit(lib2to3_parse(code)))
```

## Black Output

```py
@dataclass
class DebugVisitor(Visitor[T]):
    tree_depth: int = 0

    def visit_default(self, node: LN) -> Iterator[T]:
        indent = ' ' * (2 * self.tree_depth)
        if isinstance(node, Node):
            _type = type_repr(node.type)
            out(f'{indent}{_type}', fg='yellow')
            self.tree_depth += 1
            for child in node.children:
                yield from self.visit(child)

            self.tree_depth -= 1
            out(f'{indent}/{_type}', fg='yellow', bold=False)
        else:
            _type = token.tok_name.get(node.type, str(node.type))
            out(f'{indent}{_type}', fg='blue', nl=False)
            if node.prefix:
                # We don't have to handle prefixes for `Node` objects since
                # that delegates to the first child anyway.
                out(f' {node.prefix!r}', fg='green', bold=False, nl=False)
            out(f' {node.value!r}', fg='blue', bold=False)

    @classmethod
    def show(cls, code: str) -> None:
        """Pretty-prints a given string of `code`.

        Convenience method for debugging.
        """
        v: DebugVisitor[None] = DebugVisitor()
        list(v.visit(lib2to3_parse(code)))
```



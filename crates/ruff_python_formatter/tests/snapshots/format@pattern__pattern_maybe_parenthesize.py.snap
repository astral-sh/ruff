---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/ruff/pattern/pattern_maybe_parenthesize.py
snapshot_kind: text
---
## Input
```python
# Patterns that use BestFit should be parenthesized if they exceed the configured line width
# but fit within parentheses.
match x:
    case (
        "averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsPar"
    ):
        pass


match x:
    case (
        b"averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsPa"
    ):
        pass

match x:
    case (
        f"averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsPa"
    ):
        pass


match x:
    case (
        5444444444444444444444444444444444444444444444444444444444444444444444444444444j
    ):
        pass


match x:
    case (
        5444444444444444444444444444444444444444444444444444444444444444444444444444444
    ):
        pass


match x:
    case (
        5.44444444444444444444444444444444444444444444444444444444444444444444444444444
    ):
        pass


match x:
    case (
        averyLongIdentThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsParenth
    ):
        pass


# But they aren't parenthesized when they exceed the line length even parenthesized
match x:
    case "averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsParenthesized":
        pass


match x:
    case b"averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsParenthesized":
        pass

match x:
    case f"averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsParenthesized":
        pass


match x:
    case 54444444444444444444444444444444444444444444444444444444444444444444444444444444444j:
        pass


match x:
    case 5444444444444444444444444444444444444444444444444444444444444444444444444444444444:
        pass


match x:
    case 5.444444444444444444444444444444444444444444444444444444444444444444444444444444444:
        pass


match x:
    case averyLongIdentifierThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsParenthesized:
        pass


# It uses the Multiline layout when there's an alias.
match x:
    case (
        averyLongIdentifierThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsParenthe as b
    ):
        pass



match x:
    case (
        "an implicit concatenated" "string literal" "in a match case" "that goes over multiple lines"
    ):
        pass


## Patterns ending with a sequence, mapping, class, or parenthesized pattern should break the parenthesized-like pattern first
match x:
    case A | [
        aaaaaa,
        bbbbbbbbbbbbbbbb,
        cccccccccccccccccc,
        ddddddddddddddddddddddddddd,
    ]:
        pass

match x:
    case A | (
        aaaaaa,
        bbbbbbbbbbbbbbbb,
        cccccccccccccccccc,
        ddddddddddddddddddddddddddd,
    ):
        pass


match x:
    case A | {
        "a": aaaaaa,
        "b": bbbbbbbbbbbbbbbb,
        "c": cccccccccccccccccc,
        "d": ddddddddddddddddddddddddddd,
    }:
        pass


match x:
    case A | Class(
        aaaaaa,
        bbbbbbbbbbbbbbbb,
        cccccccccccccccccc,
        ddddddddddddddddddddddddddd,
    ):
        pass



match x:
    case A | (
        aaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbbbb.cccccccccccccccccccccccccccc.ddddddddddddddddddddddd
    ):
        pass


## Patterns starting with a sequence, mapping, class, or parenthesized pattern should break the parenthesized-like pattern first
match x:
    case [
         aaaaaa,
         bbbbbbbbbbbbbbbb,
         cccccccccccccccccc,
         ddddddddddddddddddddddddddd,
     ] | A:
        pass

match x:
    case (
         aaaaaa,
         bbbbbbbbbbbbbbbb,
         cccccccccccccccccc,
         ddddddddddddddddddddddddddd,
     ) | A:
        pass


match x:
    case {
         "a": aaaaaa,
         "b": bbbbbbbbbbbbbbbb,
         "c": cccccccccccccccccc,
         "d": ddddddddddddddddddddddddddd,
         } | A:
        pass


match x:
    case Class(
        aaaaaa,
        bbbbbbbbbbbbbbbb,
        cccccccccccccccccc,
        ddddddddddddddddddddddddddd,
    ):
        pass


## Not for non-parenthesized sequence patterns
match x:
    case (
        (1) | aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
        ccccccccccccccccccccccccccccccccc,
    ):
        pass

## Parenthesize patterns that start with a token
match x:
    case (
    A(
        aaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbbbb.cccccccccccccccccccccccccccc.ddddddddddddddddddddddd
    )
    | B
    ):
        pass


## Always use parentheses for implicitly concatenated strings
match x:
    case (
        "implicit"
        "concatenated"
        "string"
        | [aaaaaa, bbbbbbbbbbbbbbbb, cccccccccccccccccc, ddddddddddddddddddddddddddd]
    ):
        pass


match x:
    case (
        b"implicit"
        b"concatenated"
        b"string"
        | [aaaaaa, bbbbbbbbbbbbbbbb, cccccccccccccccccc, ddddddddddddddddddddddddddd]
    ):
        pass


match x:
    case (
         f"implicit"
         "concatenated"
         "string"
         | [aaaaaa, bbbbbbbbbbbbbbbb, cccccccccccccccccc, ddddddddddddddddddddddddddd]
    ):
        pass


## Complex number expressions and unary expressions

match x:
    case 4 - 3j | [
        aaaaaaaaaaaaaaaaaaaaaaaa,
        bbbbbbbbbbbbbbbbbbbbbbbbbbbb,
        cccccccccccccccccccccccccccccccccccccccc,
    ]:
        pass


match x:
    case 4 + 3j | [
        aaaaaaaaaaaaaaaaaaaaaaaa,
        bbbbbbbbbbbbbbbbbbbbbbbbbbbb,
        cccccccccccccccccccccccccccccccccccccccc,
    ]:
        pass


match x:
    case -1 | [
        aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
        ccccccccccccccccccccccccccccccccc,
    ]:
        pass



### Parenthesized patterns
match x:
    case (1) | [
        aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
        ccccccccccccccccccccccccccccccccc,
    ]:
        pass


match x:
    case ( # comment
         1
     ) | [
        aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
        ccccccccccccccccccccccccccccccccc,
    ]:
        pass



```

## Output
```python
# Patterns that use BestFit should be parenthesized if they exceed the configured line width
# but fit within parentheses.
match x:
    case "averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsPar":
        pass


match x:
    case b"averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsPa":
        pass

match x:
    case f"averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsPa":
        pass


match x:
    case 5444444444444444444444444444444444444444444444444444444444444444444444444444444j:
        pass


match x:
    case 5444444444444444444444444444444444444444444444444444444444444444444444444444444:
        pass


match x:
    case 5.44444444444444444444444444444444444444444444444444444444444444444444444444444:
        pass


match x:
    case (
        averyLongIdentThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsParenth
    ):
        pass


# But they aren't parenthesized when they exceed the line length even parenthesized
match x:
    case "averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsParenthesized":
        pass


match x:
    case b"averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsParenthesized":
        pass

match x:
    case f"averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsParenthesized":
        pass


match x:
    case 54444444444444444444444444444444444444444444444444444444444444444444444444444444444j:
        pass


match x:
    case 5444444444444444444444444444444444444444444444444444444444444444444444444444444444:
        pass


match x:
    case 5.444444444444444444444444444444444444444444444444444444444444444444444444444444444:
        pass


match x:
    case (
        averyLongIdentifierThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsParenthesized
    ):
        pass


# It uses the Multiline layout when there's an alias.
match x:
    case (
        averyLongIdentifierThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsParenthe as b
    ):
        pass


match x:
    case "an implicit concatenated" "string literal" "in a match case" "that goes over multiple lines":
        pass


## Patterns ending with a sequence, mapping, class, or parenthesized pattern should break the parenthesized-like pattern first
match x:
    case (
        A
        | [
            aaaaaa,
            bbbbbbbbbbbbbbbb,
            cccccccccccccccccc,
            ddddddddddddddddddddddddddd,
        ]
    ):
        pass

match x:
    case (
        A
        | (
            aaaaaa,
            bbbbbbbbbbbbbbbb,
            cccccccccccccccccc,
            ddddddddddddddddddddddddddd,
        )
    ):
        pass


match x:
    case (
        A
        | {
            "a": aaaaaa,
            "b": bbbbbbbbbbbbbbbb,
            "c": cccccccccccccccccc,
            "d": ddddddddddddddddddddddddddd,
        }
    ):
        pass


match x:
    case (
        A
        | Class(
            aaaaaa,
            bbbbbbbbbbbbbbbb,
            cccccccccccccccccc,
            ddddddddddddddddddddddddddd,
        )
    ):
        pass


match x:
    case (
        A
        | (
            aaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbbbb.cccccccccccccccccccccccccccc.ddddddddddddddddddddddd
        )
    ):
        pass


## Patterns starting with a sequence, mapping, class, or parenthesized pattern should break the parenthesized-like pattern first
match x:
    case (
        [
            aaaaaa,
            bbbbbbbbbbbbbbbb,
            cccccccccccccccccc,
            ddddddddddddddddddddddddddd,
        ]
        | A
    ):
        pass

match x:
    case (
        (
            aaaaaa,
            bbbbbbbbbbbbbbbb,
            cccccccccccccccccc,
            ddddddddddddddddddddddddddd,
        )
        | A
    ):
        pass


match x:
    case (
        {
            "a": aaaaaa,
            "b": bbbbbbbbbbbbbbbb,
            "c": cccccccccccccccccc,
            "d": ddddddddddddddddddddddddddd,
        }
        | A
    ):
        pass


match x:
    case Class(
        aaaaaa,
        bbbbbbbbbbbbbbbb,
        cccccccccccccccccc,
        ddddddddddddddddddddddddddd,
    ):
        pass


## Not for non-parenthesized sequence patterns
match x:
    case (
        (1)
        | aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
        ccccccccccccccccccccccccccccccccc,
    ):
        pass

## Parenthesize patterns that start with a token
match x:
    case (
        A(
            aaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbbbb.cccccccccccccccccccccccccccc.ddddddddddddddddddddddd
        )
        | B
    ):
        pass


## Always use parentheses for implicitly concatenated strings
match x:
    case (
        "implicit" "concatenated" "string"
        | [aaaaaa, bbbbbbbbbbbbbbbb, cccccccccccccccccc, ddddddddddddddddddddddddddd]
    ):
        pass


match x:
    case (
        b"implicit" b"concatenated" b"string"
        | [aaaaaa, bbbbbbbbbbbbbbbb, cccccccccccccccccc, ddddddddddddddddddddddddddd]
    ):
        pass


match x:
    case (
        f"implicit" "concatenated" "string"
        | [aaaaaa, bbbbbbbbbbbbbbbb, cccccccccccccccccc, ddddddddddddddddddddddddddd]
    ):
        pass


## Complex number expressions and unary expressions

match x:
    case (
        4 - 3j
        | [
            aaaaaaaaaaaaaaaaaaaaaaaa,
            bbbbbbbbbbbbbbbbbbbbbbbbbbbb,
            cccccccccccccccccccccccccccccccccccccccc,
        ]
    ):
        pass


match x:
    case (
        4 + 3j
        | [
            aaaaaaaaaaaaaaaaaaaaaaaa,
            bbbbbbbbbbbbbbbbbbbbbbbbbbbb,
            cccccccccccccccccccccccccccccccccccccccc,
        ]
    ):
        pass


match x:
    case (
        -1
        | [
            aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
            bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
            ccccccccccccccccccccccccccccccccc,
        ]
    ):
        pass


### Parenthesized patterns
match x:
    case (
        (1)
        | [
            aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
            bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
            ccccccccccccccccccccccccccccccccc,
        ]
    ):
        pass


match x:
    case (
        (  # comment
            1
        )
        | [
            aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
            bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
            ccccccccccccccccccccccccccccccccc,
        ]
    ):
        pass
```


## Preview changes
```diff
--- Stable
+++ Preview
@@ -1,31 +1,43 @@
 # Patterns that use BestFit should be parenthesized if they exceed the configured line width
 # but fit within parentheses.
 match x:
-    case "averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsPar":
+    case (
+        "averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsPar"
+    ):
         pass
 
 
 match x:
-    case b"averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsPa":
+    case (
+        b"averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsPa"
+    ):
         pass
 
 match x:
-    case f"averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsPa":
+    case (
+        f"averyLongStringThatGetsParenthesizedOnceItExceedsTheConfiguredLineWidthFitsPa"
+    ):
         pass
 
 
 match x:
-    case 5444444444444444444444444444444444444444444444444444444444444444444444444444444j:
+    case (
+        5444444444444444444444444444444444444444444444444444444444444444444444444444444j
+    ):
         pass
 
 
 match x:
-    case 5444444444444444444444444444444444444444444444444444444444444444444444444444444:
+    case (
+        5444444444444444444444444444444444444444444444444444444444444444444444444444444
+    ):
         pass
 
 
 match x:
-    case 5.44444444444444444444444444444444444444444444444444444444444444444444444444444:
+    case (
+        5.44444444444444444444444444444444444444444444444444444444444444444444444444444
+    ):
         pass
 
 
@@ -82,108 +94,89 @@
 
 
 match x:
-    case "an implicit concatenated" "string literal" "in a match case" "that goes over multiple lines":
+    case (
+        "an implicit concatenated"
+        "string literal"
+        "in a match case"
+        "that goes over multiple lines"
+    ):
         pass
 
 
 ## Patterns ending with a sequence, mapping, class, or parenthesized pattern should break the parenthesized-like pattern first
 match x:
-    case (
-        A
-        | [
-            aaaaaa,
-            bbbbbbbbbbbbbbbb,
-            cccccccccccccccccc,
-            ddddddddddddddddddddddddddd,
-        ]
-    ):
+    case A | [
+        aaaaaa,
+        bbbbbbbbbbbbbbbb,
+        cccccccccccccccccc,
+        ddddddddddddddddddddddddddd,
+    ]:
         pass
 
 match x:
-    case (
-        A
-        | (
-            aaaaaa,
-            bbbbbbbbbbbbbbbb,
-            cccccccccccccccccc,
-            ddddddddddddddddddddddddddd,
-        )
+    case A | (
+        aaaaaa,
+        bbbbbbbbbbbbbbbb,
+        cccccccccccccccccc,
+        ddddddddddddddddddddddddddd,
     ):
         pass
 
 
 match x:
-    case (
-        A
-        | {
-            "a": aaaaaa,
-            "b": bbbbbbbbbbbbbbbb,
-            "c": cccccccccccccccccc,
-            "d": ddddddddddddddddddddddddddd,
-        }
-    ):
+    case A | {
+        "a": aaaaaa,
+        "b": bbbbbbbbbbbbbbbb,
+        "c": cccccccccccccccccc,
+        "d": ddddddddddddddddddddddddddd,
+    }:
         pass
 
 
 match x:
-    case (
-        A
-        | Class(
-            aaaaaa,
-            bbbbbbbbbbbbbbbb,
-            cccccccccccccccccc,
-            ddddddddddddddddddddddddddd,
-        )
+    case A | Class(
+        aaaaaa,
+        bbbbbbbbbbbbbbbb,
+        cccccccccccccccccc,
+        ddddddddddddddddddddddddddd,
     ):
         pass
 
 
 match x:
-    case (
-        A
-        | (
-            aaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbbbb.cccccccccccccccccccccccccccc.ddddddddddddddddddddddd
-        )
+    case A | (
+        aaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbbbb.cccccccccccccccccccccccccccc.ddddddddddddddddddddddd
     ):
         pass
 
 
 ## Patterns starting with a sequence, mapping, class, or parenthesized pattern should break the parenthesized-like pattern first
 match x:
-    case (
-        [
-            aaaaaa,
-            bbbbbbbbbbbbbbbb,
-            cccccccccccccccccc,
-            ddddddddddddddddddddddddddd,
-        ]
-        | A
-    ):
+    case [
+        aaaaaa,
+        bbbbbbbbbbbbbbbb,
+        cccccccccccccccccc,
+        ddddddddddddddddddddddddddd,
+    ] | A:
         pass
 
 match x:
     case (
-        (
-            aaaaaa,
-            bbbbbbbbbbbbbbbb,
-            cccccccccccccccccc,
-            ddddddddddddddddddddddddddd,
-        )
-        | A
-    ):
+        aaaaaa,
+        bbbbbbbbbbbbbbbb,
+        cccccccccccccccccc,
+        ddddddddddddddddddddddddddd,
+    ) | A:
         pass
 
 
 match x:
-    case (
-        {
-            "a": aaaaaa,
-            "b": bbbbbbbbbbbbbbbb,
-            "c": cccccccccccccccccc,
-            "d": ddddddddddddddddddddddddddd,
-        }
-        | A
-    ):
+    case {
+        "a": aaaaaa,
+        "b": bbbbbbbbbbbbbbbb,
+        "c": cccccccccccccccccc,
+        "d": ddddddddddddddddddddddddddd,
+    } | A:
         pass
 
 
@@ -200,8 +193,7 @@
 ## Not for non-parenthesized sequence patterns
 match x:
     case (
-        (1)
-        | aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
+        (1) | aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
         bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
         ccccccccccccccccccccccccccccccccc,
     ):
@@ -220,89 +212,80 @@
 
 ## Always use parentheses for implicitly concatenated strings
 match x:
-    case (
-        "implicit" "concatenated" "string"
-        | [aaaaaa, bbbbbbbbbbbbbbbb, cccccccccccccccccc, ddddddddddddddddddddddddddd]
-    ):
+    case "implicitconcatenatedstring" | [
+        aaaaaa,
+        bbbbbbbbbbbbbbbb,
+        cccccccccccccccccc,
+        ddddddddddddddddddddddddddd,
+    ]:
         pass
 
 
 match x:
-    case (
-        b"implicit" b"concatenated" b"string"
-        | [aaaaaa, bbbbbbbbbbbbbbbb, cccccccccccccccccc, ddddddddddddddddddddddddddd]
-    ):
+    case b"implicitconcatenatedstring" | [
+        aaaaaa,
+        bbbbbbbbbbbbbbbb,
+        cccccccccccccccccc,
+        ddddddddddddddddddddddddddd,
+    ]:
         pass
 
 
 match x:
-    case (
-        f"implicit" "concatenated" "string"
-        | [aaaaaa, bbbbbbbbbbbbbbbb, cccccccccccccccccc, ddddddddddddddddddddddddddd]
-    ):
+    case f"implicitconcatenatedstring" | [
+        aaaaaa,
+        bbbbbbbbbbbbbbbb,
+        cccccccccccccccccc,
+        ddddddddddddddddddddddddddd,
+    ]:
         pass
 
 
 ## Complex number expressions and unary expressions
 
 match x:
-    case (
-        4 - 3j
-        | [
-            aaaaaaaaaaaaaaaaaaaaaaaa,
-            bbbbbbbbbbbbbbbbbbbbbbbbbbbb,
-            cccccccccccccccccccccccccccccccccccccccc,
-        ]
-    ):
+    case 4 - 3j | [
+        aaaaaaaaaaaaaaaaaaaaaaaa,
+        bbbbbbbbbbbbbbbbbbbbbbbbbbbb,
+        cccccccccccccccccccccccccccccccccccccccc,
+    ]:
         pass
 
 
 match x:
-    case (
-        4 + 3j
-        | [
-            aaaaaaaaaaaaaaaaaaaaaaaa,
-            bbbbbbbbbbbbbbbbbbbbbbbbbbbb,
-            cccccccccccccccccccccccccccccccccccccccc,
-        ]
-    ):
+    case 4 + 3j | [
+        aaaaaaaaaaaaaaaaaaaaaaaa,
+        bbbbbbbbbbbbbbbbbbbbbbbbbbbb,
+        cccccccccccccccccccccccccccccccccccccccc,
+    ]:
         pass
 
 
 match x:
-    case (
-        -1
-        | [
-            aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
-            bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
-            ccccccccccccccccccccccccccccccccc,
-        ]
-    ):
+    case -1 | [
+        aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
+        ccccccccccccccccccccccccccccccccc,
+    ]:
         pass
 
 
 ### Parenthesized patterns
 match x:
-    case (
-        (1)
-        | [
-            aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
-            bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
-            ccccccccccccccccccccccccccccccccc,
-        ]
-    ):
+    case (1) | [
+        aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
+        ccccccccccccccccccccccccccccccccc,
+    ]:
         pass
 
 
 match x:
-    case (
-        (  # comment
-            1
-        )
-        | [
-            aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
-            bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
-            ccccccccccccccccccccccccccccccccc,
-        ]
-    ):
+    case (  # comment
+        1
+    ) | [
+        aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
+        ccccccccccccccccccccccccccccccccc,
+    ]:
         pass
```

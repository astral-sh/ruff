---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/black/cases/line_ranges_basic.py
---
## Input

```python
# NOTE: If you need to modify this file, pay special attention to the --line-ranges=
# flag above as it's formatting specifically these lines.
def foo1(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7): pass
def foo2(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7): pass
def foo3(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7): pass
def foo4(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7): pass

# Adding some unformated code covering a wide range of syntaxes.

if True:
      # Incorrectly indented prefix comments.
  pass

import   typing
from  typing   import   (
      Any  ,
   )
class   MyClass(  object):     # Trailing comment with extra leading space.
        #NOTE: The following indentation is incorrect:
      @decor( 1  *  3 )
      def  my_func(  arg):
                pass

try:                                       # Trailing comment with extra leading space.
    for   i   in   range(10):              # Trailing comment with extra leading space.
        while    condition:
            if   something:
                then_something(  )
            elif    something_else:
                then_something_else(  )
except  ValueError  as  e:
    unformatted(  )
finally:
    unformatted(  )

async  def  test_async_unformatted(  ):    # Trailing comment with extra leading space.
    async  for  i  in some_iter(  unformatted  ):    # Trailing comment with extra leading space.
        await  asyncio.sleep( 1 )
        async  with  some_context(  unformatted  ):
            print(  "unformatted"  )
```

## Black Differences

```diff
--- Black
+++ Ruff
@@ -1,7 +1,17 @@
-# flags: --line-ranges=5-6
 # NOTE: If you need to modify this file, pay special attention to the --line-ranges=
 # flag above as it's formatting specifically these lines.
-def foo1(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7): pass
+def foo1(
+    parameter_1,
+    parameter_2,
+    parameter_3,
+    parameter_4,
+    parameter_5,
+    parameter_6,
+    parameter_7,
+):
+    pass
+
+
 def foo2(
     parameter_1,
     parameter_2,
@@ -26,38 +36,52 @@
     pass
 
 
-def foo4(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7): pass
+def foo4(
+    parameter_1,
+    parameter_2,
+    parameter_3,
+    parameter_4,
+    parameter_5,
+    parameter_6,
+    parameter_7,
+):
+    pass
+
 
 # Adding some unformated code covering a wide range of syntaxes.
 
 if True:
-      # Incorrectly indented prefix comments.
-  pass
+    # Incorrectly indented prefix comments.
+    pass
+
+import typing
+from typing import (
+    Any,
+)
+
+
+class MyClass(object):  # Trailing comment with extra leading space.
+    # NOTE: The following indentation is incorrect:
+    @decor(1 * 3)
+    def my_func(arg):
+        pass
 
-import   typing
-from  typing   import   (
-      Any  ,
-   )
-class   MyClass(  object):     # Trailing comment with extra leading space.
-        #NOTE: The following indentation is incorrect:
-      @decor( 1  *  3 )
-      def  my_func(  arg):
-                pass
 
-try:                                       # Trailing comment with extra leading space.
-    for   i   in   range(10):              # Trailing comment with extra leading space.
-        while    condition:
-            if   something:
-                then_something(  )
-            elif    something_else:
-                then_something_else(  )
-except  ValueError  as  e:
-    unformatted(  )
+try:  # Trailing comment with extra leading space.
+    for i in range(10):  # Trailing comment with extra leading space.
+        while condition:
+            if something:
+                then_something()
+            elif something_else:
+                then_something_else()
+except ValueError as e:
+    unformatted()
 finally:
-    unformatted(  )
+    unformatted()
+
 
-async  def  test_async_unformatted(  ):    # Trailing comment with extra leading space.
-    async  for  i  in some_iter(  unformatted  ):    # Trailing comment with extra leading space.
-        await  asyncio.sleep( 1 )
-        async  with  some_context(  unformatted  ):
-            print(  "unformatted"  )
+async def test_async_unformatted():  # Trailing comment with extra leading space.
+    async for i in some_iter(unformatted):  # Trailing comment with extra leading space.
+        await asyncio.sleep(1)
+        async with some_context(unformatted):
+            print("unformatted")
```

## Ruff Output

```python
# NOTE: If you need to modify this file, pay special attention to the --line-ranges=
# flag above as it's formatting specifically these lines.
def foo1(
    parameter_1,
    parameter_2,
    parameter_3,
    parameter_4,
    parameter_5,
    parameter_6,
    parameter_7,
):
    pass


def foo2(
    parameter_1,
    parameter_2,
    parameter_3,
    parameter_4,
    parameter_5,
    parameter_6,
    parameter_7,
):
    pass


def foo3(
    parameter_1,
    parameter_2,
    parameter_3,
    parameter_4,
    parameter_5,
    parameter_6,
    parameter_7,
):
    pass


def foo4(
    parameter_1,
    parameter_2,
    parameter_3,
    parameter_4,
    parameter_5,
    parameter_6,
    parameter_7,
):
    pass


# Adding some unformated code covering a wide range of syntaxes.

if True:
    # Incorrectly indented prefix comments.
    pass

import typing
from typing import (
    Any,
)


class MyClass(object):  # Trailing comment with extra leading space.
    # NOTE: The following indentation is incorrect:
    @decor(1 * 3)
    def my_func(arg):
        pass


try:  # Trailing comment with extra leading space.
    for i in range(10):  # Trailing comment with extra leading space.
        while condition:
            if something:
                then_something()
            elif something_else:
                then_something_else()
except ValueError as e:
    unformatted()
finally:
    unformatted()


async def test_async_unformatted():  # Trailing comment with extra leading space.
    async for i in some_iter(unformatted):  # Trailing comment with extra leading space.
        await asyncio.sleep(1)
        async with some_context(unformatted):
            print("unformatted")
```

## Black Output

```python
# flags: --line-ranges=5-6
# NOTE: If you need to modify this file, pay special attention to the --line-ranges=
# flag above as it's formatting specifically these lines.
def foo1(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7): pass
def foo2(
    parameter_1,
    parameter_2,
    parameter_3,
    parameter_4,
    parameter_5,
    parameter_6,
    parameter_7,
):
    pass


def foo3(
    parameter_1,
    parameter_2,
    parameter_3,
    parameter_4,
    parameter_5,
    parameter_6,
    parameter_7,
):
    pass


def foo4(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7): pass

# Adding some unformated code covering a wide range of syntaxes.

if True:
      # Incorrectly indented prefix comments.
  pass

import   typing
from  typing   import   (
      Any  ,
   )
class   MyClass(  object):     # Trailing comment with extra leading space.
        #NOTE: The following indentation is incorrect:
      @decor( 1  *  3 )
      def  my_func(  arg):
                pass

try:                                       # Trailing comment with extra leading space.
    for   i   in   range(10):              # Trailing comment with extra leading space.
        while    condition:
            if   something:
                then_something(  )
            elif    something_else:
                then_something_else(  )
except  ValueError  as  e:
    unformatted(  )
finally:
    unformatted(  )

async  def  test_async_unformatted(  ):    # Trailing comment with extra leading space.
    async  for  i  in some_iter(  unformatted  ):    # Trailing comment with extra leading space.
        await  asyncio.sleep( 1 )
        async  with  some_context(  unformatted  ):
            print(  "unformatted"  )
```



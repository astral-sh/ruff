---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/ruff/parentheses/opening_parentheses_comment_empty.py
---
## Input
```py
# Opening parentheses end-of-line comment without a value in the parentheses

(  # a 1
)
a2 = (  # a 2
)
a3 = f(  # a 3
)
a4 = (  # a 4
) = a4
a5: List(  # a 5
) = 5

raise (  # b 1a
)
raise b1b from (  # b 1b
)
raise (  # b 1c
) from b1c
del (  # b 2
)
assert (  # b 3
), (  #b 4
)

def g():
    """Statements that are only allowed in function bodies"""
    return (  # c 1
    )
    yield (  # c 2
    )
async def h():
    """Statements that are only allowed in async function bodies"""
    await (  # c 3
    )

with (  # d 1
): pass
match (  # d 2
):
    case d2:
        pass
match d3:
    case (  # d 3
    ):
        pass
while (  # d 4
):
    pass
if (  # d 5
):
    pass
elif (  # d 6
):
    pass
for (  # d 7
) in (  # d 8
):
    pass
try:
    pass
except (  # d 9
):
    pass


def e1(  # e 1
): pass


def e2() -> (  # e 2
): pass


class E3(  # e 3
): pass


f1 = [  # f 1
]
[  # f 2
]
f3 = {  # f3
}
{  # f 4
}
```

## Output
```py
# Opening parentheses end-of-line comment without a value in the parentheses

(  # a 1
)
a2 = (  # a 2
)
a3 = f(  # a 3
)
a4 = (  # a 4
) = a4
a5: List(  # a 5
) = 5

raise (  # b 1a
)
raise b1b from (  # b 1b
)
raise (  # b 1c
) from b1c
del (  # b 2
)
assert (  # b 3
), (  # b 4
)


def g():
    """Statements that are only allowed in function bodies"""
    return (  # c 1
    )
    yield (  # c 2
    )


async def h():
    """Statements that are only allowed in async function bodies"""
    await (  # c 3
    )


with (  # d 1
):
    pass
match (  # d 2
):
    case d2:
        pass
match d3:
    case (  # d 3
    ):
        pass
while (  # d 4
):
    pass
if (  # d 5
):
    pass
elif (  # d 6
):
    pass
for (  # d 7
) in (  # d 8
):
    pass
try:
    pass
except (  # d 9
):
    pass


def e1(  # e 1
):
    pass


def e2() -> (  # e 2
):
    pass


class E3:  # e 3
    pass


f1 = [  # f 1
]
[  # f 2
]
f3 = {  # f3
}
{  # f 4
}
```




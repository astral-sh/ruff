---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/ruff/expression/join_implicit_concatenated_string_assignment.py
---
## Input
```python
## Implicit concatenated strings with a trailing comment but a non splittable target.

# Don't join the string because the joined string with the inlined comment exceeds the line length limit.
____aaa = (
    "aaaaaaaaaaaaaaaaaaaaa" "aaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbvvvvvvvvvvvvvvv"
)  # c

# This is the same string as above and should lead to the same formatting. The only difference is that we start
# with an unparenthesized string.
____aaa = "aaaaaaaaaaaaaaaaaaaaa" "aaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbvvvvvvvvvvvvvvv"  # c

# Again the same string as above but this time as non-implicit concatenated string.
# It's okay if the formatting differs because it's an explicit choice to use implicit concatenation.
____aaa = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbvvvvvvvvvvvvvvv"  # c

# Join the string because it's exactly in the line length limit when the comment is inlined.
____aaa = (
    "aaaaaaaaaaaaaaaaaaa" "aaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbvvvvvvvvvvv"
)  # c

# This is the same string as above and should lead to the same formatting. The only difference is that we start
# with an unparenthesized string.
____aaa = "aaaaaaaaaaaaaaaaaaa" "aaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbvvvvvvvvvvv"  # c

# Again the same string as above but as a non-implicit concatenated string. It should result in the same formatting
# (for consistency).
____aaa = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbvvvvvvvvvvv"  # c

# It should collapse the parentheses if the joined string and the comment fit on the same line.
# This is required for stability.
____aaa = (
    "aaaaaaaaaaaaaaaaaaaaa" "aaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbvv"  # c
)


#############################################################
# Assignments where the target or annotations are splittable
#############################################################


# The target splits because of a magic trailing comma
# The string is joined and not parenthesized because it just fits into the line length (including comment).
a[
    aaaaaaa,
    b,
] = "ccccccccccccccccccccccccccccc" "cccccccccccccccccccccccccccccccccccccccccc"  # comment

# Same but starting with a joined string. They should both result in the same formatting.
[
    aaaaaaa,
    b,
] = "ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment

# The target splits because of the magic trailing comma
# The string is **not** joined because it with the inlined comment exceeds the line length limit.
a[
    aaaaaaa,
    b,
] = "ccccccccccccccccccccccccccccc" "ccccccccccccccccccccccccccccccccccccccccccc"  # comment


# The target should be flat
# The string should be joined because it fits into the line length
a[
    aaaaaaa,
    b
] = (
    "ccccccccccccccccccccccccccccccccccc" "cccccccccccccccccccccccc"  # comment
)

# Same but starting with a joined string. They should both result in the same formatting.
a[
    aaaaaaa,
    b
] = "ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment

# The target should be flat
# The string gets parenthesized because it, with the inlined comment, exceeds the line length limit.
a[
    aaaaaaa,
    b
] = "ccccccccccccccccccccccccccccc" "ccccccccccccccccccccccccccccccccccccccccccc"  # comment


# Split an overlong target, but join the string if it fits
a[
    aaaaaaa,
    b
].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
    "ccccccccccccccccccccccccccccccccccccccccc" "cccccccccccccccccccccccccccccc"  # comment
)

# Split both if necessary and keep multiline
a[
    aaaaaaa,
    b
].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
    "ccccccccccccccccccccccccccccccccccccccccc" "ccccccccccccccccccccccccccccccc"  # comment
)

#########################################################
# Leading or trailing own line comments:
# Preserve the parentheses
########################################################
a[
    aaaaaaa,
    b
] = (
    # test
    "ccccccccccccccccccccccccccccc" "ccccccccccccccccccccccccccccccccccccccccccc"
)

a[
    aaaaaaa,
    b
] = (
    "ccccccccccccccccccccccccccccc" "ccccccccccccccccccccccccccccccccccccccccccc"
    # test
)

a[
    aaaaaaa,
    b
] = (
    "ccccccccccccccccccccccccccccccccccccccccc" "ccccccccccccccccccccccccccccccccccccccccccc"
    # test
)


#############################################################
# Type alias statements
#############################################################

# First break the right, join the string
type A[str, int, number] = "Literal[string, int] | None | " "CustomType" "| OtherCustomTypeExcee"  # comment

# Keep multiline if overlong
type A[str, int, number] = "Literal[string, int] | None | " "CustomTypeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"  # comment

# Break the left if it is over-long, join the string
type Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[stringgggggggggg, inttttttttttttttttttttttt, number] = "Literal[string, int] | None | " "CustomType"  # comment

# Break both if necessary and keep multiline
type Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[stringgggggggggg, inttttttttttttttttttttttt, number] = "Literal[string, int] | None | " "CustomTypeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"  # comment


#############################################################
# F-Strings
#############################################################

# Flatten and join the f-string
aaaaaaaaaaa = f"test{
expression}flat" f"cean beeeeeeee {joined} eeeeeeeeeeeeeeeee" # inline

# Parenthesize the value and join it, inline the comment
aaaaaaaaaaa = f"test{
expression}flat" f"cean beeeeeeee {joined} eeeeeeeeeeeeeeeeeeeeeeeeeee" # inline

# Parenthesize the f-string and keep it multiline because it doesn't fit on a single line including the comment
aaaaaaaaaaa = f"test{
expression
}flat" f"cean beeeeeeee {
joined
} eeeeeeeeeeeeeeeeeeeeeeeeeeeee" # inline


# The target splits because of a magic trailing comma
# The string is joined and not parenthesized because it just fits into the line length (including comment).
a[
    aaaaaaa,
    b,
] = f"ccccc{
expression}ccccccccccc" f"cccccccccccccccccccccccccccccccccccccccccc"  # comment


# Same but starting with a joined string. They should both result in the same formatting.
[
    aaaaaaa,
    b,
] = f"ccccc{
expression}ccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment

# The target splits because of the magic trailing comma
# The string is **not** joined because it with the inlined comment exceeds the line length limit.
a[
    aaaaaaa,
    b,
] = f"ccccc{
expression}cccccccccccccccccccc" f"cccccccccccccccccccccccccccccccccccccccccc"  # comment


# The target should be flat
# The string should be joined because it fits into the line length
a[
    aaaaaaa,
    b
] = (
    f"ccccc{
    expression}ccccccccccc" "cccccccccccccccccccccccc"  # comment
)

# Same but starting with a joined string. They should both result in the same formatting.
a[
    aaaaaaa,
    b
] = f"ccccc{
expression}ccccccccccccccccccccccccccccccccccc"  # comment

# The target should be flat
# The string gets parenthesized because it, with the inlined comment, exceeds the line length limit.
a[
    aaaaaaa,
    b
] = f"ccccc{
expression}ccccccccccc" "ccccccccccccccccccccccccccccccccccccccccccc"  # comment


# Split an overlong target, but join the string if it fits
a[
    aaaaaaa,
    b
].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
    f"ccccc{
    expression}ccccccccccc" "cccccccccccccccccccccccccccccc"  # comment
)

# Split both if necessary and keep multiline
a[
    aaaaaaa,
    b
].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
    f"ccccc{
    expression}cccccccccccccccccccccccccccccccc" "ccccccccccccccccccccccccccccccc"  # comment
)

# Don't inline f-strings that contain expressions that are guaranteed to split, e.b. because of a magic trailing comma
aaaaaaaaaaaaaaaaaa = f"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
[a,]
}" "moreeeeeeeeeeeeeeeeeeee" "test" # comment

aaaaaaaaaaaaaaaaaa = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
[a,]
}" "moreeeeeeeeeeeeeeeeeeee" "test" # comment
)

aaaaa[aaaaaaaaaaa] = f"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
[a,]
}" "moreeeeeeeeeeeeeeeeeeee" "test" # comment

aaaaa[aaaaaaaaaaa] = (f"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
[a,]
}" "moreeeeeeeeeeeeeeeeeeee" "test" # comment
)

# Don't inline f-strings that contain commented expressions
aaaaaaaaaaaaaaaaaa = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeee{[
        a  # comment
    ]}" "moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaa[aaaaaaaaaaa] = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeee{[
        a  # comment
    ]}" "moreeeeeeeeeeeeeeeeeetest"  # comment
)

# Don't inline f-strings with multiline debug expressions:
aaaaaaaaaaaaaaaaaa = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeee{
    a=}" "moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaaaaaaaaaaaaaaa = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeee{a +
    b=}" "moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaaaaaaaaaaaaaaa = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeee{a
    =}" "moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaa[aaaaaaaaaaa] = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeee{
    a=}" "moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaa[aaaaaaaaaaa] = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeee{a
    =}" "moreeeeeeeeeeeeeeeeeetest"  # comment
)


#############################################################
# T-Strings
#############################################################

# Flatten and join the t-string
aaaaaaaaaaa = t"test{
expression}flat" t"cean beeeeeeee {joined} eeeeeeeeeeeeeeeee" # inline

# Parenthesize the value and join it, inline the comment
aaaaaaaaaaa = t"test{
expression}flat" t"cean beeeeeeee {joined} eeeeeeeeeeeeeeeeeeeeeeeeeee" # inline

# Parenthesize the t-string and keep it multiline because it doesn't fit on a single line including the comment
aaaaaaaaaaa = t"test{
expression
}flat" t"cean beeeeeeee {
joined
} eeeeeeeeeeeeeeeeeeeeeeeeeeeee" # inline


# The target splits because of a magic trailing comma
# The string is joined and not parenthesized because it just fits into the line length (including comment).
a[
    aaaaaaa,
    b,
] = t"ccccc{
expression}ccccccccccc" t"cccccccccccccccccccccccccccccccccccccccccc"  # comment


# Same but starting with a joined string. They should both result in the same formatting.
[
    aaaaaaa,
    b,
] = t"ccccc{
expression}ccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment

# The target splits because of the magic trailing comma
# The string is **not** joined because it with the inlined comment exceeds the line length limit.
a[
    aaaaaaa,
    b,
] = t"ccccc{
expression}cccccccccccccccccccc" t"cccccccccccccccccccccccccccccccccccccccccc"  # comment


# The target should be flat
# The string should be joined because it fits into the line length
a[
    aaaaaaa,
    b
] = (
    t"ccccc{
    expression}ccccccccccc" t"cccccccccccccccccccccccc"  # comment
)

# Same but starting with a joined string. They should both result in the same formatting.
a[
    aaaaaaa,
    b
] = t"ccccc{
expression}ccccccccccccccccccccccccccccccccccc"  # comment

# The target should be flat
# The string gets parenthesized because it, with the inlined comment, exceeds the line length limit.
a[
    aaaaaaa,
    b
] = t"ccccc{
expression}ccccccccccc" t"ccccccccccccccccccccccccccccccccccccccccccc"  # comment


# Split an overlong target, but join the string if it fits
a[
    aaaaaaa,
    b
].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
    t"ccccc{
    expression}ccccccccccc" t"cccccccccccccccccccccccccccccc"  # comment
)

# Split both if necessary and keep multiline
a[
    aaaaaaa,
    b
].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
    t"ccccc{
    expression}cccccccccccccccccccccccccccccccc" t"ccccccccccccccccccccccccccccccc"  # comment
)

# Don't inline t-strings that contain expressions that are guaranteed to split, e.b. because of a magic trailing comma
aaaaaaaaaaaaaaaaaa = t"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
[a,]
}" t"moreeeeeeeeeeeeeeeeeeee" t"test" # comment

aaaaaaaaaaaaaaaaaa = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
[a,]
}" t"moreeeeeeeeeeeeeeeeeeee" t"test" # comment
)

aaaaa[aaaaaaaaaaa] = t"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
[a,]
}" t"moreeeeeeeeeeeeeeeeeeee" t"test" # comment

aaaaa[aaaaaaaaaaa] = (t"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
[a,]
}" t"moreeeeeeeeeeeeeeeeeeee" t"test" # comment
)

# Don't inline t-strings that contain commented expressions
aaaaaaaaaaaaaaaaaa = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeee{[
        a  # comment
    ]}" t"moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaa[aaaaaaaaaaa] = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeee{[
        a  # comment
    ]}" t"moreeeeeeeeeeeeeeeeeetest"  # comment
)

# Don't inline t-strings with multiline debug expressions:
aaaaaaaaaaaaaaaaaa = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeee{
    a=}" t"moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaaaaaaaaaaaaaaa = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeee{a +
    b=}" t"moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaaaaaaaaaaaaaaa = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeee{a
    =}" t"moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaa[aaaaaaaaaaa] = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeee{
    a=}" t"moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaa[aaaaaaaaaaa] = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeee{a
    =}" t"moreeeeeeeeeeeeeeeeeetest"  # comment
)


# Trailing last-part comments

a = (
    "a"
    "b"  # belongs to `b`
)

a: Literal[str] = (
    "a"
    "b"  # belongs to `b`
)

a += (
    "a"
    "b"  # belongs to `b`
)

a = (
    r"a"
    r"b"  # belongs to `b`
)

a = (
    "a"
    "b"
)  # belongs to the assignment

a = (((
    "a"
    "b"  # belongs to `b`
)))

a = (((
    "a"
    "b"
) # belongs to the f-string expression
))

a = (
    "a" "b"  # belongs to the f-string expression
)

a = (
    "a" "b"
    # belongs to the f-string expression
)

# There's no "right" answer if some parts are on the same line while others are on separate lines.
# This is likely a comment for one of the last two parts but could also just be a comment for the entire f-string expression.
# Because there's no right answer, follow what we do elsewhere and associate the comment with the outer-most node which
# is the f-string expression.
a = (
    "a"
    "b" "ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # belongs to the f-string expression
)

logger.error(
    f"Failed to run task {task} for job"
    f"with id {str(job.id)}" # type: ignore[union-attr]
)

a = (10 +
     "Exception in {call_back_name} "
     f"'{msg}'"  # belongs to binary operation
)

a = 10 + (
    "Exception in {call_back_name} "
    f"'{msg}'"  # belongs to f-string
)

self._attr_unique_id = (
    f"{self._device.temperature.group_address_state}_"
    f"{self._device.target_temperature.group_address_state}_"
    f"{self._device.target_temperature.group_address}_"
    f"{self._device._setpoint_shift.group_address}"  # noqa: SLF001
)

return (
    f"Exception in {call_back_name} when handling msg on "
    f"'{msg.topic}': '{msg.payload}'"  # type: ignore[str-bytes-safe]
)
```

## Output
```python
## Implicit concatenated strings with a trailing comment but a non splittable target.

# Don't join the string because the joined string with the inlined comment exceeds the line length limit.
____aaa = (
    "aaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbvvvvvvvvvvvvvvv"
)  # c

# This is the same string as above and should lead to the same formatting. The only difference is that we start
# with an unparenthesized string.
____aaa = (
    "aaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbvvvvvvvvvvvvvvv"
)  # c

# Again the same string as above but this time as non-implicit concatenated string.
# It's okay if the formatting differs because it's an explicit choice to use implicit concatenation.
____aaa = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbvvvvvvvvvvvvvvv"  # c

# Join the string because it's exactly in the line length limit when the comment is inlined.
____aaa = (
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbvvvvvvvvvvv"  # c
)

# This is the same string as above and should lead to the same formatting. The only difference is that we start
# with an unparenthesized string.
____aaa = (
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbvvvvvvvvvvv"  # c
)

# Again the same string as above but as a non-implicit concatenated string. It should result in the same formatting
# (for consistency).
____aaa = (
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbvvvvvvvvvvv"  # c
)

# It should collapse the parentheses if the joined string and the comment fit on the same line.
# This is required for stability.
____aaa = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbvv"  # c


#############################################################
# Assignments where the target or annotations are splittable
#############################################################


# The target splits because of a magic trailing comma
# The string is joined and not parenthesized because it just fits into the line length (including comment).
a[
    aaaaaaa,
    b,
] = "ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment

# Same but starting with a joined string. They should both result in the same formatting.
[
    aaaaaaa,
    b,
] = "ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment

# The target splits because of the magic trailing comma
# The string is **not** joined because it with the inlined comment exceeds the line length limit.
a[
    aaaaaaa,
    b,
] = (
    "ccccccccccccccccccccccccccccc"
    "ccccccccccccccccccccccccccccccccccccccccccc"
)  # comment


# The target should be flat
# The string should be joined because it fits into the line length
a[aaaaaaa, b] = "ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment

# Same but starting with a joined string. They should both result in the same formatting.
a[aaaaaaa, b] = "ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment

# The target should be flat
# The string gets parenthesized because it, with the inlined comment, exceeds the line length limit.
a[aaaaaaa, b] = (
    "ccccccccccccccccccccccccccccc"
    "ccccccccccccccccccccccccccccccccccccccccccc"
)  # comment


# Split an overlong target, but join the string if it fits
a[
    aaaaaaa, b
].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
    "ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment
)

# Split both if necessary and keep multiline
a[
    aaaaaaa, b
].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
    "ccccccccccccccccccccccccccccccccccccccccc"
    "ccccccccccccccccccccccccccccccc"
)  # comment

#########################################################
# Leading or trailing own line comments:
# Preserve the parentheses
########################################################
a[aaaaaaa, b] = (
    # test
    "cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
)

a[aaaaaaa, b] = (
    "cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
    # test
)

a[aaaaaaa, b] = (
    "ccccccccccccccccccccccccccccccccccccccccc"
    "ccccccccccccccccccccccccccccccccccccccccccc"
    # test
)


#############################################################
# Type alias statements
#############################################################

# First break the right, join the string
type A[str, int, number] = (
    "Literal[string, int] | None | CustomType| OtherCustomTypeExcee"  # comment
)

# Keep multiline if overlong
type A[str, int, number] = (
    "Literal[string, int] | None | "
    "CustomTypeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
)  # comment

# Break the left if it is over-long, join the string
type Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[
    stringgggggggggg,
    inttttttttttttttttttttttt,
    number,
] = "Literal[string, int] | None | CustomType"  # comment

# Break both if necessary and keep multiline
type Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[
    stringgggggggggg,
    inttttttttttttttttttttttt,
    number,
] = (
    "Literal[string, int] | None | "
    "CustomTypeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
)  # comment


#############################################################
# F-Strings
#############################################################

# Flatten and join the f-string
aaaaaaaaaaa = f"test{expression}flatcean beeeeeeee {joined} eeeeeeeeeeeeeeeee"  # inline

# Parenthesize the value and join it, inline the comment
aaaaaaaaaaa = (
    f"test{expression}flatcean beeeeeeee {joined} eeeeeeeeeeeeeeeeeeeeeeeeeee"  # inline
)

# Parenthesize the f-string and keep it multiline because it doesn't fit on a single line including the comment
aaaaaaaaaaa = (
    f"test{expression}flat"
    f"cean beeeeeeee {joined} eeeeeeeeeeeeeeeeeeeeeeeeeeeee"
)  # inline


# The target splits because of a magic trailing comma
# The string is joined and not parenthesized because it just fits into the line length (including comment).
a[
    aaaaaaa,
    b,
] = f"ccccc{expression}ccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment


# Same but starting with a joined string. They should both result in the same formatting.
[
    aaaaaaa,
    b,
] = f"ccccc{expression}ccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment

# The target splits because of the magic trailing comma
# The string is **not** joined because it with the inlined comment exceeds the line length limit.
a[
    aaaaaaa,
    b,
] = (
    f"ccccc{expression}cccccccccccccccccccc"
    f"cccccccccccccccccccccccccccccccccccccccccc"
)  # comment


# The target should be flat
# The string should be joined because it fits into the line length
a[aaaaaaa, b] = f"ccccc{expression}ccccccccccccccccccccccccccccccccccc"  # comment

# Same but starting with a joined string. They should both result in the same formatting.
a[aaaaaaa, b] = f"ccccc{expression}ccccccccccccccccccccccccccccccccccc"  # comment

# The target should be flat
# The string gets parenthesized because it, with the inlined comment, exceeds the line length limit.
a[aaaaaaa, b] = (
    f"ccccc{expression}ccccccccccc"
    "ccccccccccccccccccccccccccccccccccccccccccc"
)  # comment


# Split an overlong target, but join the string if it fits
a[
    aaaaaaa, b
].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
    f"ccccc{expression}ccccccccccccccccccccccccccccccccccccccccc"  # comment
)

# Split both if necessary and keep multiline
a[
    aaaaaaa, b
].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
    f"ccccc{expression}cccccccccccccccccccccccccccccccc"
    "ccccccccccccccccccccccccccccccc"
)  # comment

# Don't inline f-strings that contain expressions that are guaranteed to split, e.b. because of a magic trailing comma
aaaaaaaaaaaaaaaaaa = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
        [
            a,
        ]
    }"
    "moreeeeeeeeeeeeeeeeeeee"
    "test"
)  # comment

aaaaaaaaaaaaaaaaaa = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
        [
            a,
        ]
    }"
    "moreeeeeeeeeeeeeeeeeeee"
    "test"  # comment
)

aaaaa[aaaaaaaaaaa] = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
        [
            a,
        ]
    }"
    "moreeeeeeeeeeeeeeeeeeee"
    "test"
)  # comment

aaaaa[aaaaaaaaaaa] = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
        [
            a,
        ]
    }"
    "moreeeeeeeeeeeeeeeeeeee"
    "test"  # comment
)

# Don't inline f-strings that contain commented expressions
aaaaaaaaaaaaaaaaaa = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeee{
        [
            a  # comment
        ]
    }"
    "moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaa[aaaaaaaaaaa] = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeee{
        [
            a  # comment
        ]
    }"
    "moreeeeeeeeeeeeeeeeeetest"  # comment
)

# Don't inline f-strings with multiline debug expressions:
aaaaaaaaaaaaaaaaaa = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeee{
    a=}"
    "moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaaaaaaaaaaaaaaa = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeee{a +
    b=}"
    "moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaaaaaaaaaaaaaaa = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeee{a
    =}"
    "moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaa[aaaaaaaaaaa] = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeee{
    a=}"
    "moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaa[aaaaaaaaaaa] = (
    f"testeeeeeeeeeeeeeeeeeeeeeeeee{a
    =}"
    "moreeeeeeeeeeeeeeeeeetest"  # comment
)


#############################################################
# T-Strings
#############################################################

# Flatten and join the t-string
aaaaaaaaaaa = t"test{expression}flatcean beeeeeeee {joined} eeeeeeeeeeeeeeeee"  # inline

# Parenthesize the value and join it, inline the comment
aaaaaaaaaaa = (
    t"test{expression}flatcean beeeeeeee {joined} eeeeeeeeeeeeeeeeeeeeeeeeeee"  # inline
)

# Parenthesize the t-string and keep it multiline because it doesn't fit on a single line including the comment
aaaaaaaaaaa = (
    t"test{expression}flat"
    t"cean beeeeeeee {joined} eeeeeeeeeeeeeeeeeeeeeeeeeeeee"
)  # inline


# The target splits because of a magic trailing comma
# The string is joined and not parenthesized because it just fits into the line length (including comment).
a[
    aaaaaaa,
    b,
] = t"ccccc{expression}ccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment


# Same but starting with a joined string. They should both result in the same formatting.
[
    aaaaaaa,
    b,
] = t"ccccc{expression}ccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment

# The target splits because of the magic trailing comma
# The string is **not** joined because it with the inlined comment exceeds the line length limit.
a[
    aaaaaaa,
    b,
] = (
    t"ccccc{expression}cccccccccccccccccccc"
    t"cccccccccccccccccccccccccccccccccccccccccc"
)  # comment


# The target should be flat
# The string should be joined because it fits into the line length
a[aaaaaaa, b] = t"ccccc{expression}ccccccccccccccccccccccccccccccccccc"  # comment

# Same but starting with a joined string. They should both result in the same formatting.
a[aaaaaaa, b] = t"ccccc{expression}ccccccccccccccccccccccccccccccccccc"  # comment

# The target should be flat
# The string gets parenthesized because it, with the inlined comment, exceeds the line length limit.
a[aaaaaaa, b] = (
    t"ccccc{expression}ccccccccccc"
    t"ccccccccccccccccccccccccccccccccccccccccccc"
)  # comment


# Split an overlong target, but join the string if it fits
a[
    aaaaaaa, b
].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
    t"ccccc{expression}ccccccccccccccccccccccccccccccccccccccccc"  # comment
)

# Split both if necessary and keep multiline
a[
    aaaaaaa, b
].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
    t"ccccc{expression}cccccccccccccccccccccccccccccccc"
    t"ccccccccccccccccccccccccccccccc"
)  # comment

# Don't inline t-strings that contain expressions that are guaranteed to split, e.b. because of a magic trailing comma
aaaaaaaaaaaaaaaaaa = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
        [
            a,
        ]
    }"
    t"moreeeeeeeeeeeeeeeeeeee"
    t"test"
)  # comment

aaaaaaaaaaaaaaaaaa = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
        [
            a,
        ]
    }"
    t"moreeeeeeeeeeeeeeeeeeee"
    t"test"  # comment
)

aaaaa[aaaaaaaaaaa] = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
        [
            a,
        ]
    }"
    t"moreeeeeeeeeeeeeeeeeeee"
    t"test"
)  # comment

aaaaa[aaaaaaaaaaa] = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
        [
            a,
        ]
    }"
    t"moreeeeeeeeeeeeeeeeeeee"
    t"test"  # comment
)

# Don't inline t-strings that contain commented expressions
aaaaaaaaaaaaaaaaaa = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeee{
        [
            a  # comment
        ]
    }"
    t"moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaa[aaaaaaaaaaa] = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeee{
        [
            a  # comment
        ]
    }"
    t"moreeeeeeeeeeeeeeeeeetest"  # comment
)

# Don't inline t-strings with multiline debug expressions:
aaaaaaaaaaaaaaaaaa = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeee{
    a=}"
    t"moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaaaaaaaaaaaaaaa = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeee{a +
    b=}"
    t"moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaaaaaaaaaaaaaaa = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeee{a
    =}"
    t"moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaa[aaaaaaaaaaa] = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeee{
    a=}"
    t"moreeeeeeeeeeeeeeeeeetest"  # comment
)

aaaaa[aaaaaaaaaaa] = (
    t"testeeeeeeeeeeeeeeeeeeeeeeeee{a
    =}"
    t"moreeeeeeeeeeeeeeeeeetest"  # comment
)


# Trailing last-part comments

a = (
    "a"
    "b"  # belongs to `b`
)

a: Literal[str] = (
    "a"
    "b"  # belongs to `b`
)

a += (
    "a"
    "b"  # belongs to `b`
)

a = (
    r"a"
    r"b"  # belongs to `b`
)

a = "ab"  # belongs to the assignment

a = (
    "a"
    "b"  # belongs to `b`
)

a = "ab"  # belongs to the f-string expression

a = "ab"  # belongs to the f-string expression

a = (
    "ab"
    # belongs to the f-string expression
)

# There's no "right" answer if some parts are on the same line while others are on separate lines.
# This is likely a comment for one of the last two parts but could also just be a comment for the entire f-string expression.
# Because there's no right answer, follow what we do elsewhere and associate the comment with the outer-most node which
# is the f-string expression.
a = (
    "a"
    "b"
    "ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
)  # belongs to the f-string expression

logger.error(
    f"Failed to run task {task} for jobwith id {str(job.id)}"  # type: ignore[union-attr]
)

a = (
    10 + f"Exception in {{call_back_name}} '{msg}'"  # belongs to binary operation
)

a = 10 + (
    f"Exception in {{call_back_name}} '{msg}'"  # belongs to f-string
)

self._attr_unique_id = (
    f"{self._device.temperature.group_address_state}_"
    f"{self._device.target_temperature.group_address_state}_"
    f"{self._device.target_temperature.group_address}_"
    f"{self._device._setpoint_shift.group_address}"  # noqa: SLF001
)

return (
    f"Exception in {call_back_name} when handling msg on "
    f"'{msg.topic}': '{msg.payload}'"  # type: ignore[str-bytes-safe]
)
```


## Unsupported Syntax Errors
error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:127:1
    |
126 | # First break the right, join the string
127 | type A[str, int, number] = (
    | ^^^^ Cannot use `type` alias statement on Python 3.10 (syntax was added in Python 3.12)
128 |     "Literal[string, int] | None | CustomType| OtherCustomTypeExcee"  # comment
129 | )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:132:1
    |
131 | # Keep multiline if overlong
132 | type A[str, int, number] = (
    | ^^^^ Cannot use `type` alias statement on Python 3.10 (syntax was added in Python 3.12)
133 |     "Literal[string, int] | None | "
134 |     "CustomTypeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:138:1
    |
137 | # Break the left if it is over-long, join the string
138 | type Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[
    | ^^^^ Cannot use `type` alias statement on Python 3.10 (syntax was added in Python 3.12)
139 |     stringgggggggggg,
140 |     inttttttttttttttttttttttt,
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:145:1
    |
144 | # Break both if necessary and keep multiline
145 | type Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[
    | ^^^^ Cannot use `type` alias statement on Python 3.10 (syntax was added in Python 3.12)
146 |     stringgggggggggg,
147 |     inttttttttttttttttttttttt,
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:274:16
    |
272 |     f"testeeeeeeeeeeeeeeeeeeeeeeeee{
273 |         [
274 |             a  # comment
    |                ^^^^^^^^^ Cannot use comments in f-strings on Python 3.10 (syntax was added in Python 3.12)
275 |         ]
276 |     }"
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:283:16
    |
281 |     f"testeeeeeeeeeeeeeeeeeeeeeeeee{
282 |         [
283 |             a  # comment
    |                ^^^^^^^^^ Cannot use comments in f-strings on Python 3.10 (syntax was added in Python 3.12)
284 |         ]
285 |     }"
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:326:15
    |
325 | # Flatten and join the t-string
326 | aaaaaaaaaaa = t"test{expression}flatcean beeeeeeee {joined} eeeeeeeeeeeeeeeee"  # inline
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
327 |
328 | # Parenthesize the value and join it, inline the comment
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:330:5
    |
328 | # Parenthesize the value and join it, inline the comment
329 | aaaaaaaaaaa = (
330 |     t"test{expression}flatcean beeeeeeee {joined} eeeeeeeeeeeeeeeeeeeeeeeeeee"  # inline
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
331 | )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:335:5
    |
333 | # Parenthesize the t-string and keep it multiline because it doesn't fit on a single line including the comment
334 | aaaaaaaaaaa = (
335 |     t"test{expression}flat"
    |     ^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
336 |     t"cean beeeeeeee {joined} eeeeeeeeeeeeeeeeeeeeeeeeeeeee"
337 | )  # inline
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:336:5
    |
334 | aaaaaaaaaaa = (
335 |     t"test{expression}flat"
336 |     t"cean beeeeeeee {joined} eeeeeeeeeeeeeeeeeeeeeeeeeeeee"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
337 | )  # inline
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:345:5
    |
343 |     aaaaaaa,
344 |     b,
345 | ] = t"ccccc{expression}ccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:352:5
    |
350 |     aaaaaaa,
351 |     b,
352 | ] = t"ccccc{expression}ccccccccccccccccccccccccccccccccccccccccccccccccccccc"  # comment
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
353 |
354 | # The target splits because of the magic trailing comma
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:360:5
    |
358 |     b,
359 | ] = (
360 |     t"ccccc{expression}cccccccccccccccccccc"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
361 |     t"cccccccccccccccccccccccccccccccccccccccccc"
362 | )  # comment
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:361:5
    |
359 | ] = (
360 |     t"ccccc{expression}cccccccccccccccccccc"
361 |     t"cccccccccccccccccccccccccccccccccccccccccc"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
362 | )  # comment
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:367:17
    |
365 | # The target should be flat
366 | # The string should be joined because it fits into the line length
367 | a[aaaaaaa, b] = t"ccccc{expression}ccccccccccccccccccccccccccccccccccc"  # comment
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
368 |
369 | # Same but starting with a joined string. They should both result in the same formatting.
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:370:17
    |
369 | # Same but starting with a joined string. They should both result in the same formatting.
370 | a[aaaaaaa, b] = t"ccccc{expression}ccccccccccccccccccccccccccccccccccc"  # comment
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
371 |
372 | # The target should be flat
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:375:5
    |
373 | # The string gets parenthesized because it, with the inlined comment, exceeds the line length limit.
374 | a[aaaaaaa, b] = (
375 |     t"ccccc{expression}ccccccccccc"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
376 |     t"ccccccccccccccccccccccccccccccccccccccccccc"
377 | )  # comment
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:376:5
    |
374 | a[aaaaaaa, b] = (
375 |     t"ccccc{expression}ccccccccccc"
376 |     t"ccccccccccccccccccccccccccccccccccccccccccc"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
377 | )  # comment
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:384:5
    |
382 |     aaaaaaa, b
383 | ].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
384 |     t"ccccc{expression}ccccccccccccccccccccccccccccccccccccccccc"  # comment
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
385 | )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:391:5
    |
389 |     aaaaaaa, b
390 | ].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
391 |     t"ccccc{expression}cccccccccccccccccccccccccccccccc"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
392 |     t"ccccccccccccccccccccccccccccccc"
393 | )  # comment
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:392:5
    |
390 | ].bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = (
391 |     t"ccccc{expression}cccccccccccccccccccccccccccccccc"
392 |     t"ccccccccccccccccccccccccccccccc"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
393 | )  # comment
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:397:5
    |
395 |   # Don't inline t-strings that contain expressions that are guaranteed to split, e.b. because of a magic trailing comma
396 |   aaaaaaaaaaaaaaaaaa = (
397 | /     t"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
398 | |         [
399 | |             a,
400 | |         ]
401 | |     }"
    | |______^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
402 |       t"moreeeeeeeeeeeeeeeeeeee"
403 |       t"test"
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:402:5
    |
400 |         ]
401 |     }"
402 |     t"moreeeeeeeeeeeeeeeeeeee"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
403 |     t"test"
404 | )  # comment
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:403:5
    |
401 |     }"
402 |     t"moreeeeeeeeeeeeeeeeeeee"
403 |     t"test"
    |     ^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
404 | )  # comment
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:407:5
    |
406 |   aaaaaaaaaaaaaaaaaa = (
407 | /     t"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
408 | |         [
409 | |             a,
410 | |         ]
411 | |     }"
    | |______^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
412 |       t"moreeeeeeeeeeeeeeeeeeee"
413 |       t"test"  # comment
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:412:5
    |
410 |         ]
411 |     }"
412 |     t"moreeeeeeeeeeeeeeeeeeee"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
413 |     t"test"  # comment
414 | )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:413:5
    |
411 |     }"
412 |     t"moreeeeeeeeeeeeeeeeeeee"
413 |     t"test"  # comment
    |     ^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
414 | )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:417:5
    |
416 |   aaaaa[aaaaaaaaaaa] = (
417 | /     t"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
418 | |         [
419 | |             a,
420 | |         ]
421 | |     }"
    | |______^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
422 |       t"moreeeeeeeeeeeeeeeeeeee"
423 |       t"test"
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:422:5
    |
420 |         ]
421 |     }"
422 |     t"moreeeeeeeeeeeeeeeeeeee"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
423 |     t"test"
424 | )  # comment
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:423:5
    |
421 |     }"
422 |     t"moreeeeeeeeeeeeeeeeeeee"
423 |     t"test"
    |     ^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
424 | )  # comment
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:427:5
    |
426 |   aaaaa[aaaaaaaaaaa] = (
427 | /     t"testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee{
428 | |         [
429 | |             a,
430 | |         ]
431 | |     }"
    | |______^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
432 |       t"moreeeeeeeeeeeeeeeeeeee"
433 |       t"test"  # comment
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:432:5
    |
430 |         ]
431 |     }"
432 |     t"moreeeeeeeeeeeeeeeeeeee"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
433 |     t"test"  # comment
434 | )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:433:5
    |
431 |     }"
432 |     t"moreeeeeeeeeeeeeeeeeeee"
433 |     t"test"  # comment
    |     ^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
434 | )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:438:5
    |
436 |   # Don't inline t-strings that contain commented expressions
437 |   aaaaaaaaaaaaaaaaaa = (
438 | /     t"testeeeeeeeeeeeeeeeeeeeeeeeee{
439 | |         [
440 | |             a  # comment
441 | |         ]
442 | |     }"
    | |______^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
443 |       t"moreeeeeeeeeeeeeeeeeetest"  # comment
444 |   )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:443:5
    |
441 |         ]
442 |     }"
443 |     t"moreeeeeeeeeeeeeeeeeetest"  # comment
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
444 | )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:447:5
    |
446 |   aaaaa[aaaaaaaaaaa] = (
447 | /     t"testeeeeeeeeeeeeeeeeeeeeeeeee{
448 | |         [
449 | |             a  # comment
450 | |         ]
451 | |     }"
    | |______^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
452 |       t"moreeeeeeeeeeeeeeeeeetest"  # comment
453 |   )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:452:5
    |
450 |         ]
451 |     }"
452 |     t"moreeeeeeeeeeeeeeeeeetest"  # comment
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
453 | )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:457:5
    |
455 |   # Don't inline t-strings with multiline debug expressions:
456 |   aaaaaaaaaaaaaaaaaa = (
457 | /     t"testeeeeeeeeeeeeeeeeeeeeeeeee{
458 | |     a=}"
    | |________^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
459 |       t"moreeeeeeeeeeeeeeeeeetest"  # comment
460 |   )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:459:5
    |
457 |     t"testeeeeeeeeeeeeeeeeeeeeeeeee{
458 |     a=}"
459 |     t"moreeeeeeeeeeeeeeeeeetest"  # comment
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
460 | )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:463:5
    |
462 |   aaaaaaaaaaaaaaaaaa = (
463 | /     t"testeeeeeeeeeeeeeeeeeeeeeeeee{a +
464 | |     b=}"
    | |________^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
465 |       t"moreeeeeeeeeeeeeeeeeetest"  # comment
466 |   )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:465:5
    |
463 |     t"testeeeeeeeeeeeeeeeeeeeeeeeee{a +
464 |     b=}"
465 |     t"moreeeeeeeeeeeeeeeeeetest"  # comment
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
466 | )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:469:5
    |
468 |   aaaaaaaaaaaaaaaaaa = (
469 | /     t"testeeeeeeeeeeeeeeeeeeeeeeeee{a
470 | |     =}"
    | |_______^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
471 |       t"moreeeeeeeeeeeeeeeeeetest"  # comment
472 |   )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:471:5
    |
469 |     t"testeeeeeeeeeeeeeeeeeeeeeeeee{a
470 |     =}"
471 |     t"moreeeeeeeeeeeeeeeeeetest"  # comment
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
472 | )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:475:5
    |
474 |   aaaaa[aaaaaaaaaaa] = (
475 | /     t"testeeeeeeeeeeeeeeeeeeeeeeeee{
476 | |     a=}"
    | |________^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
477 |       t"moreeeeeeeeeeeeeeeeeetest"  # comment
478 |   )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:477:5
    |
475 |     t"testeeeeeeeeeeeeeeeeeeeeeeeee{
476 |     a=}"
477 |     t"moreeeeeeeeeeeeeeeeeetest"  # comment
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
478 | )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:481:5
    |
480 |   aaaaa[aaaaaaaaaaa] = (
481 | /     t"testeeeeeeeeeeeeeeeeeeeeeeeee{a
482 | |     =}"
    | |_______^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
483 |       t"moreeeeeeeeeeeeeeeeeetest"  # comment
484 |   )
    |

error[invalid-syntax]
   --> join_implicit_concatenated_string_assignment.py:483:5
    |
481 |     t"testeeeeeeeeeeeeeeeeeeeeeeeee{a
482 |     =}"
483 |     t"moreeeeeeeeeeeeeeeeeetest"  # comment
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
484 | )
    |

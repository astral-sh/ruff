---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/ruff/statement/with.py
---
## Input
```python
with aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:
    pass
    # trailing

with a, a:  # after colon
    pass
    # trailing

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
):
    pass
    # trailing


with (
        a  # a
        ,  # comma
        b  # c
        ): # colon
    pass


with (
        a  # a
        as  # as
        # own line
        b  # b
        ,  # comma
        c  # c
        ): # colon
    pass  # body
    # body trailing own

with (
        a  # a
        as  # as
        # own line
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb  # b
): pass


with (a,):  # magic trailing comma
    pass


with (a):  # should remove brackets
    pass

with aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb as c:
    pass


# currently unparsable by black: https://github.com/psf/black/issues/3678
with (name_2 for name_0 in name_4):
    pass
with (a, *b):
    pass

with (
    # leading comment
    a) as b: pass

with (
    # leading comment
    a as b
): pass

with (
    a as b
    # trailing comment
): pass

with (
    a as (
        # leading comment
        b
    )
): pass

with (
    a as (
        b
        # trailing comment
    )
): pass

with (
    a # trailing same line comment
    # trailing own line comment
    as b
): pass

with (a # trailing same line comment
    # trailing own line comment
) as b: pass

with (
    (a
    # trailing own line comment
    )
    as # trailing as same line comment
    b # trailing b same line comment
): pass

with (
    # comment
    a
):
    pass

with (
    a  # comment
):
    pass

with (
    a
    # comment
):
    pass

with (
    # comment
    a as b
):
    pass

with (
    a as b  # comment
):
    pass

with (
    a as b
    # comment
):
    pass

with (
    [
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "bbbbbbbbbb",
        "cccccccccccccccccccccccccccccccccccccccccc",
        dddddddddddddddddddddddddddddddd,
    ] as example1,
    aaaaaaaaaaaaaaaaaaaaaaaaaa
    + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    + cccccccccccccccccccccccccccc
    + ddddddddddddddddd as example2,
    CtxManager2() as example2,
    CtxManager2() as example2,
    CtxManager2() as example2,
):
    pass

with [
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "bbbbbbbbbb",
    "cccccccccccccccccccccccccccccccccccccccccc",
    dddddddddddddddddddddddddddddddd,
] as example1, aaaaaaaaaaaaaaaaaaaaaaaaaa * bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb * cccccccccccccccccccccccccccc + ddddddddddddddddd as example2, CtxManager222222222222222() as example2:
    pass

# Comments on open parentheses
with (  # comment
    CtxManager1() as example1,
    CtxManager2() as example2,
    CtxManager3() as example3,
):
    pass

with (  # outer comment
    (  # inner comment
        CtxManager1()
    ) as example1,
    CtxManager2() as example2,
    CtxManager3() as example3,
):
    pass

with (  # outer comment
    CtxManager()
) as example:
    pass

with (  # outer comment
    CtxManager()
) as example, (  # inner comment
    CtxManager2()
) as example2:
    pass

with (  # outer comment
    CtxManager1(),
    CtxManager2(),
) as example:
    pass

with (  # outer comment
    (  # inner comment
        CtxManager1()
    ),
    CtxManager2(),
) as example:
    pass

# Breaking of with items.
with (test  # bar
      as  # foo
      (
          # test
          foo)):
    pass

with test as (
    # test
    foo):
    pass

with (test  # bar
      as  # foo
      (  # baz
          # test
          foo)):
    pass

with (a as b, c as d):
    pass

with (
    a as b,
    # foo
    c as d
):
    pass

with (
    a as (  # foo
        b
    )
):
    pass

with (
    f(a, ) as b

):
    pass

with (x := 1) as d:
    pass

with (x[1, 2,] as d):
    pass

with (f(a, ) as b, c as d):
    pass

with f(a, ) as b, c as d:
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
) as b:
    pass

with aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb as b:
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
) as b, c as d:
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb as b, c as d):
    pass

with (
    (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb) as b, c as d):
    pass

with (foo() as bar, baz() as bop):
    pass

if True:
    with (
        anyio.CancelScope(shield=True)
        if get_running_loop()
        else contextlib.nullcontext()
    ):
        pass

if True:
    with (
        anyio.CancelScope(shield=True)
        and B and [aaaaaaaa, bbbbbbbbbbbbb, cccccccccc, dddddddddddd, eeeeeeeeeeeee]
    ):
        pass

if True:
    with anyio.CancelScope(shield=True) if get_running_loop() else contextlib.nullcontext():
        pass

if True:
    with anyio.CancelScope(shield=True) if get_running_loop() else contextlib.nullcontext() as c:
        pass

with Child(aaaaaaaaa, bbbbbbbbbbbbbbb, cccccc), Document(aaaaa, bbbbbbbbbb, ddddddddddddd):
    pass

# Regression test for https://github.com/astral-sh/ruff/issues/10267
with (
    open(
        "/etc/hosts"  # This is an incredibly long comment that has been replaced for sanitization
    )
):
    pass

with aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb:
    pass

with aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb as b:
    pass

if True:
    with anyio.CancelScope(shield=True) if get_running_loop() else contextlib.nullcontext() as b:
        pass


# Regression test for https://github.com/astral-sh/ruff/issues/14001
with (
    open(
        "some/path.txt",
        "rb",
    )
    if True
    else open("other/path.txt")
    # Bar
):
    pass


with (  # trailing comment
    open(
        "some/path.txt",
        "rb",
    )
    if True
    else open("other/path.txt")
    # Bar
):
    pass


with (
    (
        open(
            "some/path.txt",
            "rb",
        )
        if True
        else open("other/path.txt")
    )
    # Bar
):
    pass
```

## Outputs
### Output 1
```
indent-style               = space
line-width                 = 88
indent-width               = 4
quote-style                = Double
line-ending                = LineFeed
magic-trailing-comma       = Respect
docstring-code             = Disabled
docstring-code-line-width  = "dynamic"
preview                    = Disabled
target_version             = 3.8
source_type                = Python
```

```python
with aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:
    pass
    # trailing

with a, a:  # after colon
    pass
    # trailing

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
):
    pass
    # trailing


with (
    a,  # a  # comma
    b,  # c
):  # colon
    pass


with (
    a as (  # a  # as
        # own line
        b
    ),  # b  # comma
    c,  # c
):  # colon
    pass  # body
    # body trailing own

with (
    a as (  # a  # as
        # own line
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    )  # b
):
    pass


with (
    a,
):  # magic trailing comma
    pass


with a:  # should remove brackets
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
) as c:
    pass


# currently unparsable by black: https://github.com/psf/black/issues/3678
with (name_2 for name_0 in name_4):
    pass
with (a, *b):
    pass

with (
    # leading comment
    a
) as b:
    pass

with (
    # leading comment
    a as b
):
    pass

with (
    a as b
    # trailing comment
):
    pass

with a as (
    # leading comment
    b
):
    pass

with a as (
    b
    # trailing comment
):
    pass

with (
    a  # trailing same line comment
    # trailing own line comment
) as b:
    pass

with (
    a  # trailing same line comment
    # trailing own line comment
) as b:
    pass

with (
    (
        a
        # trailing own line comment
    ) as (  # trailing as same line comment
        b
    )  # trailing b same line comment
):
    pass

with (
    # comment
    a
):
    pass

with (
    a  # comment
):
    pass

with (
    a
    # comment
):
    pass

with (
    # comment
    a as b
):
    pass

with (
    a as b  # comment
):
    pass

with (
    a as b
    # comment
):
    pass

with (
    [
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "bbbbbbbbbb",
        "cccccccccccccccccccccccccccccccccccccccccc",
        dddddddddddddddddddddddddddddddd,
    ] as example1,
    aaaaaaaaaaaaaaaaaaaaaaaaaa
    + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    + cccccccccccccccccccccccccccc
    + ddddddddddddddddd as example2,
    CtxManager2() as example2,
    CtxManager2() as example2,
    CtxManager2() as example2,
):
    pass

with [
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "bbbbbbbbbb",
    "cccccccccccccccccccccccccccccccccccccccccc",
    dddddddddddddddddddddddddddddddd,
] as example1, aaaaaaaaaaaaaaaaaaaaaaaaaa * bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb * cccccccccccccccccccccccccccc + ddddddddddddddddd as example2, CtxManager222222222222222() as example2:
    pass

# Comments on open parentheses
with (  # comment
    CtxManager1() as example1,
    CtxManager2() as example2,
    CtxManager3() as example3,
):
    pass

with (  # outer comment
    (  # inner comment
        CtxManager1()
    ) as example1,
    CtxManager2() as example2,
    CtxManager3() as example3,
):
    pass

with (  # outer comment
    CtxManager()
) as example:
    pass

with (  # outer comment
    CtxManager()
) as example, (  # inner comment
    CtxManager2()
) as example2:
    pass

with (  # outer comment
    CtxManager1(),
    CtxManager2(),
) as example:
    pass

with (  # outer comment
    (  # inner comment
        CtxManager1()
    ),
    CtxManager2(),
) as example:
    pass

# Breaking of with items.
with (
    test  # bar
) as (  # foo
    # test
    foo
):
    pass

with test as (
    # test
    foo
):
    pass

with (
    test  # bar
) as (  # foo  # baz
    # test
    foo
):
    pass

with a as b, c as d:
    pass

with (
    a as b,
    # foo
    c as d,
):
    pass

with a as (  # foo
    b
):
    pass

with f(
    a,
) as b:
    pass

with (x := 1) as d:
    pass

with x[
    1,
    2,
] as d:
    pass

with (
    f(
        a,
    ) as b,
    c as d,
):
    pass

with f(
    a,
) as b, c as d:
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
) as b:
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
) as b:
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
) as b, c as d:
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb as b,
    c as d,
):
    pass

with (
    (
        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    ) as b,
    c as d,
):
    pass

with foo() as bar, baz() as bop:
    pass

if True:
    with (
        anyio.CancelScope(shield=True)
        if get_running_loop()
        else contextlib.nullcontext()
    ):
        pass

if True:
    with (
        anyio.CancelScope(shield=True)
        and B
        and [aaaaaaaa, bbbbbbbbbbbbb, cccccccccc, dddddddddddd, eeeeeeeeeeeee]
    ):
        pass

if True:
    with (
        anyio.CancelScope(shield=True)
        if get_running_loop()
        else contextlib.nullcontext()
    ):
        pass

if True:
    with (
        anyio.CancelScope(shield=True)
        if get_running_loop()
        else contextlib.nullcontext()
    ) as c:
        pass

with Child(aaaaaaaaa, bbbbbbbbbbbbbbb, cccccc), Document(
    aaaaa, bbbbbbbbbb, ddddddddddddd
):
    pass

# Regression test for https://github.com/astral-sh/ruff/issues/10267
with open(
    "/etc/hosts"  # This is an incredibly long comment that has been replaced for sanitization
):
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
):
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
) as b:
    pass

if True:
    with (
        anyio.CancelScope(shield=True)
        if get_running_loop()
        else contextlib.nullcontext()
    ) as b:
        pass


# Regression test for https://github.com/astral-sh/ruff/issues/14001
with (
    open(
        "some/path.txt",
        "rb",
    )
    if True
    else open("other/path.txt")
    # Bar
):
    pass


with (  # trailing comment
    open(
        "some/path.txt",
        "rb",
    )
    if True
    else open("other/path.txt")
    # Bar
):
    pass


with (
    open(
        "some/path.txt",
        "rb",
    )
    if True
    else open("other/path.txt")
    # Bar
):
    pass
```


### Unsupported Syntax Errors
error[invalid-syntax]
  --> with.py:9:6
   |
 7 |     # trailing
 8 |
 9 | with (
   |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
10 |     aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
11 |     aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
   |

error[invalid-syntax]
  --> with.py:17:6
   |
17 | with (
   |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
18 |     a,  # a  # comma
19 |     b,  # c
   |

error[invalid-syntax]
  --> with.py:24:6
   |
24 | with (
   |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
25 |     a as (  # a  # as
26 |         # own line
   |

error[invalid-syntax]
  --> with.py:34:6
   |
32 |     # body trailing own
33 |
34 | with (
   |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
35 |     a as (  # a  # as
36 |         # own line
   |

error[invalid-syntax]
  --> with.py:43:6
   |
43 | with (
   |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
44 |     a,
45 | ):  # magic trailing comma
   |

error[invalid-syntax]
  --> with.py:70:6
   |
68 |     pass
69 |
70 | with (
   |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
71 |     # leading comment
72 |     a as b
   |

error[invalid-syntax]
  --> with.py:76:6
   |
74 |     pass
75 |
76 | with (
   |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
77 |     a as b
78 |     # trailing comment
   |

error[invalid-syntax]
   --> with.py:106:6
    |
104 |     pass
105 |
106 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
107 |     (
108 |         a
    |

error[invalid-syntax]
   --> with.py:116:6
    |
114 |     pass
115 |
116 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
117 |     # comment
118 |     a
    |

error[invalid-syntax]
   --> with.py:122:6
    |
120 |     pass
121 |
122 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
123 |     a  # comment
124 | ):
    |

error[invalid-syntax]
   --> with.py:127:6
    |
125 |     pass
126 |
127 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
128 |     a
129 |     # comment
    |

error[invalid-syntax]
   --> with.py:133:6
    |
131 |     pass
132 |
133 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
134 |     # comment
135 |     a as b
    |

error[invalid-syntax]
   --> with.py:139:6
    |
137 |     pass
138 |
139 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
140 |     a as b  # comment
141 | ):
    |

error[invalid-syntax]
   --> with.py:144:6
    |
142 |     pass
143 |
144 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
145 |     a as b
146 |     # comment
    |

error[invalid-syntax]
   --> with.py:150:6
    |
148 |     pass
149 |
150 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
151 |     [
152 |         "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    |

error[invalid-syntax]
   --> with.py:176:6
    |
175 | # Comments on open parentheses
176 | with (  # comment
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
177 |     CtxManager1() as example1,
178 |     CtxManager2() as example2,
    |

error[invalid-syntax]
   --> with.py:183:6
    |
181 |     pass
182 |
183 | with (  # outer comment
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
184 |     (  # inner comment
185 |         CtxManager1()
    |

error[invalid-syntax]
   --> with.py:244:6
    |
242 |     pass
243 |
244 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
245 |     a as b,
246 |     # foo
    |

error[invalid-syntax]
   --> with.py:270:6
    |
268 |     pass
269 |
270 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
271 |     f(
272 |         a,
    |

error[invalid-syntax]
   --> with.py:298:6
    |
296 |     pass
297 |
298 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
299 |     aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
300 |     + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb as b,
    |

error[invalid-syntax]
   --> with.py:305:6
    |
303 |     pass
304 |
305 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
306 |     (
307 |         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    |

error[invalid-syntax]
   --> with.py:317:10
    |
316 | if True:
317 |     with (
    |          ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
318 |         anyio.CancelScope(shield=True)
319 |         if get_running_loop()
    |

error[invalid-syntax]
   --> with.py:325:10
    |
324 | if True:
325 |     with (
    |          ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
326 |         anyio.CancelScope(shield=True)
327 |         and B
    |

error[invalid-syntax]
   --> with.py:333:10
    |
332 | if True:
333 |     with (
    |          ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
334 |         anyio.CancelScope(shield=True)
335 |         if get_running_loop()
    |

error[invalid-syntax]
   --> with.py:359:6
    |
357 |     pass
358 |
359 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
360 |     aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
361 | ):
    |

error[invalid-syntax]
   --> with.py:379:6
    |
378 | # Regression test for https://github.com/astral-sh/ruff/issues/14001
379 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
380 |     open(
381 |         "some/path.txt",
    |

error[invalid-syntax]
   --> with.py:391:6
    |
391 | with (  # trailing comment
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
392 |     open(
393 |         "some/path.txt",
    |

error[invalid-syntax]
   --> with.py:403:6
    |
403 | with (
    |      ^ Cannot use parentheses within a `with` statement on Python 3.8 (syntax was added in Python 3.9)
404 |     open(
405 |         "some/path.txt",
    |


### Output 2
```
indent-style               = space
line-width                 = 88
indent-width               = 4
quote-style                = Double
line-ending                = LineFeed
magic-trailing-comma       = Respect
docstring-code             = Disabled
docstring-code-line-width  = "dynamic"
preview                    = Enabled
target_version             = 3.9
source_type                = Python
```

```python
with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
):
    pass
    # trailing

with a, a:  # after colon
    pass
    # trailing

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
):
    pass
    # trailing


with (
    a,  # a  # comma
    b,  # c
):  # colon
    pass


with (
    a as (  # a  # as
        # own line
        b
    ),  # b  # comma
    c,  # c
):  # colon
    pass  # body
    # body trailing own

with (
    a as (  # a  # as
        # own line
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    )  # b
):
    pass


with (
    a,
):  # magic trailing comma
    pass


with a:  # should remove brackets
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb as c
):
    pass


# currently unparsable by black: https://github.com/psf/black/issues/3678
with (name_2 for name_0 in name_4):
    pass
with (a, *b):
    pass

with (
    # leading comment
    a
) as b:
    pass

with (
    # leading comment
    a as b
):
    pass

with (
    a as b
    # trailing comment
):
    pass

with (
    a as (
        # leading comment
        b
    )
):
    pass

with (
    a as (
        b
        # trailing comment
    )
):
    pass

with (
    a as b  # trailing same line comment
    # trailing own line comment
):
    pass

with (
    a  # trailing same line comment
    # trailing own line comment
) as b:
    pass

with (
    (
        a
        # trailing own line comment
    ) as (  # trailing as same line comment
        b
    )  # trailing b same line comment
):
    pass

with (
    # comment
    a
):
    pass

with (
    a  # comment
):
    pass

with (
    a
    # comment
):
    pass

with (
    # comment
    a as b
):
    pass

with (
    a as b  # comment
):
    pass

with (
    a as b
    # comment
):
    pass

with (
    [
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "bbbbbbbbbb",
        "cccccccccccccccccccccccccccccccccccccccccc",
        dddddddddddddddddddddddddddddddd,
    ] as example1,
    aaaaaaaaaaaaaaaaaaaaaaaaaa
    + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    + cccccccccccccccccccccccccccc
    + ddddddddddddddddd as example2,
    CtxManager2() as example2,
    CtxManager2() as example2,
    CtxManager2() as example2,
):
    pass

with (
    [
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "bbbbbbbbbb",
        "cccccccccccccccccccccccccccccccccccccccccc",
        dddddddddddddddddddddddddddddddd,
    ] as example1,
    aaaaaaaaaaaaaaaaaaaaaaaaaa
    * bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    * cccccccccccccccccccccccccccc
    + ddddddddddddddddd as example2,
    CtxManager222222222222222() as example2,
):
    pass

# Comments on open parentheses
with (  # comment
    CtxManager1() as example1,
    CtxManager2() as example2,
    CtxManager3() as example3,
):
    pass

with (  # outer comment
    (  # inner comment
        CtxManager1()
    ) as example1,
    CtxManager2() as example2,
    CtxManager3() as example3,
):
    pass

with (  # outer comment
    CtxManager()
) as example:
    pass

with (
    (  # outer comment
        CtxManager()
    ) as example,
    (  # inner comment
        CtxManager2()
    ) as example2,
):
    pass

with (  # outer comment
    CtxManager1(),
    CtxManager2(),
) as example:
    pass

with (  # outer comment
    (  # inner comment
        CtxManager1()
    ),
    CtxManager2(),
) as example:
    pass

# Breaking of with items.
with (
    test as (  # bar  # foo
        # test
        foo
    )
):
    pass

with (
    test as (
        # test
        foo
    )
):
    pass

with (
    test as (  # bar  # foo  # baz
        # test
        foo
    )
):
    pass

with a as b, c as d:
    pass

with (
    a as b,
    # foo
    c as d,
):
    pass

with (
    a as (  # foo
        b
    )
):
    pass

with f(
    a,
) as b:
    pass

with (x := 1) as d:
    pass

with x[
    1,
    2,
] as d:
    pass

with (
    f(
        a,
    ) as b,
    c as d,
):
    pass

with (
    f(
        a,
    ) as b,
    c as d,
):
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
) as b:
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb as b
):
    pass

with (
    (
        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    ) as b,
    c as d,
):
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb as b,
    c as d,
):
    pass

with (
    (
        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    ) as b,
    c as d,
):
    pass

with foo() as bar, baz() as bop:
    pass

if True:
    with (
        anyio.CancelScope(shield=True)
        if get_running_loop()
        else contextlib.nullcontext()
    ):
        pass

if True:
    with (
        anyio.CancelScope(shield=True)
        and B
        and [aaaaaaaa, bbbbbbbbbbbbb, cccccccccc, dddddddddddd, eeeeeeeeeeeee]
    ):
        pass

if True:
    with (
        anyio.CancelScope(shield=True)
        if get_running_loop()
        else contextlib.nullcontext()
    ):
        pass

if True:
    with (
        anyio.CancelScope(shield=True)
        if get_running_loop()
        else contextlib.nullcontext() as c
    ):
        pass

with (
    Child(aaaaaaaaa, bbbbbbbbbbbbbbb, cccccc),
    Document(aaaaa, bbbbbbbbbb, ddddddddddddd),
):
    pass

# Regression test for https://github.com/astral-sh/ruff/issues/10267
with open(
    "/etc/hosts"  # This is an incredibly long comment that has been replaced for sanitization
):
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
):
    pass

with (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb as b
):
    pass

if True:
    with (
        anyio.CancelScope(shield=True)
        if get_running_loop()
        else contextlib.nullcontext() as b
    ):
        pass


# Regression test for https://github.com/astral-sh/ruff/issues/14001
with (
    open(
        "some/path.txt",
        "rb",
    )
    if True
    else open("other/path.txt")
    # Bar
):
    pass


with (  # trailing comment
    open(
        "some/path.txt",
        "rb",
    )
    if True
    else open("other/path.txt")
    # Bar
):
    pass


with (
    open(
        "some/path.txt",
        "rb",
    )
    if True
    else open("other/path.txt")
    # Bar
):
    pass
```

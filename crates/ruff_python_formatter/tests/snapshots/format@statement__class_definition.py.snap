---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/ruff/statement/class_definition.py
---
## Input
```python
# comment

class Test(
    Aaaaaaaaaaaaaaaaa,
    Bbbbbbbbbbbbbbbb,
    DDDDDDDDDDDDDDDD,
    EEEEEEEEEEEEEE,
    metaclass=meta,
):
    pass


class Test((Aaaaaaaaaaaaaaaaa), Bbbbbbbbbbbbbbbb, metaclass=meta):
    pass

class Test( # trailing class comment
    Aaaaaaaaaaaaaaaaa, # trailing comment

    # in between comment

    Bbbbbbbbbbbbbbbb,
    # another leading comment
    DDDDDDDDDDDDDDDD,
    EEEEEEEEEEEEEE,
    # meta comment
    metaclass=meta, # trailing meta comment
):
    pass

class Test((Aaaa)):
    ...


class Test(aaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbb + cccccccccccccccccccccccc + dddddddddddddddddddddd + eeeeeeeee, ffffffffffffffffff, gggggggggggggggggg):
    pass

class Test(aaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbb * cccccccccccccccccccccccc + dddddddddddddddddddddd + eeeeeeeee, ffffffffffffffffff, gggggggggggggggggg):
    pass

class TestTrailingComment1(Aaaa): # trailing comment
    pass


class TestTrailingComment2: # trailing comment
    pass


class TestTrailingComment3[T]: # trailing comment
    pass


class TestTrailingComment4[T](A): # trailing comment
    pass


class Test:
    """Docstring"""


class Test:
    # comment
    """Docstring"""


class Test:
    """Docstring"""
    x = 1


class Test:
    """Docstring"""
    # comment
    x = 1


class Test:

    """Docstring"""


class Test:
    # comment

    """Docstring"""


class Test:

    # comment

    """Docstring"""


class Test:

    """Docstring"""
    x = 1


class Test:

    """Docstring"""
    # comment
    x = 1


class C(): # comment
    pass


class C(  # comment
):
    pass


class C(
    # comment
):
    pass


class C(): # comment
    pass


class C(  # comment
    # comment
    1
):
    pass


class C(
    1
    # comment
):
    pass


@dataclass
# Copied from transformers.models.clip.modeling_clip.CLIPOutput with CLIP->AltCLIP
class AltCLIPOutput(ModelOutput):
    ...


@dataclass
class AltCLIPOutput( # Copied from transformers.models.clip.modeling_clip.CLIPOutput with CLIP->AltCLIP
):
    ...


@dataclass
class AltCLIPOutput(
    # Copied from transformers.models.clip.modeling_clip.CLIPOutput with CLIP->AltCLIP
):
    ...


class TestTypeParams[Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, Cccccccccccccccccccccc]:
    pass


class TestTypeParams[Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, *Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, **Cccccccccccccccccccccc]:
    pass


class TestTypeParams[Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]:
    pass


class TestTypeParams[*Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]:
    pass


class TestTypeParams[**Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]:
    pass


class TestTypeParams[**P, *Ts, T]:
    pass


class TestTypeParams[ # trailing bracket comment
    # leading comment
    A,

    # in between comment

    B,
    # another leading comment
    C,
    D, # trailing comment
    # leading bracket comment
]:
    pass



class TestTypeParams[Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa](B, C, D):
    pass



class TestTypeParams[Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa](Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, Cccccccccccccccccccccccc, Ddddddddddddddddddddddddd):
    pass



class TestTypeParams[A, B, C](meta=Aaaaaaaaaaaaaaaaaaaaaa):
    pass


# Regression test for: https://github.com/astral-sh/ruff/pull/7001
class QuerySet(AltersData):
    """Represent a lazy database lookup for a set of objects."""

    def as_manager(cls):
        # Address the circular dependency between `Queryset` and `Manager`.
        from django.db.models.manager import Manager

        manager = Manager.from_queryset(cls)()
        manager._built_with_as_manager = True
        return manager

    as_manager.queryset_only = True
    as_manager = classmethod(as_manager)


# Decorators
@decorator
# comment
class Foo1: ...

@decorator
# comment
class Foo2(Foo1): ...

@decorator
# comment
class Foo3[T]: ...

@decorator  # comment
class Foo4: ...

@decorator
# comment
@decorato2
class Foo5: ...
```

## Output
```python
# comment


class Test(
    Aaaaaaaaaaaaaaaaa,
    Bbbbbbbbbbbbbbbb,
    DDDDDDDDDDDDDDDD,
    EEEEEEEEEEEEEE,
    metaclass=meta,
):
    pass


class Test((Aaaaaaaaaaaaaaaaa), Bbbbbbbbbbbbbbbb, metaclass=meta):
    pass


class Test(  # trailing class comment
    Aaaaaaaaaaaaaaaaa,  # trailing comment
    # in between comment
    Bbbbbbbbbbbbbbbb,
    # another leading comment
    DDDDDDDDDDDDDDDD,
    EEEEEEEEEEEEEE,
    # meta comment
    metaclass=meta,  # trailing meta comment
):
    pass


class Test((Aaaa)): ...


class Test(
    aaaaaaaaaaaaaaa
    + bbbbbbbbbbbbbbbbbbbbbb
    + cccccccccccccccccccccccc
    + dddddddddddddddddddddd
    + eeeeeeeee,
    ffffffffffffffffff,
    gggggggggggggggggg,
):
    pass


class Test(
    aaaaaaaaaaaaaaa
    + bbbbbbbbbbbbbbbbbbbbbb * cccccccccccccccccccccccc
    + dddddddddddddddddddddd
    + eeeeeeeee,
    ffffffffffffffffff,
    gggggggggggggggggg,
):
    pass


class TestTrailingComment1(Aaaa):  # trailing comment
    pass


class TestTrailingComment2:  # trailing comment
    pass


class TestTrailingComment3[T]:  # trailing comment
    pass


class TestTrailingComment4[T](A):  # trailing comment
    pass


class Test:
    """Docstring"""


class Test:
    # comment
    """Docstring"""


class Test:
    """Docstring"""

    x = 1


class Test:
    """Docstring"""

    # comment
    x = 1


class Test:
    """Docstring"""


class Test:
    # comment

    """Docstring"""


class Test:
    # comment

    """Docstring"""


class Test:
    """Docstring"""

    x = 1


class Test:
    """Docstring"""

    # comment
    x = 1


class C:  # comment
    pass


class C:  # comment
    pass


class C(
    # comment
):
    pass


class C:  # comment
    pass


class C(  # comment
    # comment
    1
):
    pass


class C(
    1
    # comment
):
    pass


@dataclass
# Copied from transformers.models.clip.modeling_clip.CLIPOutput with CLIP->AltCLIP
class AltCLIPOutput(ModelOutput): ...


@dataclass
class AltCLIPOutput: ...  # Copied from transformers.models.clip.modeling_clip.CLIPOutput with CLIP->AltCLIP


@dataclass
class AltCLIPOutput(
    # Copied from transformers.models.clip.modeling_clip.CLIPOutput with CLIP->AltCLIP
): ...


class TestTypeParams[
    Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
    Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
    Cccccccccccccccccccccc,
]:
    pass


class TestTypeParams[
    Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
    *Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
    **Cccccccccccccccccccccc,
]:
    pass


class TestTypeParams[
    Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
]:
    pass


class TestTypeParams[
    *Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
]:
    pass


class TestTypeParams[
    **Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
]:
    pass


class TestTypeParams[**P, *Ts, T]:
    pass


class TestTypeParams[  # trailing bracket comment
    # leading comment
    A,
    # in between comment
    B,
    # another leading comment
    C,
    D,  # trailing comment
    # leading bracket comment
]:
    pass


class TestTypeParams[
    Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
](B, C, D):
    pass


class TestTypeParams[
    Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
](
    Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
    Cccccccccccccccccccccccc,
    Ddddddddddddddddddddddddd,
):
    pass


class TestTypeParams[A, B, C](meta=Aaaaaaaaaaaaaaaaaaaaaa):
    pass


# Regression test for: https://github.com/astral-sh/ruff/pull/7001
class QuerySet(AltersData):
    """Represent a lazy database lookup for a set of objects."""

    def as_manager(cls):
        # Address the circular dependency between `Queryset` and `Manager`.
        from django.db.models.manager import Manager

        manager = Manager.from_queryset(cls)()
        manager._built_with_as_manager = True
        return manager

    as_manager.queryset_only = True
    as_manager = classmethod(as_manager)


# Decorators
@decorator
# comment
class Foo1: ...


@decorator
# comment
class Foo2(Foo1): ...


@decorator
# comment
class Foo3[T]: ...


@decorator  # comment
class Foo4: ...


@decorator
# comment
@decorato2
class Foo5: ...
```


## Unsupported Syntax Errors
error[invalid-syntax]: Cannot use type parameter lists on Python 3.10 (syntax was added in Python 3.12)
  --> class_definition.py:65:27
   |
65 | class TestTrailingComment3[T]:  # trailing comment
   |                           ^^^
66 |     pass
   |

error[invalid-syntax]: Cannot use type parameter lists on Python 3.10 (syntax was added in Python 3.12)
  --> class_definition.py:69:27
   |
69 | class TestTrailingComment4[T](A):  # trailing comment
   |                           ^^^
70 |     pass
   |

error[invalid-syntax]: Cannot use type parameter lists on Python 3.10 (syntax was added in Python 3.12)
   --> class_definition.py:171:21
    |
171 |   class TestTypeParams[
    |  _____________________^
172 | |     Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
173 | |     Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
174 | |     Cccccccccccccccccccccc,
175 | | ]:
    | |_^
176 |       pass
    |

error[invalid-syntax]: Cannot use type parameter lists on Python 3.10 (syntax was added in Python 3.12)
   --> class_definition.py:179:21
    |
179 |   class TestTypeParams[
    |  _____________________^
180 | |     Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
181 | |     *Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
182 | |     **Cccccccccccccccccccccc,
183 | | ]:
    | |_^
184 |       pass
    |

error[invalid-syntax]: Cannot use type parameter lists on Python 3.10 (syntax was added in Python 3.12)
   --> class_definition.py:187:21
    |
187 |   class TestTypeParams[
    |  _____________________^
188 | |     Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa…
189 | | ]:
    | |_^
190 |       pass
    |

error[invalid-syntax]: Cannot use type parameter lists on Python 3.10 (syntax was added in Python 3.12)
   --> class_definition.py:193:21
    |
193 |   class TestTypeParams[
    |  _____________________^
194 | |     *Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa…
195 | | ]:
    | |_^
196 |       pass
    |

error[invalid-syntax]: Cannot use type parameter lists on Python 3.10 (syntax was added in Python 3.12)
   --> class_definition.py:199:21
    |
199 |   class TestTypeParams[
    |  _____________________^
200 | |     **Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa…
201 | | ]:
    | |_^
202 |       pass
    |

error[invalid-syntax]: Cannot use type parameter lists on Python 3.10 (syntax was added in Python 3.12)
   --> class_definition.py:205:21
    |
205 | class TestTypeParams[**P, *Ts, T]:
    |                     ^^^^^^^^^^^^^
206 |     pass
    |

error[invalid-syntax]: Cannot use type parameter lists on Python 3.10 (syntax was added in Python 3.12)
   --> class_definition.py:209:21
    |
209 |   class TestTypeParams[  # trailing bracket comment
    |  _____________________^
210 | |     # leading comment
211 | |     A,
212 | |     # in between comment
213 | |     B,
214 | |     # another leading comment
215 | |     C,
216 | |     D,  # trailing comment
217 | |     # leading bracket comment
218 | | ]:
    | |_^
219 |       pass
    |

error[invalid-syntax]: Cannot use type parameter lists on Python 3.10 (syntax was added in Python 3.12)
   --> class_definition.py:222:21
    |
222 |   class TestTypeParams[
    |  _____________________^
223 | |     Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa…
224 | | ](B, C, D):
    | |_^
225 |       pass
    |

error[invalid-syntax]: Cannot use type parameter lists on Python 3.10 (syntax was added in Python 3.12)
   --> class_definition.py:228:21
    |
228 |   class TestTypeParams[
    |  _____________________^
229 | |     Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa…
230 | | ](
    | |_^
231 |       Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,
232 |       Cccccccccccccccccccccccc,
    |

error[invalid-syntax]: Cannot use type parameter lists on Python 3.10 (syntax was added in Python 3.12)
   --> class_definition.py:238:21
    |
238 | class TestTypeParams[A, B, C](meta=Aaaaaaaaaaaaaaaaaaaaaa):
    |                     ^^^^^^^^^
239 |     pass
    |

error[invalid-syntax]: Cannot use type parameter lists on Python 3.10 (syntax was added in Python 3.12)
   --> class_definition.py:271:11
    |
269 | @decorator
270 | # comment
271 | class Foo3[T]: ...
    |           ^^^
    |

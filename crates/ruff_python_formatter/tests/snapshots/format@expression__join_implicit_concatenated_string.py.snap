---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/ruff/expression/join_implicit_concatenated_string.py
---
## Input
```python
"aaaaaaaaa" "bbbbbbbbbbbbbbbbbbbb" # Join

(
    "aaaaaaaaaaa" "bbbbbbbbbbbbbbbb"
) # join


(
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
) # too long to join


"different '" 'quote "are fine"' # join

# More single quotes
"one single'" "two 'single'" ' two "double"'

# More double quotes
'one double"' 'two "double"' " two 'single'"

# Equal number of single and double quotes
'two "double"' " two 'single'"

f"{'Hy \"User\"'}" 'more'

b"aaaaaaaaa" b"bbbbbbbbbbbbbbbbbbbb" # Join

(
    b"aaaaaaaaaaa" b"bbbbbbbbbbbbbbbb"
) # join


(
    b"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" b"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
) # too long to join


# Skip joining if there is a trailing comment
(
    "fffffffffffff"
    "bbbbbbbbbbbbb" # comment
    "cccccccccccccc"
)

# Skip joining if there is a leading comment
(
    "fffffffffffff"
    # comment
    "bbbbbbbbbbbbb"
    "cccccccccccccc"
)


##############################################################################
# F-strings
##############################################################################

# Escape `{` and `}` when merging an f-string with a string
"a {not_a_variable}" f"b {10}" "c"

# Join, and break expressions
f"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{
expression
}bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb" f"cccccccccccccccccccc {20999}" "more"

# Join, but don't break the expressions
f"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{expression}bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb" f"cccccccccccccccccccc {20999}" "more"

f"test{
expression
}flat" f"can be {
joined
} together"

aaaaaaaaaaa = f"test{
expression
}flat" f"cean beeeeeeee {
joined
} eeeeeeeeeeeeeeeeeeeeeeeeeeeee" # inline


f"single quoted '{x}'" f'double quoted "{x}"' # Same number of quotes => use preferred quote style
f"single quote ' {x}" f'double quoted "{x}"'  # More double quotes => use single quotes
f"single quoted '{x}'" f'double quote " {x}"'  # More single quotes => use double quotes

# Different triple quoted strings
f"{'''test'''}" f'{"""other"""}'

# Now with inner quotes
f"{'''test ' '''}" f'{"""other " """}'
f"{some_where_nested('''test ' ''')}" f'{"""other " """ + "more"}'
f"{b'''test ' '''}" f'{b"""other " """}'
f"{f'''test ' '''}" f'{f"""other " """}'

# debug expressions containing quotes
f"{10 + len('bar')=}" f"{10 + len('bar')=}"
f"{10 + len('bar')=}" f'no debug{10}' f"{10 + len('bar')=}"

# We can't safely merge this pre Python 3.12 without altering the debug expression.
f"{10 + len('bar')=}" f'{10 + len("bar")=}'


##############################################################################
# T-strings
##############################################################################

# Join, and break expressions
t"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{
expression
}bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb" t"cccccccccccccccccccc {20999}" t"more"

# Join, but don't break the expressions
t"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{expression}bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb" t"cccccccccccccccccccc {20999}" t"more"

t"test{
expression
}flat" t"can be {
joined
} together"

aaaaaaaaaaa = t"test{
expression
}flat" t"cean beeeeeeee {
joined
} eeeeeeeeeeeeeeeeeeeeeeeeeeeee" # inline


t"single quoted '{x}'" t'double quoted "{x}"' # Same number of quotes => use preferred quote style
t"single quote ' {x}" t'double quoted "{x}"'  # More double quotes => use single quotes
t"single quoted '{x}'" t'double quote " {x}"'  # More single quotes => use double quotes

# Different triple quoted strings
t"{'''test'''}" t'{"""other"""}'

# Now with inner quotes
t"{'''test ' '''}" t'{"""other " """}'
t"{some_where_nested('''test ' ''')}" t'{"""other " """ + "more"}'
t"{b'''test ' '''}" t'{b"""other " """}'
t"{t'''test ' '''}" t'{t"""other " """}'

# debug expressions containing quotes
t"{10 + len('bar')=}" t"{10 + len('bar')=}"
t"{10 + len('bar')=}" t'no debug{10}' t"{10 + len('bar')=}"

# We can't safely merge this pre Python 3.12 without altering the debug expression.
t"{10 + len('bar')=}" t'{10 + len("bar")=}'


##############################################################################
# Don't join raw strings
##############################################################################

r"a" "normal"
R"a" "normal"

f"test" fr"test"
f"test" fR"test"

t"test" tr"test"
t"test" tR"test"


##############################################################################
# Don't join triple quoted strings
##############################################################################

"single" """triple"""

"single" f""""single"""

t"single" t""""single"""

b"single" b"""triple"""


##############################################################################
# Join strings in with statements
##############################################################################

# Fits
with "aa" "bbb" "cccccccccccccccccccccccccccccccccccccccccccccc":
    pass

# Parenthesize single-line
with "aa" "bbb" "ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc":
    pass

# Multiline
with "aa" "bbb" "cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc":
    pass

with f"aaaaaaa{expression}bbbb" f"ccc {20999}" "more":
    pass


##############################################################################
# For loops
##############################################################################

# Flat
for a in "aaaaaaaaa" "bbbbbbbbb" "ccccccccc" "dddddddddd":
    pass

# Parenthesize single-line
for a in "aaaaaaaaa" "bbbbbbbbb" "ccccccccc" "dddddddddd" "eeeeeeeeeeeeeee" "fffffffffffff" "ggggggggggggggg" "hh":
    pass

# Multiline
for a in "aaaaaaaaa" "bbbbbbbbb" "ccccccccc" "dddddddddd" "eeeeeeeeeeeeeee" "fffffffffffff" "ggggggggggggggg" "hhhh":
    pass

##############################################################################
# Assert statement
##############################################################################

# Fits
assert "aaaaaaaaa" "bbbbbbbbbbbb", "cccccccccccccccc" "dddddddddddddddd"

# Wrap right
assert "aaaaaaaaa" "bbbbbbbbbbbb", "cccccccccccccccc" "dddddddddddddddd" "eeeeeeeeeeeee" "fffffffffff"

# Right multiline
assert "aaaaaaaaa" "bbbbbbbbbbbb", "cccccccccccccccc" "dddddddddddddddd" "eeeeeeeeeeeee" "fffffffffffffff" "ggggggggggggg" "hhhhhhhhhhh"

# Wrap left
assert "aaaaaaaaa" "bbbbbbbbbbbb" "cccccccccccccccc" "dddddddddddddddd" "eeeeeeeeeeeee" "fffffffffffffff", "ggggggggggggg" "hhhhhhhhhhh"

# Left multiline
assert "aaaaaaaaa" "bbbbbbbbbbbb" "cccccccccccccccc" "dddddddddddddddd" "eeeeeeeeeeeee" "fffffffffffffff" "ggggggggggggg", "hhhhhhhhhhh"

# wrap both
assert "aaaaaaaaa" "bbbbbbbbbbbb" "cccccccccccccccc" "dddddddddddddddd" "eeeeeeeeeeeee" "fffffffffffffff", "ggggggggggggg" "hhhhhhhhhhh" "iiiiiiiiiiiiiiiiii" "jjjjjjjjjjjjj" "kkkkkkkkkkkkkkkkk" "llllllllllll"

# both multiline
assert "aaaaaaaaa" "bbbbbbbbbbbb" "cccccccccccccccc" "dddddddddddddddd" "eeeeeeeeeeeee" "fffffffffffffff" "ggggggggggggg", "hhhhhhhhhhh" "iiiiiiiiiiiiiiiiii" "jjjjjjjjjjjjj" "kkkkkkkkkkkkkkkkk" "llllllllllll" "mmmmmmmmmmmmmm"


##############################################################################
# In clause headers (can_omit_optional_parentheses)
##############################################################################
# Use can_omit_optional_parentheses layout to avoid an instability where the formatter
# picks the can_omit_optional_parentheses layout when the strings are joined.
if (
    f"implicit"
    "concatenated"
    "string" + f"implicit"
               "concaddddddddddded"
               "ring"
    * len([aaaaaa, bbbbbbbbbbbbbbbb, cccccccccccccccccc, ddddddddddddddddddddddddddd])
):
    pass

# Keep parenthesizing multiline - implicit concatenated strings
if (
    f"implicit"
    """concatenate
    d"""
    "string" + f"implicit"
               "concaddddddddddded"
               "ring"
    * len([aaaaaa, bbbbbbbbbbbbbbbb, cccccccccccccccccc, ddddddddddddddddddddddddddd])
):
    pass

if (
    [
        aaaaaa,
        bbbbbbbbbbbbbbbb,
        cccccccccccccccccc,
        ddddddddddddddddddddddddddd,
    ]
    + "implicitconcat"
      "enatedstriiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiing"
):
    pass


# In match statements
match x:
    case "implicitconcat" "enatedstring" | [
        aaaaaa,
        bbbbbbbbbbbbbbbb,
        cccccccccccccccccc,
        ddddddddddddddddddddddddddd,
    ]:
        pass

    case [
            aaaaaa,
            bbbbbbbbbbbbbbbb,
            cccccccccccccccccc,
            ddddddddddddddddddddddddddd,
        ] | "implicitconcat" "enatedstring" :
        pass

    case "implicitconcat" "enatedstriiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiing" | [
        aaaaaa,
        bbbbbbbbbbbbbbbb,
        cccccccccccccccccc,
        ddddddddddddddddddddddddddd,
    ]:
        pass


##############################################################################
# In docstring positions
##############################################################################

def short_docstring():
    "Implicit" "concatenated" "docstring"

def long_docstring():
    "Loooooooooooooooooooooong" "doooooooooooooooooooocstriiiiiiiiiiiiiiiiiiiiiiiiiiiiiiing" "exceeding the line width" "but it should be concatenated anyways because it is single line"

def docstring_with_leading_whitespace():
    "    This is a " "implicit" "concatenated" "docstring"

def docstring_with_trailing_whitespace():
    "This is a " "implicit" "concatenated" "docstring    "

def docstring_with_leading_empty_parts():
    "       " "   " "" "This is a " "implicit" "concatenated" "docstring"

def docstring_with_trailing_empty_parts():
    "This is a " "implicit" "concatenated" "docstring" ""   "  " "           "

def all_empty():
    "          " "       " " "

def byte_string_in_docstring_position():
    b"  don't trim the" b"bytes literal "

def f_string_in_docstring_position():
    f"  don't trim the" "f-string literal "

def single_quoted():
    ' content\ ' '     '
    return

def implicit_with_comment():
    (
        "a"
        # leading
        "the comment above"
    )

##############################################################################
# Regressions
##############################################################################

LEEEEEEEEEEEEEEEEEEEEEEFT = RRRRRRRRIIIIIIIIIIIIGGGGGHHHT | {
    "entityNameeeeeeeeeeeeeeeeee",  # comment must be long enough to
    "some long implicit concatenated string" "that should join"
}

# Ensure that flipping between Multiline and BestFit layout results in stable formatting
# when using IfBreaksParenthesized layout.
assert False, "Implicit concatenated string" "uses {} layout on {} format".format(
    "Multiline", "first"
)

assert False, await "Implicit concatenated string" "uses {} layout on {} format".format(
    "Multiline", "first"
)

assert False, "Implicit concatenated stringuses {} layout on {} format"[
    aaaaaaaaa, bbbbbb
]

assert False, +"Implicit concatenated string" "uses {} layout on {} format".format(
    "Multiline", "first"
)


# Regression tests for https://github.com/astral-sh/ruff/issues/13935

"a" f'{1=: "abcd \'\'}'
f'{1=: "abcd \'\'}' "a"
f'{1=: "abcd \'\'}' f"{1=: 'abcd \"\"}"

# These strings contains escaped newline characters and should be joined, they are
# not multiline strings.
f"aaaaaaaaaaaaaaaa \
        bbbbbbbbbbb" "cccccccccccccc \
               ddddddddddddddddddd"
b"aaaaaaaaaaaaaaaa \
        bbbbbbbbbbb" b"cccccccccccccc \
               ddddddddddddddddddd"
f"aaaaaaaaaaaaaaaa \
        bbbbbbbbbbb" "cccccccccccccc \
               ddddddddddddddddddd"  # comment 1
(f"aaaaaaaaaaaaaaaa \
        bbbbbbbbbbb" "cccccccccccccc \
               ddddddddddddddddddd")  # comment 2
(
    f"aaaaaaaaaaaaaaaa \
            bbbbbbbbbbb" # comment 3
    "cccccccccccccc \
            ddddddddddddddddddd"  # comment 4
)
```

## Output
```python
"aaaaaaaaabbbbbbbbbbbbbbbbbbbb"  # Join

("aaaaaaaaaaabbbbbbbbbbbbbbbb")  # join


(
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
)  # too long to join


'different \'quote "are fine"'  # join

# More single quotes
"one single'two 'single' two \"double\""

# More double quotes
'one double"two "double" two \'single\''

# Equal number of single and double quotes
"two \"double\" two 'single'"

f"{'Hy "User"'}more"

b"aaaaaaaaabbbbbbbbbbbbbbbbbbbb"  # Join

(b"aaaaaaaaaaabbbbbbbbbbbbbbbb")  # join


(
    b"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    b"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
)  # too long to join


# Skip joining if there is a trailing comment
(
    "fffffffffffff"
    "bbbbbbbbbbbbb"  # comment
    "cccccccccccccc"
)

# Skip joining if there is a leading comment
(
    "fffffffffffff"
    # comment
    "bbbbbbbbbbbbb"
    "cccccccccccccc"
)


##############################################################################
# F-strings
##############################################################################

# Escape `{` and `}` when merging an f-string with a string
f"a {{not_a_variable}}b {10}c"

# Join, and break expressions
f"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{
    expression
}bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccc {20999}more"

# Join, but don't break the expressions
f"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{expression}bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccc {20999}more"

f"test{expression}flatcan be {joined} together"

aaaaaaaaaaa = (
    f"test{expression}flat"
    f"cean beeeeeeee {joined} eeeeeeeeeeeeeeeeeeeeeeeeeeeee"
)  # inline


f"single quoted '{x}'double quoted \"{x}\""  # Same number of quotes => use preferred quote style
f'single quote \' {x}double quoted "{x}"'  # More double quotes => use single quotes
f"single quoted '{x}'double quote \" {x}\""  # More single quotes => use double quotes

# Different triple quoted strings
f"{'''test'''}{'''other'''}"

# Now with inner quotes
f"{'''test ' '''}" f'{"""other " """}'
f"{some_where_nested('''test ' ''')}" f'{"""other " """ + "more"}'
f"{b'''test ' '''}" f'{b"""other " """}'
f"{f'''test ' '''}" f'{f"""other " """}'

# debug expressions containing quotes
f"{10 + len('bar')=}{10 + len('bar')=}"
f"{10 + len('bar')=}no debug{10}{10 + len('bar')=}"

# We can't safely merge this pre Python 3.12 without altering the debug expression.
f"{10 + len('bar')=}" f'{10 + len("bar")=}'


##############################################################################
# T-strings
##############################################################################

# Join, and break expressions
t"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{
    expression
}bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccc {20999}more"

# Join, but don't break the expressions
t"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{expression}bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccc {20999}more"

t"test{expression}flatcan be {joined} together"

aaaaaaaaaaa = (
    t"test{expression}flat"
    t"cean beeeeeeee {joined} eeeeeeeeeeeeeeeeeeeeeeeeeeeee"
)  # inline


t"single quoted '{x}'double quoted \"{x}\""  # Same number of quotes => use preferred quote style
t'single quote \' {x}double quoted "{x}"'  # More double quotes => use single quotes
t"single quoted '{x}'double quote \" {x}\""  # More single quotes => use double quotes

# Different triple quoted strings
t"{'''test'''}{'''other'''}"

# Now with inner quotes
t"{'''test ' '''}{'''other " '''}"
t"{some_where_nested('''test ' ''')}{'''other " ''' + 'more'}"
t"{b'''test ' '''}{b'''other " '''}"
t"{t'''test ' '''}{t'''other " '''}"

# debug expressions containing quotes
t"{10 + len('bar')=}{10 + len('bar')=}"
t"{10 + len('bar')=}no debug{10}{10 + len('bar')=}"

# We can't safely merge this pre Python 3.12 without altering the debug expression.
t"{10 + len('bar')=}{10 + len("bar")=}"


##############################################################################
# Don't join raw strings
##############################################################################

r"a" "normal"
R"a" "normal"

f"test" rf"test"
f"test" Rf"test"

t"test" rt"test"
t"test" Rt"test"


##############################################################################
# Don't join triple quoted strings
##############################################################################

"single" """triple"""

"single" f""""single"""

t"single" t""""single"""

b"single" b"""triple"""


##############################################################################
# Join strings in with statements
##############################################################################

# Fits
with "aabbbcccccccccccccccccccccccccccccccccccccccccccccc":
    pass

# Parenthesize single-line
with (
    "aabbbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
):
    pass

# Multiline
with (
    "aa"
    "bbb"
    "cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
):
    pass

with f"aaaaaaa{expression}bbbbccc {20999}more":
    pass


##############################################################################
# For loops
##############################################################################

# Flat
for a in "aaaaaaaaabbbbbbbbbcccccccccdddddddddd":
    pass

# Parenthesize single-line
for a in (
    "aaaaaaaaabbbbbbbbbcccccccccddddddddddeeeeeeeeeeeeeeefffffffffffffggggggggggggggghh"
):
    pass

# Multiline
for a in (
    "aaaaaaaaa"
    "bbbbbbbbb"
    "ccccccccc"
    "dddddddddd"
    "eeeeeeeeeeeeeee"
    "fffffffffffff"
    "ggggggggggggggg"
    "hhhh"
):
    pass

##############################################################################
# Assert statement
##############################################################################

# Fits
assert "aaaaaaaaabbbbbbbbbbbb", "ccccccccccccccccdddddddddddddddd"

# Wrap right
assert "aaaaaaaaabbbbbbbbbbbb", (
    "ccccccccccccccccddddddddddddddddeeeeeeeeeeeeefffffffffff"
)

# Right multiline
assert "aaaaaaaaabbbbbbbbbbbb", (
    "cccccccccccccccc"
    "dddddddddddddddd"
    "eeeeeeeeeeeee"
    "fffffffffffffff"
    "ggggggggggggg"
    "hhhhhhhhhhh"
)

# Wrap left
assert (
    "aaaaaaaaabbbbbbbbbbbbccccccccccccccccddddddddddddddddeeeeeeeeeeeeefffffffffffffff"
), "ggggggggggggghhhhhhhhhhh"

# Left multiline
assert (
    "aaaaaaaaa"
    "bbbbbbbbbbbb"
    "cccccccccccccccc"
    "dddddddddddddddd"
    "eeeeeeeeeeeee"
    "fffffffffffffff"
    "ggggggggggggg"
), "hhhhhhhhhhh"

# wrap both
assert (
    "aaaaaaaaabbbbbbbbbbbbccccccccccccccccddddddddddddddddeeeeeeeeeeeeefffffffffffffff"
), (
    "ggggggggggggg"
    "hhhhhhhhhhh"
    "iiiiiiiiiiiiiiiiii"
    "jjjjjjjjjjjjj"
    "kkkkkkkkkkkkkkkkk"
    "llllllllllll"
)

# both multiline
assert (
    "aaaaaaaaa"
    "bbbbbbbbbbbb"
    "cccccccccccccccc"
    "dddddddddddddddd"
    "eeeeeeeeeeeee"
    "fffffffffffffff"
    "ggggggggggggg"
), (
    "hhhhhhhhhhh"
    "iiiiiiiiiiiiiiiiii"
    "jjjjjjjjjjjjj"
    "kkkkkkkkkkkkkkkkk"
    "llllllllllll"
    "mmmmmmmmmmmmmm"
)


##############################################################################
# In clause headers (can_omit_optional_parentheses)
##############################################################################
# Use can_omit_optional_parentheses layout to avoid an instability where the formatter
# picks the can_omit_optional_parentheses layout when the strings are joined.
if f"implicitconcatenatedstring" + f"implicitconcadddddddddddedring" * len(
    [aaaaaa, bbbbbbbbbbbbbbbb, cccccccccccccccccc, ddddddddddddddddddddddddddd]
):
    pass

# Keep parenthesizing multiline - implicit concatenated strings
if (
    f"implicit"
    """concatenate
    d"""
    "string" + f"implicit"
    "concaddddddddddded"
    "ring"
    * len([aaaaaa, bbbbbbbbbbbbbbbb, cccccccccccccccccc, ddddddddddddddddddddddddddd])
):
    pass

if (
    [
        aaaaaa,
        bbbbbbbbbbbbbbbb,
        cccccccccccccccccc,
        ddddddddddddddddddddddddddd,
    ]
    + "implicitconcat"
    "enatedstriiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiing"
):
    pass


# In match statements
match x:
    case "implicitconcatenatedstring" | [
        aaaaaa,
        bbbbbbbbbbbbbbbb,
        cccccccccccccccccc,
        ddddddddddddddddddddddddddd,
    ]:
        pass

    case [
        aaaaaa,
        bbbbbbbbbbbbbbbb,
        cccccccccccccccccc,
        ddddddddddddddddddddddddddd,
    ] | "implicitconcatenatedstring":
        pass

    case (
        "implicitconcat"
        "enatedstriiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiing"
        | [
            aaaaaa,
            bbbbbbbbbbbbbbbb,
            cccccccccccccccccc,
            ddddddddddddddddddddddddddd,
        ]
    ):
        pass


##############################################################################
# In docstring positions
##############################################################################


def short_docstring():
    "Implicitconcatenateddocstring"


def long_docstring():
    "Loooooooooooooooooooooongdoooooooooooooooooooocstriiiiiiiiiiiiiiiiiiiiiiiiiiiiiiingexceeding the line widthbut it should be concatenated anyways because it is single line"


def docstring_with_leading_whitespace():
    "This is a implicitconcatenateddocstring"


def docstring_with_trailing_whitespace():
    "This is a implicitconcatenateddocstring"


def docstring_with_leading_empty_parts():
    "This is a implicitconcatenateddocstring"


def docstring_with_trailing_empty_parts():
    "This is a implicitconcatenateddocstring"


def all_empty():
    ""


def byte_string_in_docstring_position():
    b"  don't trim thebytes literal "


def f_string_in_docstring_position():
    f"  don't trim thef-string literal "


def single_quoted():
    "content\ "
    return


def implicit_with_comment():
    (
        "a"
        # leading
        "the comment above"
    )


##############################################################################
# Regressions
##############################################################################

LEEEEEEEEEEEEEEEEEEEEEEFT = RRRRRRRRIIIIIIIIIIIIGGGGGHHHT | {
    "entityNameeeeeeeeeeeeeeeeee",  # comment must be long enough to
    "some long implicit concatenated stringthat should join",
}

# Ensure that flipping between Multiline and BestFit layout results in stable formatting
# when using IfBreaksParenthesized layout.
assert False, "Implicit concatenated stringuses {} layout on {} format".format(
    "Multiline", "first"
)

assert False, await "Implicit concatenated stringuses {} layout on {} format".format(
    "Multiline", "first"
)

assert False, "Implicit concatenated stringuses {} layout on {} format"[
    aaaaaaaaa, bbbbbb
]

assert False, +"Implicit concatenated stringuses {} layout on {} format".format(
    "Multiline", "first"
)


# Regression tests for https://github.com/astral-sh/ruff/issues/13935

f'a{1=: "abcd \'\'}'
f'{1=: "abcd \'\'}a'
f'{1=: "abcd \'\'}' f"{1=: 'abcd \"\"}"

# These strings contains escaped newline characters and should be joined, they are
# not multiline strings.
f"aaaaaaaaaaaaaaaa \
        bbbbbbbbbbbcccccccccccccc \
               ddddddddddddddddddd"
b"aaaaaaaaaaaaaaaa \
        bbbbbbbbbbbcccccccccccccc \
               ddddddddddddddddddd"
f"aaaaaaaaaaaaaaaa \
        bbbbbbbbbbbcccccccccccccc \
               ddddddddddddddddddd"  # comment 1
(
    f"aaaaaaaaaaaaaaaa \
        bbbbbbbbbbb"
    "cccccccccccccc \
               ddddddddddddddddddd"
)  # comment 2
(
    f"aaaaaaaaaaaaaaaa \
            bbbbbbbbbbb"  # comment 3
    "cccccccccccccc \
            ddddddddddddddddddd"  # comment 4
)
```


## Preview changes
```diff
--- Stable
+++ Preview
@@ -288,9 +288,12 @@
 ##############################################################################
 # Use can_omit_optional_parentheses layout to avoid an instability where the formatter
 # picks the can_omit_optional_parentheses layout when the strings are joined.
-if f"implicitconcatenatedstring" + f"implicitconcadddddddddddedring" * len(
-    [aaaaaa, bbbbbbbbbbbbbbbb, cccccccccccccccccc, ddddddddddddddddddddddddddd]
-):
+if f"implicitconcatenatedstring" + f"implicitconcadddddddddddedring" * len([
+    aaaaaa,
+    bbbbbbbbbbbbbbbb,
+    cccccccccccccccccc,
+    ddddddddddddddddddddddddddd,
+]):
     pass
 
 # Keep parenthesizing multiline - implicit concatenated strings
```


## Unsupported Syntax Errors
error[invalid-syntax]: Cannot reuse outer quote character in f-strings on Python 3.10 (syntax was added in Python 3.12)
  --> join_implicit_concatenated_string.py:23:8
   |
21 | "two \"double\" two 'single'"
22 |
23 | f"{'Hy "User"'}more"
   |        ^
24 |
25 | b"aaaaaaaaabbbbbbbbbbbbbbbbbbbb"  # Join
   |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:101:1
    |
100 |   # Join, and break expressions
101 | / t"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{
102 | |     expression
103 | | }bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccc {20999}more"
    | |___________________________________________________________________________^
104 |
105 |   # Join, but don't break the expressions
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:106:1
    |
105 | # Join, but don't break the expressions
106 | t"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{expression}bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccc {20999}more"
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
107 |
108 | t"test{expression}flatcan be {joined} together"
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:108:1
    |
106 | t"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{expression}bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccc {20999}more"
107 |
108 | t"test{expression}flatcan be {joined} together"
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
109 |
110 | aaaaaaaaaaa = (
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:111:5
    |
110 | aaaaaaaaaaa = (
111 |     t"test{expression}flat"
    |     ^^^^^^^^^^^^^^^^^^^^^^^
112 |     t"cean beeeeeeee {joined} eeeeeeeeeeeeeeeeeeeeeeeeeeeee"
113 | )  # inline
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:112:5
    |
110 | aaaaaaaaaaa = (
111 |     t"test{expression}flat"
112 |     t"cean beeeeeeee {joined} eeeeeeeeeeeeeeeeeeeeeeeeeeeee"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
113 | )  # inline
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:116:1
    |
116 | t"single quoted '{x}'double quoted \"{x}\""  # Same number of quotes => use preferred quote style
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
117 | t'single quote \' {x}double quoted "{x}"'  # More double quotes => use single quotes
118 | t"single quoted '{x}'double quote \" {x}\""  # More single quotes => use double quotes
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:117:1
    |
116 | t"single quoted '{x}'double quoted \"{x}\""  # Same number of quotes => use preferred quote style
117 | t'single quote \' {x}double quoted "{x}"'  # More double quotes => use single quotes
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
118 | t"single quoted '{x}'double quote \" {x}\""  # More single quotes => use double quotes
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:118:1
    |
116 | t"single quoted '{x}'double quoted \"{x}\""  # Same number of quotes => use preferred quote style
117 | t'single quote \' {x}double quoted "{x}"'  # More double quotes => use single quotes
118 | t"single quoted '{x}'double quote \" {x}\""  # More single quotes => use double quotes
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
119 |
120 | # Different triple quoted strings
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:121:1
    |
120 | # Different triple quoted strings
121 | t"{'''test'''}{'''other'''}"
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
122 |
123 | # Now with inner quotes
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:124:1
    |
123 | # Now with inner quotes
124 | t"{'''test ' '''}{'''other " '''}"
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
125 | t"{some_where_nested('''test ' ''')}{'''other " ''' + 'more'}"
126 | t"{b'''test ' '''}{b'''other " '''}"
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:125:1
    |
123 | # Now with inner quotes
124 | t"{'''test ' '''}{'''other " '''}"
125 | t"{some_where_nested('''test ' ''')}{'''other " ''' + 'more'}"
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
126 | t"{b'''test ' '''}{b'''other " '''}"
127 | t"{t'''test ' '''}{t'''other " '''}"
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:126:1
    |
124 | t"{'''test ' '''}{'''other " '''}"
125 | t"{some_where_nested('''test ' ''')}{'''other " ''' + 'more'}"
126 | t"{b'''test ' '''}{b'''other " '''}"
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
127 | t"{t'''test ' '''}{t'''other " '''}"
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:127:4
    |
125 | t"{some_where_nested('''test ' ''')}{'''other " ''' + 'more'}"
126 | t"{b'''test ' '''}{b'''other " '''}"
127 | t"{t'''test ' '''}{t'''other " '''}"
    |    ^^^^^^^^^^^^^^
128 |
129 | # debug expressions containing quotes
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:127:20
    |
125 | t"{some_where_nested('''test ' ''')}{'''other " ''' + 'more'}"
126 | t"{b'''test ' '''}{b'''other " '''}"
127 | t"{t'''test ' '''}{t'''other " '''}"
    |                    ^^^^^^^^^^^^^^^
128 |
129 | # debug expressions containing quotes
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:127:1
    |
125 | t"{some_where_nested('''test ' ''')}{'''other " ''' + 'more'}"
126 | t"{b'''test ' '''}{b'''other " '''}"
127 | t"{t'''test ' '''}{t'''other " '''}"
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
128 |
129 | # debug expressions containing quotes
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:130:1
    |
129 | # debug expressions containing quotes
130 | t"{10 + len('bar')=}{10 + len('bar')=}"
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
131 | t"{10 + len('bar')=}no debug{10}{10 + len('bar')=}"
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:131:1
    |
129 | # debug expressions containing quotes
130 | t"{10 + len('bar')=}{10 + len('bar')=}"
131 | t"{10 + len('bar')=}no debug{10}{10 + len('bar')=}"
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
132 |
133 | # We can't safely merge this pre Python 3.12 without altering the debug expression.
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:134:1
    |
133 | # We can't safely merge this pre Python 3.12 without altering the debug expression.
134 | t"{10 + len('bar')=}{10 + len("bar")=}"
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:147:1
    |
145 | f"test" Rf"test"
146 |
147 | t"test" rt"test"
    | ^^^^^^^
148 | t"test" Rt"test"
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:147:9
    |
145 | f"test" Rf"test"
146 |
147 | t"test" rt"test"
    |         ^^^^^^^^
148 | t"test" Rt"test"
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:148:1
    |
147 | t"test" rt"test"
148 | t"test" Rt"test"
    | ^^^^^^^
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:148:9
    |
147 | t"test" rt"test"
148 | t"test" Rt"test"
    |         ^^^^^^^^
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:159:1
    |
157 | "single" f""""single"""
158 |
159 | t"single" t""""single"""
    | ^^^^^^^^^
160 |
161 | b"single" b"""triple"""
    |

error[invalid-syntax]: Cannot use t-strings on Python 3.10 (syntax was added in Python 3.14)
   --> join_implicit_concatenated_string.py:159:11
    |
157 | "single" f""""single"""
158 |
159 | t"single" t""""single"""
    |           ^^^^^^^^^^^^^^
160 |
161 | b"single" b"""triple"""
    |

error[invalid-syntax]: Cannot use an escape sequence (backslash) in f-strings on Python 3.10 (syntax was added in Python 3.12)
   --> join_implicit_concatenated_string.py:436:15
    |
434 | # Regression tests for https://github.com/astral-sh/ruff/issues/13935
435 |
436 | f'a{1=: "abcd \'\'}'
    |               ^
437 | f'{1=: "abcd \'\'}a'
438 | f'{1=: "abcd \'\'}' f"{1=: 'abcd \"\"}"
    |

error[invalid-syntax]: Cannot use an escape sequence (backslash) in f-strings on Python 3.10 (syntax was added in Python 3.12)
   --> join_implicit_concatenated_string.py:436:17
    |
434 | # Regression tests for https://github.com/astral-sh/ruff/issues/13935
435 |
436 | f'a{1=: "abcd \'\'}'
    |                 ^
437 | f'{1=: "abcd \'\'}a'
438 | f'{1=: "abcd \'\'}' f"{1=: 'abcd \"\"}"
    |

error[invalid-syntax]: Cannot reuse outer quote character in f-strings on Python 3.10 (syntax was added in Python 3.12)
   --> join_implicit_concatenated_string.py:436:16
    |
434 | # Regression tests for https://github.com/astral-sh/ruff/issues/13935
435 |
436 | f'a{1=: "abcd \'\'}'
    |                ^
437 | f'{1=: "abcd \'\'}a'
438 | f'{1=: "abcd \'\'}' f"{1=: 'abcd \"\"}"
    |

error[invalid-syntax]: Cannot use an escape sequence (backslash) in f-strings on Python 3.10 (syntax was added in Python 3.12)
   --> join_implicit_concatenated_string.py:437:14
    |
436 | f'a{1=: "abcd \'\'}'
437 | f'{1=: "abcd \'\'}a'
    |              ^
438 | f'{1=: "abcd \'\'}' f"{1=: 'abcd \"\"}"
    |

error[invalid-syntax]: Cannot use an escape sequence (backslash) in f-strings on Python 3.10 (syntax was added in Python 3.12)
   --> join_implicit_concatenated_string.py:437:16
    |
436 | f'a{1=: "abcd \'\'}'
437 | f'{1=: "abcd \'\'}a'
    |                ^
438 | f'{1=: "abcd \'\'}' f"{1=: 'abcd \"\"}"
    |

error[invalid-syntax]: Cannot reuse outer quote character in f-strings on Python 3.10 (syntax was added in Python 3.12)
   --> join_implicit_concatenated_string.py:437:15
    |
436 | f'a{1=: "abcd \'\'}'
437 | f'{1=: "abcd \'\'}a'
    |               ^
438 | f'{1=: "abcd \'\'}' f"{1=: 'abcd \"\"}"
    |

error[invalid-syntax]: Cannot use an escape sequence (backslash) in f-strings on Python 3.10 (syntax was added in Python 3.12)
   --> join_implicit_concatenated_string.py:438:14
    |
436 | f'a{1=: "abcd \'\'}'
437 | f'{1=: "abcd \'\'}a'
438 | f'{1=: "abcd \'\'}' f"{1=: 'abcd \"\"}"
    |              ^
439 |
440 | # These strings contains escaped newline characters and should be joined, they are
    |

error[invalid-syntax]: Cannot use an escape sequence (backslash) in f-strings on Python 3.10 (syntax was added in Python 3.12)
   --> join_implicit_concatenated_string.py:438:16
    |
436 | f'a{1=: "abcd \'\'}'
437 | f'{1=: "abcd \'\'}a'
438 | f'{1=: "abcd \'\'}' f"{1=: 'abcd \"\"}"
    |                ^
439 |
440 | # These strings contains escaped newline characters and should be joined, they are
    |

error[invalid-syntax]: Cannot reuse outer quote character in f-strings on Python 3.10 (syntax was added in Python 3.12)
   --> join_implicit_concatenated_string.py:438:15
    |
436 | f'a{1=: "abcd \'\'}'
437 | f'{1=: "abcd \'\'}a'
438 | f'{1=: "abcd \'\'}' f"{1=: 'abcd \"\"}"
    |               ^
439 |
440 | # These strings contains escaped newline characters and should be joined, they are
    |

error[invalid-syntax]: Cannot use an escape sequence (backslash) in f-strings on Python 3.10 (syntax was added in Python 3.12)
   --> join_implicit_concatenated_string.py:438:34
    |
436 | f'a{1=: "abcd \'\'}'
437 | f'{1=: "abcd \'\'}a'
438 | f'{1=: "abcd \'\'}' f"{1=: 'abcd \"\"}"
    |                                  ^
439 |
440 | # These strings contains escaped newline characters and should be joined, they are
    |

error[invalid-syntax]: Cannot use an escape sequence (backslash) in f-strings on Python 3.10 (syntax was added in Python 3.12)
   --> join_implicit_concatenated_string.py:438:36
    |
436 | f'a{1=: "abcd \'\'}'
437 | f'{1=: "abcd \'\'}a'
438 | f'{1=: "abcd \'\'}' f"{1=: 'abcd \"\"}"
    |                                    ^
439 |
440 | # These strings contains escaped newline characters and should be joined, they are
    |

error[invalid-syntax]: Cannot reuse outer quote character in f-strings on Python 3.10 (syntax was added in Python 3.12)
   --> join_implicit_concatenated_string.py:438:35
    |
436 | f'a{1=: "abcd \'\'}'
437 | f'{1=: "abcd \'\'}a'
438 | f'{1=: "abcd \'\'}' f"{1=: 'abcd \"\"}"
    |                                   ^
439 |
440 | # These strings contains escaped newline characters and should be joined, they are
    |

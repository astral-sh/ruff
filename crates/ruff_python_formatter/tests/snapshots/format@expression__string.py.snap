---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/ruff/expression/string.py
snapshot_kind: text
---
## Input
```python
"' test"
'" test'

"\" test"
'\' test'

# Prefer single quotes for string with more double quotes
"' \" \" '' \" \" '"

# Prefer double quotes for string with more single quotes
'\' " " \'\' " " \''

# Prefer double quotes for string with equal amount of single and double quotes
'" \' " " \'\''
"' \" '' \" \""

"\\' \"\""
'\\\' ""'


u"Test"
U"Test"

r"Test"
R"Test"

# Block conversion if there is an unescaped quote just before the end of the triple
# quoted string
r'''\""'''
r'''""'''
r'\""'

'This string will not include \
backslashes or newline characters.'

if True:
    'This string will not include \
        backslashes or newline characters.'

"""Multiline
String \"
"""

'''Multiline
String \'
'''

'''Multiline
String ""
'''

'''Multiline
String """
'''

'''Multiline
String "'''

"""Multiline
String '''
"""

"""Multiline
String '"""

'''Multiline
String \"\"\"
'''

# String continuation

"Let's" "start" "with" "a" "simple" "example"

"Let's" "start" "with" "a" "simple" "example" "now repeat after me:" "I am confident" "I am confident" "I am confident" "I am confident" "I am confident"

(
    "Let's" "start" "with" "a" "simple" "example" "now repeat after me:" "I am confident" "I am confident" "I am confident" "I am confident" "I am confident"
)

if (
    a + "Let's"
        "start"
        "with"
        "a"
        "simple"
        "example"
        "now repeat after me:"
        "I am confident"
        "I am confident"
        "I am confident"
        "I am confident"
        "I am confident"
):
    pass

if "Let's" "start" "with" "a" "simple" "example" "now repeat after me:" "I am confident" "I am confident" "I am confident" "I am confident" "I am confident":
    pass

(
    # leading
    "a" # trailing part comment

    # leading part comment

    "b" # trailing second part comment
    # trailing
)

test_particular = [
    # squares
    '1.00000000100000000025',
    '1.0000000000000000000000000100000000000000000000000' #...
    '00025',
    '1.0000000000000000000000000000000000000000000010000' #...
    '0000000000000000000000000000000000000000025',
]

# Parenthesized string continuation with messed up indentation
{
    "key": (
        [],
    'a'
        'b'
    'c'
    )
}


# Regression test for https://github.com/astral-sh/ruff/issues/5893
x = ("""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""" """bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb""")
x = (f"""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""" f"""bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb""")
x = (b"""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""" b"""bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb""")

# https://github.com/astral-sh/ruff/issues/7460
trailing_preferred_quote_texts = [''' "''', ''' ""''', ''' """''', ''' """"''']

a = f"""\x1F"""
a = """\x1F"""
a = """\\x1F"""
a = """\\\x1F"""


##############################################################################
# Implicit concatenated strings
##############################################################################

# In preview, don't collapse implicit concatenated strings that can't be joined into a single string
# and that are multiline in the source.

(
    r"aaaaaaaaa"
    r"bbbbbbbbbbbbbbbbbbbb"
)

(
    r"aaaaaaaaa" r"bbbbbbbbbbbbbbbbbbbb"
    "cccccccccccccccccccccc"
)

(
    """aaaaaaaaa"""
    """bbbbbbbbbbbbbbbbbbbb"""
)

(
    f"""aaaa{
    10}aaaaa"""
    fr"""bbbbbbbbbbbbbbbbbbbb"""
)

if (
       r"aaaaaaaaa"
       r"bbbbbbbbbbbbbbbbbbbb"
   ) + ["aaaaaaaaaa", "bbbbbbbbbbbbbbbb"]: ...



# In preview, keep implicit concatenated strings on a single line if they fit and are not separate by line breaks in the source
(
    r"aaaaaaaaa" r"bbbbbbbbbbbbbbbbbbbb"
)

r"aaaaaaaaa" r"bbbbbbbbbbbbbbbbbbbb"

(
    f"aaaa{
    10}aaaaa" fr"bbbbbbbbbbbbbbbbbbbb"
)

(
    r"""aaaaaaaaa""" r"""bbbbbbbbbbbbbbbbbbbb"""
)

(
    f"""aaaa{
    10}aaaaa""" fr"""bbbbbbbbbbbbbbbbbbbb"""
)
```

## Outputs
### Output 1
```
indent-style               = space
line-width                 = 88
indent-width               = 4
quote-style                = Double
line-ending                = LineFeed
magic-trailing-comma       = Respect
docstring-code             = Disabled
docstring-code-line-width  = "dynamic"
preview                    = Disabled
target_version             = Py38
source_type                = Python
```

```python
"' test"

'" test'

'" test'
"' test"

# Prefer single quotes for string with more double quotes
"' \" \" '' \" \" '"

# Prefer double quotes for string with more single quotes
"' \" \" '' \" \" '"

# Prefer double quotes for string with equal amount of single and double quotes
"\" ' \" \" ''"
"' \" '' \" \""

'\\\' ""'
'\\\' ""'


"Test"
"Test"

r"Test"
R"Test"

# Block conversion if there is an unescaped quote just before the end of the triple
# quoted string
r'''\""'''
r'''""'''
r'\""'

"This string will not include \
backslashes or newline characters."

if True:
    "This string will not include \
        backslashes or newline characters."

"""Multiline
String \"
"""

"""Multiline
String \'
"""

"""Multiline
String ""
"""

'''Multiline
String """
'''

'''Multiline
String "'''

"""Multiline
String '''
"""

"""Multiline
String '"""

"""Multiline
String \"\"\"
"""

# String continuation

"Let's" "start" "with" "a" "simple" "example"

"Let's" "start" "with" "a" "simple" "example" "now repeat after me:" "I am confident" "I am confident" "I am confident" "I am confident" "I am confident"

(
    "Let's"
    "start"
    "with"
    "a"
    "simple"
    "example"
    "now repeat after me:"
    "I am confident"
    "I am confident"
    "I am confident"
    "I am confident"
    "I am confident"
)

if (
    a + "Let's"
    "start"
    "with"
    "a"
    "simple"
    "example"
    "now repeat after me:"
    "I am confident"
    "I am confident"
    "I am confident"
    "I am confident"
    "I am confident"
):
    pass

if (
    "Let's"
    "start"
    "with"
    "a"
    "simple"
    "example"
    "now repeat after me:"
    "I am confident"
    "I am confident"
    "I am confident"
    "I am confident"
    "I am confident"
):
    pass

(
    # leading
    "a"  # trailing part comment
    # leading part comment
    "b"  # trailing second part comment
    # trailing
)

test_particular = [
    # squares
    "1.00000000100000000025",
    "1.0000000000000000000000000100000000000000000000000"  # ...
    "00025",
    "1.0000000000000000000000000000000000000000000010000"  # ...
    "0000000000000000000000000000000000000000025",
]

# Parenthesized string continuation with messed up indentation
{"key": ([], "a" "b" "c")}


# Regression test for https://github.com/astral-sh/ruff/issues/5893
x = (
    """aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"""
    """bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"""
)
x = (
    f"""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"""
    f"""bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"""
)
x = (
    b"""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"""
    b"""bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"""
)

# https://github.com/astral-sh/ruff/issues/7460
trailing_preferred_quote_texts = [''' "''', ''' ""''', ''' """''', ''' """"''']

a = f"""\x1f"""
a = """\x1f"""
a = """\\x1F"""
a = """\\\x1f"""


##############################################################################
# Implicit concatenated strings
##############################################################################

# In preview, don't collapse implicit concatenated strings that can't be joined into a single string
# and that are multiline in the source.

(r"aaaaaaaaa" r"bbbbbbbbbbbbbbbbbbbb")

(r"aaaaaaaaa" r"bbbbbbbbbbbbbbbbbbbb" "cccccccccccccccccccccc")

("""aaaaaaaaa""" """bbbbbbbbbbbbbbbbbbbb""")

(
    f"""aaaa{
    10}aaaaa"""
    rf"""bbbbbbbbbbbbbbbbbbbb"""
)

if (r"aaaaaaaaa" r"bbbbbbbbbbbbbbbbbbbb") + ["aaaaaaaaaa", "bbbbbbbbbbbbbbbb"]:
    ...


# In preview, keep implicit concatenated strings on a single line if they fit and are not separate by line breaks in the source
(r"aaaaaaaaa" r"bbbbbbbbbbbbbbbbbbbb")

r"aaaaaaaaa" r"bbbbbbbbbbbbbbbbbbbb"

(
    f"aaaa{
    10}aaaaa"
    rf"bbbbbbbbbbbbbbbbbbbb"
)

(r"""aaaaaaaaa""" r"""bbbbbbbbbbbbbbbbbbbb""")

(
    f"""aaaa{
    10}aaaaa"""
    rf"""bbbbbbbbbbbbbbbbbbbb"""
)
```


#### Preview changes
```diff
--- Stable
+++ Preview
@@ -70,9 +70,9 @@
 
 # String continuation
 
-"Let's" "start" "with" "a" "simple" "example"
+"Let'sstartwithasimpleexample"
 
-"Let's" "start" "with" "a" "simple" "example" "now repeat after me:" "I am confident" "I am confident" "I am confident" "I am confident" "I am confident"
+"Let'sstartwithasimpleexamplenow repeat after me:I am confidentI am confidentI am confidentI am confidentI am confident"
 
 (
     "Let's"
@@ -139,7 +139,7 @@
 ]
 
 # Parenthesized string continuation with messed up indentation
-{"key": ([], "a" "b" "c")}
+{"key": ([], "abc")}
 
 
 # Regression test for https://github.com/astral-sh/ruff/issues/5893
@@ -172,19 +172,31 @@
 # In preview, don't collapse implicit concatenated strings that can't be joined into a single string
 # and that are multiline in the source.
 
-(r"aaaaaaaaa" r"bbbbbbbbbbbbbbbbbbbb")
+(
+    r"aaaaaaaaa"
+    r"bbbbbbbbbbbbbbbbbbbb"
+)
 
-(r"aaaaaaaaa" r"bbbbbbbbbbbbbbbbbbbb" "cccccccccccccccccccccc")
+(
+    r"aaaaaaaaa"
+    r"bbbbbbbbbbbbbbbbbbbb"
+    "cccccccccccccccccccccc"
+)
 
-("""aaaaaaaaa""" """bbbbbbbbbbbbbbbbbbbb""")
+(
+    """aaaaaaaaa"""
+    """bbbbbbbbbbbbbbbbbbbb"""
+)
 
 (
-    f"""aaaa{
-    10}aaaaa"""
+    f"""aaaa{10}aaaaa"""
     rf"""bbbbbbbbbbbbbbbbbbbb"""
 )
 
-if (r"aaaaaaaaa" r"bbbbbbbbbbbbbbbbbbbb") + ["aaaaaaaaaa", "bbbbbbbbbbbbbbbb"]:
+if (
+    r"aaaaaaaaa"
+    r"bbbbbbbbbbbbbbbbbbbb"
+) + ["aaaaaaaaaa", "bbbbbbbbbbbbbbbb"]:
     ...
 
 
@@ -193,16 +205,8 @@
 
 r"aaaaaaaaa" r"bbbbbbbbbbbbbbbbbbbb"
 
-(
-    f"aaaa{
-    10}aaaaa"
-    rf"bbbbbbbbbbbbbbbbbbbb"
-)
+(f"aaaa{10}aaaaa" rf"bbbbbbbbbbbbbbbbbbbb")
 
 (r"""aaaaaaaaa""" r"""bbbbbbbbbbbbbbbbbbbb""")
 
-(
-    f"""aaaa{
-    10}aaaaa"""
-    rf"""bbbbbbbbbbbbbbbbbbbb"""
-)
+(f"""aaaa{10}aaaaa""" rf"""bbbbbbbbbbbbbbbbbbbb""")
```


### Output 2
```
indent-style               = space
line-width                 = 88
indent-width               = 4
quote-style                = Single
line-ending                = LineFeed
magic-trailing-comma       = Respect
docstring-code             = Disabled
docstring-code-line-width  = "dynamic"
preview                    = Disabled
target_version             = Py38
source_type                = Python
```

```python
"' test"

'" test'

'" test'
"' test"

# Prefer single quotes for string with more double quotes
'\' " " \'\' " " \''

# Prefer double quotes for string with more single quotes
'\' " " \'\' " " \''

# Prefer double quotes for string with equal amount of single and double quotes
'" \' " " \'\''
'\' " \'\' " "'

'\\\' ""'
'\\\' ""'


'Test'
'Test'

r'Test'
R'Test'

# Block conversion if there is an unescaped quote just before the end of the triple
# quoted string
r'''\""'''
r'''""'''
r'\""'

'This string will not include \
backslashes or newline characters.'

if True:
    'This string will not include \
        backslashes or newline characters.'

"""Multiline
String \"
"""

"""Multiline
String \'
"""

"""Multiline
String ""
"""

'''Multiline
String """
'''

'''Multiline
String "'''

"""Multiline
String '''
"""

"""Multiline
String '"""

"""Multiline
String \"\"\"
"""

# String continuation

"Let's" 'start' 'with' 'a' 'simple' 'example'

"Let's" 'start' 'with' 'a' 'simple' 'example' 'now repeat after me:' 'I am confident' 'I am confident' 'I am confident' 'I am confident' 'I am confident'

(
    "Let's"
    'start'
    'with'
    'a'
    'simple'
    'example'
    'now repeat after me:'
    'I am confident'
    'I am confident'
    'I am confident'
    'I am confident'
    'I am confident'
)

if (
    a + "Let's"
    'start'
    'with'
    'a'
    'simple'
    'example'
    'now repeat after me:'
    'I am confident'
    'I am confident'
    'I am confident'
    'I am confident'
    'I am confident'
):
    pass

if (
    "Let's"
    'start'
    'with'
    'a'
    'simple'
    'example'
    'now repeat after me:'
    'I am confident'
    'I am confident'
    'I am confident'
    'I am confident'
    'I am confident'
):
    pass

(
    # leading
    'a'  # trailing part comment
    # leading part comment
    'b'  # trailing second part comment
    # trailing
)

test_particular = [
    # squares
    '1.00000000100000000025',
    '1.0000000000000000000000000100000000000000000000000'  # ...
    '00025',
    '1.0000000000000000000000000000000000000000000010000'  # ...
    '0000000000000000000000000000000000000000025',
]

# Parenthesized string continuation with messed up indentation
{'key': ([], 'a' 'b' 'c')}


# Regression test for https://github.com/astral-sh/ruff/issues/5893
x = (
    """aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"""
    """bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"""
)
x = (
    f"""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"""
    f"""bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"""
)
x = (
    b"""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"""
    b"""bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"""
)

# https://github.com/astral-sh/ruff/issues/7460
trailing_preferred_quote_texts = [''' "''', ''' ""''', ''' """''', ''' """"''']

a = f"""\x1f"""
a = """\x1f"""
a = """\\x1F"""
a = """\\\x1f"""


##############################################################################
# Implicit concatenated strings
##############################################################################

# In preview, don't collapse implicit concatenated strings that can't be joined into a single string
# and that are multiline in the source.

(r'aaaaaaaaa' r'bbbbbbbbbbbbbbbbbbbb')

(r'aaaaaaaaa' r'bbbbbbbbbbbbbbbbbbbb' 'cccccccccccccccccccccc')

("""aaaaaaaaa""" """bbbbbbbbbbbbbbbbbbbb""")

(
    f"""aaaa{
    10}aaaaa"""
    rf"""bbbbbbbbbbbbbbbbbbbb"""
)

if (r'aaaaaaaaa' r'bbbbbbbbbbbbbbbbbbbb') + ['aaaaaaaaaa', 'bbbbbbbbbbbbbbbb']:
    ...


# In preview, keep implicit concatenated strings on a single line if they fit and are not separate by line breaks in the source
(r'aaaaaaaaa' r'bbbbbbbbbbbbbbbbbbbb')

r'aaaaaaaaa' r'bbbbbbbbbbbbbbbbbbbb'

(
    f'aaaa{
    10}aaaaa'
    rf'bbbbbbbbbbbbbbbbbbbb'
)

(r"""aaaaaaaaa""" r"""bbbbbbbbbbbbbbbbbbbb""")

(
    f"""aaaa{
    10}aaaaa"""
    rf"""bbbbbbbbbbbbbbbbbbbb"""
)
```


#### Preview changes
```diff
--- Stable
+++ Preview
@@ -70,9 +70,9 @@
 
 # String continuation
 
-"Let's" 'start' 'with' 'a' 'simple' 'example'
+"Let'sstartwithasimpleexample"
 
-"Let's" 'start' 'with' 'a' 'simple' 'example' 'now repeat after me:' 'I am confident' 'I am confident' 'I am confident' 'I am confident' 'I am confident'
+"Let'sstartwithasimpleexamplenow repeat after me:I am confidentI am confidentI am confidentI am confidentI am confident"
 
 (
     "Let's"
@@ -139,7 +139,7 @@
 ]
 
 # Parenthesized string continuation with messed up indentation
-{'key': ([], 'a' 'b' 'c')}
+{'key': ([], 'abc')}
 
 
 # Regression test for https://github.com/astral-sh/ruff/issues/5893
@@ -172,19 +172,31 @@
 # In preview, don't collapse implicit concatenated strings that can't be joined into a single string
 # and that are multiline in the source.
 
-(r'aaaaaaaaa' r'bbbbbbbbbbbbbbbbbbbb')
+(
+    r'aaaaaaaaa'
+    r'bbbbbbbbbbbbbbbbbbbb'
+)
 
-(r'aaaaaaaaa' r'bbbbbbbbbbbbbbbbbbbb' 'cccccccccccccccccccccc')
+(
+    r'aaaaaaaaa'
+    r'bbbbbbbbbbbbbbbbbbbb'
+    'cccccccccccccccccccccc'
+)
 
-("""aaaaaaaaa""" """bbbbbbbbbbbbbbbbbbbb""")
+(
+    """aaaaaaaaa"""
+    """bbbbbbbbbbbbbbbbbbbb"""
+)
 
 (
-    f"""aaaa{
-    10}aaaaa"""
+    f"""aaaa{10}aaaaa"""
     rf"""bbbbbbbbbbbbbbbbbbbb"""
 )
 
-if (r'aaaaaaaaa' r'bbbbbbbbbbbbbbbbbbbb') + ['aaaaaaaaaa', 'bbbbbbbbbbbbbbbb']:
+if (
+    r'aaaaaaaaa'
+    r'bbbbbbbbbbbbbbbbbbbb'
+) + ['aaaaaaaaaa', 'bbbbbbbbbbbbbbbb']:
     ...
 
 
@@ -193,16 +205,8 @@
 
 r'aaaaaaaaa' r'bbbbbbbbbbbbbbbbbbbb'
 
-(
-    f'aaaa{
-    10}aaaaa'
-    rf'bbbbbbbbbbbbbbbbbbbb'
-)
+(f'aaaa{10}aaaaa' rf'bbbbbbbbbbbbbbbbbbbb')
 
 (r"""aaaaaaaaa""" r"""bbbbbbbbbbbbbbbbbbbb""")
 
-(
-    f"""aaaa{
-    10}aaaaa"""
-    rf"""bbbbbbbbbbbbbbbbbbbb"""
-)
+(f"""aaaa{10}aaaaa""" rf"""bbbbbbbbbbbbbbbbbbbb""")
```

---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/ruff/statement/type_alias.py
---
## Input
```python
# basic usage
type X = int
type X = int | str
type X = int | "ForwardRefY"
type X[T] = T | list[X[T]]  # recursive
type X[T] = int
type X[T] = list[T] | set[T]
type X[T=int]=int
type X[T:int=int]=int
type X[**P=int]=int
type X[*Ts=int]=int
type X[*Ts=*int]=int
type X[T, *Ts, **P] = (T, Ts, P)
type X[T: int, *Ts, **P] = (T, Ts, P)
type X[T: (int, str), *Ts, **P] = (T, Ts, P)

# long name
type Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = int
type Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[A] = int
type Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Aaaaaaaaaaaaaaaaaaaaaaaaaaaa] = int
type Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Aaaaaaaaaaaaaaaaaaaaaaaaaaaa, Bbbbbbbbbbbbb] = int
type Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = Tttttttttttttttttttttttttttttttttttttttttttttttttttttttt
type Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = Tttttttttttttttttttttttttttttttttttttttttttttttttttttttt # with comment

# long value
type X = Ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt
type X = Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa | Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb | Ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
type XXXXXXXXXXXXX = Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt # with comment

# soft keyword as alias name
type type = int
type match = int
type case = int

# soft keyword as value
type foo = type
type foo = match
type foo = case

# multine definitions
type \
	X = int
type X \
	= int
type X = \
	int
type X = (
    int
)
type \
    X[T] = T
type X \
    [T] = T
type X[T] \
    = T
type X[T
    ] = T

# bounds and defaults with multiline definitions
type X[T
    :int ] = int
type X[T:
    int] = int
type X[T
       = int] = int
type X[T=
    int] = int

# type leading comment
type X = ( # trailing open paren comment
    # value leading comment
    int # value trailing comment
    # leading close paren comment
) # type trailing comment


# type leading comment
type X = (
    # value leading comment
    int # value trailing comment

    # leading close paren comment
)

# type parameters
type type_params_single_line[aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccccccccc] = int
type type_params_arguments_on_their_own_line[aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccc, ddddddddddddd, eeeeeee] = int
type type_params_argument_per_line[aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccccccccc, ddddddddddddd, eeeeeeeeeeeeeeee, ffffffffffff] = int
type type_params_trailing_comma[a, b,] = int
type type_params_comments[ # trailing open bracket comment
    # leading comment
    A,

    # in between comment

    B,
    # another leading comment
    C,
    D, # trailing comment
    # leading close bracket comment
] = int  # trailing value comment
type type_params_single_comment[ # trailing open bracket comment
    A,
    B
] = int
type type_params_all_kinds[type_var, *type_var_tuple, **param_spec] = int

# type variable bounds
type bounds_single_line[T: (aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccccccccc)] = T
type bounds_arguments_on_their_own_line[T: (aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccc, ddddddddddddd, eeeeeee)] = T
type bounds_argument_per_line[T: (aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccccccccc, ddddddddddddd, eeeeeeeeeeeeeeee, ffffffffffff)] = T
type bounds_trailing_comma[T: (a, b,)] = T

# bounds plus comments
type comment_before_colon[T # comment
    : int] = T
type comment_after_colon[T: # comment
                         int] = T
type comment_on_its_own_line[T
    # comment
    :
    # another comment
    int
    # why not another
    ] = T

# type variable defaults
type defaults_single_line[T= (aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccccccccc)] = T
type defaults_on_their_own_line[T= (aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccc, ddddddddddddd, eeeeeee)] = T
type defaults_one_per_line[T= (aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccccccccc, ddddddddddddd, eeeeeeeeeeeeeeee, ffffffffffff)] = T
type defaults_trailing_comma[T= (a, b,)] = T

# defaults plus comments
type comment_before_colon[T # comment
    = int] = T
type comment_after_colon[T    = # comment
                         int] = T
type comment_on_its_own_line[T
    # comment
    =
    # another comment
    int
    # why not another
    ] = T
type after_star[*Ts = *
    # comment
    int] = int

# both bounds and defaults
type bound_and_default[T:int=int] = int
type long_bound_short_default[T: (aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccc, ddddddddddddd, eeeeeee)=a]=int
type short_bound_long_default[T:a= (aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccc, ddddddddddddd, eeeeeee)]=int
```

## Outputs
### Output 1
```
indent-style               = space
line-width                 = 88
indent-width               = 4
quote-style                = Double
line-ending                = LineFeed
magic-trailing-comma       = Respect
docstring-code             = Disabled
docstring-code-line-width  = "dynamic"
preview                    = Disabled
target_version             = 3.12
source_type                = Python
```

```python
# basic usage
type X = int
type X = int | str
type X = int | "ForwardRefY"
type X[T] = T | list[X[T]]  # recursive
type X[T] = int
type X[T] = list[T] | set[T]
type X[T = int] = int
type X[T: int = int] = int
type X[**P = int] = int
type X[*Ts = int] = int
type X[*Ts = *int] = int
type X[T, *Ts, **P] = (T, Ts, P)
type X[T: int, *Ts, **P] = (T, Ts, P)
type X[T: (int, str), *Ts, **P] = (T, Ts, P)

# long name
type Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = int
type Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[
    A
] = int
type Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[
    Aaaaaaaaaaaaaaaaaaaaaaaaaaaa
] = int
type Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[
    Aaaaaaaaaaaaaaaaaaaaaaaaaaaa,
    Bbbbbbbbbbbbb,
] = int
type Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = Tttttttttttttttttttttttttttttttttttttttttttttttttttttttt
type Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = (
    Tttttttttttttttttttttttttttttttttttttttttttttttttttttttt  # with comment
)

# long value
type X = Ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt
type X = (
    Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    | Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    | Ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
)
type XXXXXXXXXXXXX = (
    Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt  # with comment
)

# soft keyword as alias name
type type = int
type match = int
type case = int

# soft keyword as value
type foo = type
type foo = match
type foo = case

# multine definitions
type X = int
type X = int
type X = int
type X = int
type X[T] = T
type X[T] = T
type X[T] = T
type X[T] = T

# bounds and defaults with multiline definitions
type X[T: int] = int
type X[T: int] = int
type X[T = int] = int
type X[T = int] = int

# type leading comment
type X = (  # trailing open paren comment
    # value leading comment
    int  # value trailing comment
    # leading close paren comment
)  # type trailing comment


# type leading comment
type X = (
    # value leading comment
    int  # value trailing comment
    # leading close paren comment
)

# type parameters
type type_params_single_line[
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
    bbbbbbbbbbbbbbb,
    ccccccccccccccccc,
] = int
type type_params_arguments_on_their_own_line[
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
    bbbbbbbbbbbbbbb,
    ccccccccccc,
    ddddddddddddd,
    eeeeeee,
] = int
type type_params_argument_per_line[
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
    bbbbbbbbbbbbbbb,
    ccccccccccccccccc,
    ddddddddddddd,
    eeeeeeeeeeeeeeee,
    ffffffffffff,
] = int
type type_params_trailing_comma[
    a,
    b,
] = int
type type_params_comments[  # trailing open bracket comment
    # leading comment
    A,
    # in between comment
    B,
    # another leading comment
    C,
    D,  # trailing comment
    # leading close bracket comment
] = int  # trailing value comment
type type_params_single_comment[  # trailing open bracket comment
    A,
    B,
] = int
type type_params_all_kinds[type_var, *type_var_tuple, **param_spec] = int

# type variable bounds
type bounds_single_line[
    T: (aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccccccccc)
] = T
type bounds_arguments_on_their_own_line[
    T: (
        aaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
        bbbbbbbbbbbbbbb,
        ccccccccccc,
        ddddddddddddd,
        eeeeeee,
    )
] = T
type bounds_argument_per_line[
    T: (
        aaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
        bbbbbbbbbbbbbbb,
        ccccccccccccccccc,
        ddddddddddddd,
        eeeeeeeeeeeeeeee,
        ffffffffffff,
    )
] = T
type bounds_trailing_comma[
    T: (
        a,
        b,
    )
] = T

# bounds plus comments
type comment_before_colon[
    T: # comment
    int
] = T
type comment_after_colon[
    T: # comment
    int
] = T
type comment_on_its_own_line[
    T: # comment
    # another comment
    int
    # why not another
] = T

# type variable defaults
type defaults_single_line[
    T = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccccccccc)
] = T
type defaults_on_their_own_line[
    T = (
        aaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
        bbbbbbbbbbbbbbb,
        ccccccccccc,
        ddddddddddddd,
        eeeeeee,
    )
] = T
type defaults_one_per_line[
    T = (
        aaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
        bbbbbbbbbbbbbbb,
        ccccccccccccccccc,
        ddddddddddddd,
        eeeeeeeeeeeeeeee,
        ffffffffffff,
    )
] = T
type defaults_trailing_comma[
    T = (
        a,
        b,
    )
] = T

# defaults plus comments
type comment_before_colon[
    T = # comment
    int
] = T
type comment_after_colon[
    T = # comment
    int
] = T
type comment_on_its_own_line[
    T = # comment
    # another comment
    int
    # why not another
] = T
type after_star[
    *Ts = # comment
    *int
] = int

# both bounds and defaults
type bound_and_default[T: int = int] = int
type long_bound_short_default[
    T: (
        aaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
        bbbbbbbbbbbbbbb,
        ccccccccccc,
        ddddddddddddd,
        eeeeeee,
    ) = a
] = int
type short_bound_long_default[
    T: a = (
        aaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
        bbbbbbbbbbbbbbb,
        ccccccccccc,
        ddddddddddddd,
        eeeeeee,
    )
] = int
```


### Unsupported Syntax Errors
error[invalid-syntax]: Cannot set default type for a type parameter on Python 3.12 (syntax was added in Python 3.13)
  --> type_alias.py:8:10
   |
 6 | type X[T] = int
 7 | type X[T] = list[T] | set[T]
 8 | type X[T = int] = int
   |          ^^^^^
 9 | type X[T: int = int] = int
10 | type X[**P = int] = int
   |

error[invalid-syntax]: Cannot set default type for a type parameter on Python 3.12 (syntax was added in Python 3.13)
  --> type_alias.py:9:15
   |
 7 | type X[T] = list[T] | set[T]
 8 | type X[T = int] = int
 9 | type X[T: int = int] = int
   |               ^^^^^
10 | type X[**P = int] = int
11 | type X[*Ts = int] = int
   |

error[invalid-syntax]: Cannot set default type for a type parameter on Python 3.12 (syntax was added in Python 3.13)
  --> type_alias.py:68:10
   |
66 | type X[T: int] = int
67 | type X[T: int] = int
68 | type X[T = int] = int
   |          ^^^^^
69 | type X[T = int] = int
   |

error[invalid-syntax]: Cannot set default type for a type parameter on Python 3.12 (syntax was added in Python 3.13)
  --> type_alias.py:69:10
   |
67 | type X[T: int] = int
68 | type X[T = int] = int
69 | type X[T = int] = int
   |          ^^^^^
70 |
71 | # type leading comment
   |

error[invalid-syntax]: Cannot set default type for a type parameter on Python 3.12 (syntax was added in Python 3.13)
   --> type_alias.py:175:7
    |
173 | # type variable defaults
174 | type defaults_single_line[
175 |     T = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccccccccc)
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
176 | ] = T
177 | type defaults_on_their_own_line[
    |

error[invalid-syntax]: Cannot set default type for a type parameter on Python 3.12 (syntax was added in Python 3.13)
   --> type_alias.py:178:7
    |
176 |   ] = T
177 |   type defaults_on_their_own_line[
178 |       T = (
    |  _______^
179 | |         aaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
180 | |         bbbbbbbbbbbbbbb,
181 | |         ccccccccccc,
182 | |         ddddddddddddd,
183 | |         eeeeeee,
184 | |     )
    | |_____^
185 |   ] = T
186 |   type defaults_one_per_line[
    |

error[invalid-syntax]: Cannot set default type for a type parameter on Python 3.12 (syntax was added in Python 3.13)
   --> type_alias.py:187:7
    |
185 |   ] = T
186 |   type defaults_one_per_line[
187 |       T = (
    |  _______^
188 | |         aaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
189 | |         bbbbbbbbbbbbbbb,
190 | |         ccccccccccccccccc,
191 | |         ddddddddddddd,
192 | |         eeeeeeeeeeeeeeee,
193 | |         ffffffffffff,
194 | |     )
    | |_____^
195 |   ] = T
196 |   type defaults_trailing_comma[
    |

error[invalid-syntax]: Cannot set default type for a type parameter on Python 3.12 (syntax was added in Python 3.13)
   --> type_alias.py:197:7
    |
195 |   ] = T
196 |   type defaults_trailing_comma[
197 |       T = (
    |  _______^
198 | |         a,
199 | |         b,
200 | |     )
    | |_____^
201 |   ] = T
    |

error[invalid-syntax]: Cannot set default type for a type parameter on Python 3.12 (syntax was added in Python 3.13)
   --> type_alias.py:205:7
    |
203 |   # defaults plus comments
204 |   type comment_before_colon[
205 |       T = # comment
    |  _______^
206 | |     int
    | |_______^
207 |   ] = T
208 |   type comment_after_colon[
    |

error[invalid-syntax]: Cannot set default type for a type parameter on Python 3.12 (syntax was added in Python 3.13)
   --> type_alias.py:209:7
    |
207 |   ] = T
208 |   type comment_after_colon[
209 |       T = # comment
    |  _______^
210 | |     int
    | |_______^
211 |   ] = T
212 |   type comment_on_its_own_line[
    |

error[invalid-syntax]: Cannot set default type for a type parameter on Python 3.12 (syntax was added in Python 3.13)
   --> type_alias.py:213:7
    |
211 |   ] = T
212 |   type comment_on_its_own_line[
213 |       T = # comment
    |  _______^
214 | |     # another comment
215 | |     int
    | |_______^
216 |       # why not another
217 |   ] = T
    |

error[invalid-syntax]: Cannot set default type for a type parameter on Python 3.12 (syntax was added in Python 3.13)
   --> type_alias.py:224:31
    |
223 | # both bounds and defaults
224 | type bound_and_default[T: int = int] = int
    |                               ^^^^^
225 | type long_bound_short_default[
226 |     T: (
    |

error[invalid-syntax]: Cannot set default type for a type parameter on Python 3.12 (syntax was added in Python 3.13)
   --> type_alias.py:232:7
    |
230 |         ddddddddddddd,
231 |         eeeeeee,
232 |     ) = a
    |       ^^^
233 | ] = int
234 | type short_bound_long_default[
    |

error[invalid-syntax]: Cannot set default type for a type parameter on Python 3.12 (syntax was added in Python 3.13)
   --> type_alias.py:235:10
    |
233 |   ] = int
234 |   type short_bound_long_default[
235 |       T: a = (
    |  __________^
236 | |         aaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
237 | |         bbbbbbbbbbbbbbb,
238 | |         ccccccccccc,
239 | |         ddddddddddddd,
240 | |         eeeeeee,
241 | |     )
    | |_____^
242 |   ] = int
    |

---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/black/py_37/python37.py
---
## Input

```py
#!/usr/bin/env python3.7


def f():
    return (i * 2 async for i in arange(42))


def g():
    return (
        something_long * something_long
        async for something_long in async_generator(with_an_argument)
    )


async def func():
    if test:
        out_batched = [
            i
            async for i in aitertools._async_map(
                self.async_inc, arange(8), batch_size=3
            )
        ]


def awaited_generator_value(n):
    return (await awaitable for awaitable in awaitable_list)


def make_arange(n):
    return (i * 2 for i in range(n) if await wrap(i))
```

## Black Differences

```diff
--- Black
+++ Ruff
@@ -2,29 +2,21 @@
 
 
 def f():
-    return (i * 2 async for i in arange(42))
+    return (i for i in [])
 
 
 def g():
-    return (
-        something_long * something_long
-        async for something_long in async_generator(with_an_argument)
-    )
+    return (i for i in [])
 
 
 async def func():
     if test:
-        out_batched = [
-            i
-            async for i in aitertools._async_map(
-                self.async_inc, arange(8), batch_size=3
-            )
-        ]
+        out_batched = [i for i in []]
 
 
 def awaited_generator_value(n):
-    return (await awaitable for awaitable in awaitable_list)
+    return (i for i in [])
 
 
 def make_arange(n):
-    return (i * 2 for i in range(n) if await wrap(i))
+    return (i for i in [])
```

## Ruff Output

```py
#!/usr/bin/env python3.7


def f():
    return (i for i in [])


def g():
    return (i for i in [])


async def func():
    if test:
        out_batched = [i for i in []]


def awaited_generator_value(n):
    return (i for i in [])


def make_arange(n):
    return (i for i in [])
```

## Black Output

```py
#!/usr/bin/env python3.7


def f():
    return (i * 2 async for i in arange(42))


def g():
    return (
        something_long * something_long
        async for something_long in async_generator(with_an_argument)
    )


async def func():
    if test:
        out_batched = [
            i
            async for i in aitertools._async_map(
                self.async_inc, arange(8), batch_size=3
            )
        ]


def awaited_generator_value(n):
    return (await awaitable for awaitable in awaitable_list)


def make_arange(n):
    return (i * 2 for i in range(n) if await wrap(i))
```



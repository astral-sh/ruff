---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/ruff/preview.py
---
## Input
```python
"""
Black's `Preview.module_docstring_newlines`


A code black to format
.. code-block:: python

    from bokeh.events import ButtonClick
    from bokeh.models import Button

    button = Button()

    def callback(event         ):
        print('Python:Click')

    button.on_event(ButtonClick, callback)
"""
first_stmt_after_module_level_docstring = 1


class CachedRepository:
    # Black's `Preview.dummy_implementations`
    def get_release_info(self): ...


def raw_docstring():

    r"""Black's `Preview.accept_raw_docstrings`
        a
            b
    """
    pass


def reference_docstring_newlines():

    """A regular docstring for comparison
        a
            b
    """
    pass


class RemoveNewlineBeforeClassDocstring:

    """Black's `Preview.no_blank_line_before_class_docstring`"""


def f():
    """Black's `Preview.prefer_splitting_right_hand_side_of_assignments`"""
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    ] = cccccccc.ccccccccccccc.cccccccc

    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    ] = cccccccc.ccccccccccccc().cccccccc

    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    ] = cccccccc.ccccccccccccc(d).cccccccc

    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
        cccccccc.ccccccccccccc(d).cccccccc + e
    )

    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
        cccccccc.ccccccccccccc.cccccccc + e
    )
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
        cccccccc.ccccccccccccc.cccccccc
        + eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
    )

    self._cache: dict[
        DependencyCacheKey, list[list[DependencyPackage]]
    ] = collections.defaultdict(list)
    self._cached_dependencies_by_level: dict[
        int, list[DependencyCacheKey]
    ] = collections.defaultdict(list)
```

## Outputs
### Output 1
```
indent-style               = space
line-width                 = 88
indent-width               = 4
quote-style                = Double
line-ending                = LineFeed
magic-trailing-comma       = Respect
docstring-code             = Disabled
docstring-code-line-width  = "dynamic"
preview                    = Disabled
target_version             = Py38
source_type                = Python
```

```python
"""
Black's `Preview.module_docstring_newlines`


A code black to format
.. code-block:: python

    from bokeh.events import ButtonClick
    from bokeh.models import Button

    button = Button()

    def callback(event         ):
        print('Python:Click')

    button.on_event(ButtonClick, callback)
"""
first_stmt_after_module_level_docstring = 1


class CachedRepository:
    # Black's `Preview.dummy_implementations`
    def get_release_info(self):
        ...


def raw_docstring():
    r"""Black's `Preview.accept_raw_docstrings`
    a
        b
    """
    pass


def reference_docstring_newlines():
    """A regular docstring for comparison
    a
        b
    """
    pass


class RemoveNewlineBeforeClassDocstring:

    """Black's `Preview.no_blank_line_before_class_docstring`"""


def f():
    """Black's `Preview.prefer_splitting_right_hand_side_of_assignments`"""
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    ] = cccccccc.ccccccccccccc.cccccccc

    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    ] = cccccccc.ccccccccccccc().cccccccc

    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    ] = cccccccc.ccccccccccccc(d).cccccccc

    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
        cccccccc.ccccccccccccc(d).cccccccc + e
    )

    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
        cccccccc.ccccccccccccc.cccccccc + e
    )
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
        cccccccc.ccccccccccccc.cccccccc
        + eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
    )

    self._cache: dict[
        DependencyCacheKey, list[list[DependencyPackage]]
    ] = collections.defaultdict(list)
    self._cached_dependencies_by_level: dict[
        int, list[DependencyCacheKey]
    ] = collections.defaultdict(list)
```


#### Preview changes
```diff
--- Stable
+++ Preview
@@ -13,15 +13,14 @@
     def callback(event         ):
         print('Python:Click')
 
-    button.on_event(ButtonClick, callback)
-"""
+    button.on_event(ButtonClick, callback)"""
+
 first_stmt_after_module_level_docstring = 1
 
 
 class CachedRepository:
     # Black's `Preview.dummy_implementations`
-    def get_release_info(self):
-        ...
+    def get_release_info(self): ...
 
 
 def raw_docstring():
@@ -41,23 +40,22 @@
 
 
 class RemoveNewlineBeforeClassDocstring:
-
     """Black's `Preview.no_blank_line_before_class_docstring`"""
 
 
 def f():
     """Black's `Preview.prefer_splitting_right_hand_side_of_assignments`"""
-    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[
-        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
-    ] = cccccccc.ccccccccccccc.cccccccc
+    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
+        cccccccc.ccccccccccccc.cccccccc
+    )
 
-    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[
-        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
-    ] = cccccccc.ccccccccccccc().cccccccc
+    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
+        cccccccc.ccccccccccccc().cccccccc
+    )
 
-    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[
-        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
-    ] = cccccccc.ccccccccccccc(d).cccccccc
+    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
+        cccccccc.ccccccccccccc(d).cccccccc
+    )
 
     aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
         cccccccc.ccccccccccccc(d).cccccccc + e
@@ -71,9 +69,9 @@
         + eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
     )
 
-    self._cache: dict[
-        DependencyCacheKey, list[list[DependencyPackage]]
-    ] = collections.defaultdict(list)
-    self._cached_dependencies_by_level: dict[
-        int, list[DependencyCacheKey]
-    ] = collections.defaultdict(list)
+    self._cache: dict[DependencyCacheKey, list[list[DependencyPackage]]] = (
+        collections.defaultdict(list)
+    )
+    self._cached_dependencies_by_level: dict[int, list[DependencyCacheKey]] = (
+        collections.defaultdict(list)
+    )
```


### Output 2
```
indent-style               = space
line-width                 = 88
indent-width               = 4
quote-style                = Double
line-ending                = LineFeed
magic-trailing-comma       = Respect
docstring-code             = Disabled
docstring-code-line-width  = "dynamic"
preview                    = Enabled
target_version             = Py38
source_type                = Python
```

```python
"""
Black's `Preview.module_docstring_newlines`


A code black to format
.. code-block:: python

    from bokeh.events import ButtonClick
    from bokeh.models import Button

    button = Button()

    def callback(event         ):
        print('Python:Click')

    button.on_event(ButtonClick, callback)"""

first_stmt_after_module_level_docstring = 1


class CachedRepository:
    # Black's `Preview.dummy_implementations`
    def get_release_info(self): ...


def raw_docstring():
    r"""Black's `Preview.accept_raw_docstrings`
    a
        b
    """
    pass


def reference_docstring_newlines():
    """A regular docstring for comparison
    a
        b
    """
    pass


class RemoveNewlineBeforeClassDocstring:
    """Black's `Preview.no_blank_line_before_class_docstring`"""


def f():
    """Black's `Preview.prefer_splitting_right_hand_side_of_assignments`"""
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
        cccccccc.ccccccccccccc.cccccccc
    )

    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
        cccccccc.ccccccccccccc().cccccccc
    )

    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
        cccccccc.ccccccccccccc(d).cccccccc
    )

    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
        cccccccc.ccccccccccccc(d).cccccccc + e
    )

    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
        cccccccc.ccccccccccccc.cccccccc + e
    )
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] = (
        cccccccc.ccccccccccccc.cccccccc
        + eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
    )

    self._cache: dict[DependencyCacheKey, list[list[DependencyPackage]]] = (
        collections.defaultdict(list)
    )
    self._cached_dependencies_by_level: dict[int, list[DependencyCacheKey]] = (
        collections.defaultdict(list)
    )
```




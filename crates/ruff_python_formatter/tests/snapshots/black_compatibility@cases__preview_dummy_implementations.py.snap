---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/black/cases/preview_dummy_implementations.py
---
## Input

```python
from typing import NoReturn, Protocol, Union, overload

class Empty:
    ...

def dummy(a): ...
async def other(b): ...


@overload
def a(arg: int) -> int: ...
@overload
def a(arg: str) -> str: ...
@overload
def a(arg: object) -> NoReturn: ...
def a(arg: Union[int, str, object]) -> Union[int, str]:
    if not isinstance(arg, (int, str)):
        raise TypeError
    return arg

class Proto(Protocol):
    def foo(self, a: int) -> int:
        ...

    def bar(self, b: str) -> str: ...
    def baz(self, c: bytes) -> str:
        ...


def dummy_two():
    ...
@dummy
def dummy_three():
    ...

def dummy_four():
    ...

@overload
def b(arg: int) -> int: ...

@overload
def b(arg: str) -> str: ...
@overload
def b(arg: object) -> NoReturn: ...

def b(arg: Union[int, str, object]) -> Union[int, str]:
    if not isinstance(arg, (int, str)):
        raise TypeError
    return arg

def has_comment():
    ...  # still a dummy

if some_condition:
    ...

if already_dummy: ...
```

## Black Differences

```diff
--- Black
+++ Ruff
@@ -5,15 +5,23 @@
 
 
 def dummy(a): ...
+
+
 async def other(b): ...
 
 
 @overload
 def a(arg: int) -> int: ...
+
+
 @overload
 def a(arg: str) -> str: ...
+
+
 @overload
 def a(arg: object) -> NoReturn: ...
+
+
 def a(arg: Union[int, str, object]) -> Union[int, str]:
     if not isinstance(arg, (int, str)):
         raise TypeError
@@ -24,10 +32,13 @@
     def foo(self, a: int) -> int: ...
 
     def bar(self, b: str) -> str: ...
+
     def baz(self, c: bytes) -> str: ...
 
 
 def dummy_two(): ...
+
+
 @dummy
 def dummy_three(): ...
 
@@ -41,6 +52,8 @@
 
 @overload
 def b(arg: str) -> str: ...
+
+
 @overload
 def b(arg: object) -> NoReturn: ...
 
@@ -54,8 +67,6 @@
 def has_comment(): ...  # still a dummy
 
 
-if some_condition:
-    ...
+if some_condition: ...
 
-if already_dummy:
-    ...
+if already_dummy: ...
```

## Ruff Output

```python
from typing import NoReturn, Protocol, Union, overload


class Empty: ...


def dummy(a): ...


async def other(b): ...


@overload
def a(arg: int) -> int: ...


@overload
def a(arg: str) -> str: ...


@overload
def a(arg: object) -> NoReturn: ...


def a(arg: Union[int, str, object]) -> Union[int, str]:
    if not isinstance(arg, (int, str)):
        raise TypeError
    return arg


class Proto(Protocol):
    def foo(self, a: int) -> int: ...

    def bar(self, b: str) -> str: ...

    def baz(self, c: bytes) -> str: ...


def dummy_two(): ...


@dummy
def dummy_three(): ...


def dummy_four(): ...


@overload
def b(arg: int) -> int: ...


@overload
def b(arg: str) -> str: ...


@overload
def b(arg: object) -> NoReturn: ...


def b(arg: Union[int, str, object]) -> Union[int, str]:
    if not isinstance(arg, (int, str)):
        raise TypeError
    return arg


def has_comment(): ...  # still a dummy


if some_condition: ...

if already_dummy: ...
```

## Black Output

```python
from typing import NoReturn, Protocol, Union, overload


class Empty: ...


def dummy(a): ...
async def other(b): ...


@overload
def a(arg: int) -> int: ...
@overload
def a(arg: str) -> str: ...
@overload
def a(arg: object) -> NoReturn: ...
def a(arg: Union[int, str, object]) -> Union[int, str]:
    if not isinstance(arg, (int, str)):
        raise TypeError
    return arg


class Proto(Protocol):
    def foo(self, a: int) -> int: ...

    def bar(self, b: str) -> str: ...
    def baz(self, c: bytes) -> str: ...


def dummy_two(): ...
@dummy
def dummy_three(): ...


def dummy_four(): ...


@overload
def b(arg: int) -> int: ...


@overload
def b(arg: str) -> str: ...
@overload
def b(arg: object) -> NoReturn: ...


def b(arg: Union[int, str, object]) -> Union[int, str]:
    if not isinstance(arg, (int, str)):
        raise TypeError
    return arg


def has_comment(): ...  # still a dummy


if some_condition:
    ...

if already_dummy:
    ...
```



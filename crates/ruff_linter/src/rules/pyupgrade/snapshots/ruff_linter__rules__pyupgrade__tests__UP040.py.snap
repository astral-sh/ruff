---
source: crates/ruff_linter/src/rules/pyupgrade/mod.rs
---
UP040.py:5:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
  |
4 | # UP040
5 | x: typing.TypeAlias = int
  | ^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
6 | x: TypeAlias = int
  |
  = help: Use the `type` keyword

ℹ Unsafe fix
2 2 | from typing import Any, TypeAlias
3 3 | 
4 4 | # UP040
5   |-x: typing.TypeAlias = int
  5 |+type x = int
6 6 | x: TypeAlias = int
7 7 | 
8 8 | # UP040 simple generic

UP040.py:6:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
  |
4 | # UP040
5 | x: typing.TypeAlias = int
6 | x: TypeAlias = int
  | ^^^^^^^^^^^^^^^^^^ UP040
7 |
8 | # UP040 simple generic
  |
  = help: Use the `type` keyword

ℹ Unsafe fix
3 3 | 
4 4 | # UP040
5 5 | x: typing.TypeAlias = int
6   |-x: TypeAlias = int
  6 |+type x = int
7 7 | 
8 8 | # UP040 simple generic
9 9 | T = typing.TypeVar["T"]

UP040.py:10:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
 8 | # UP040 simple generic
 9 | T = typing.TypeVar["T"]
10 | x: typing.TypeAlias = list[T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
11 |
12 | # UP040 call style generic
   |
   = help: Use the `type` keyword

ℹ Unsafe fix
7  7  | 
8  8  | # UP040 simple generic
9  9  | T = typing.TypeVar["T"]
10    |-x: typing.TypeAlias = list[T]
   10 |+type x[T] = list[T]
11 11 | 
12 12 | # UP040 call style generic
13 13 | T = typing.TypeVar("T")

UP040.py:14:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
12 | # UP040 call style generic
13 | T = typing.TypeVar("T")
14 | x: typing.TypeAlias = list[T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
15 |
16 | # UP040 bounded generic
   |
   = help: Use the `type` keyword

ℹ Unsafe fix
11 11 | 
12 12 | # UP040 call style generic
13 13 | T = typing.TypeVar("T")
14    |-x: typing.TypeAlias = list[T]
   14 |+type x[T] = list[T]
15 15 | 
16 16 | # UP040 bounded generic
17 17 | T = typing.TypeVar("T", bound=int)

UP040.py:18:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
16 | # UP040 bounded generic
17 | T = typing.TypeVar("T", bound=int)
18 | x: typing.TypeAlias = list[T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
19 |
20 | # UP040 constrained generic
   |
   = help: Use the `type` keyword

ℹ Unsafe fix
15 15 | 
16 16 | # UP040 bounded generic
17 17 | T = typing.TypeVar("T", bound=int)
18    |-x: typing.TypeAlias = list[T]
   18 |+type x[T: int] = list[T]
19 19 | 
20 20 | # UP040 constrained generic
21 21 | T = typing.TypeVar("T", int, str)

UP040.py:22:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
20 | # UP040 constrained generic
21 | T = typing.TypeVar("T", int, str)
22 | x: typing.TypeAlias = list[T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
23 |
24 | # UP040 contravariant generic
   |
   = help: Use the `type` keyword

ℹ Unsafe fix
19 19 | 
20 20 | # UP040 constrained generic
21 21 | T = typing.TypeVar("T", int, str)
22    |-x: typing.TypeAlias = list[T]
   22 |+type x[T: (int, str)] = list[T]
23 23 | 
24 24 | # UP040 contravariant generic
25 25 | T = typing.TypeVar("T", contravariant=True)

UP040.py:26:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
24 | # UP040 contravariant generic
25 | T = typing.TypeVar("T", contravariant=True)
26 | x: typing.TypeAlias = list[T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
27 |
28 | # UP040 covariant generic
   |
   = help: Use the `type` keyword

ℹ Unsafe fix
23 23 | 
24 24 | # UP040 contravariant generic
25 25 | T = typing.TypeVar("T", contravariant=True)
26    |-x: typing.TypeAlias = list[T]
   26 |+type x[T] = list[T]
27 27 | 
28 28 | # UP040 covariant generic
29 29 | T = typing.TypeVar("T", covariant=True)

UP040.py:30:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
28 | # UP040 covariant generic
29 | T = typing.TypeVar("T", covariant=True)
30 | x: typing.TypeAlias = list[T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
31 |
32 | # UP040 in class scope
   |
   = help: Use the `type` keyword

ℹ Unsafe fix
27 27 | 
28 28 | # UP040 covariant generic
29 29 | T = typing.TypeVar("T", covariant=True)
30    |-x: typing.TypeAlias = list[T]
   30 |+type x[T] = list[T]
31 31 | 
32 32 | # UP040 in class scope
33 33 | T = typing.TypeVar["T"]

UP040.py:36:5: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
34 | class Foo:
35 |     # reference to global variable
36 |     x: typing.TypeAlias = list[T]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
37 |
38 |     # reference to class variable
   |
   = help: Use the `type` keyword

ℹ Unsafe fix
33 33 | T = typing.TypeVar["T"]
34 34 | class Foo:
35 35 |     # reference to global variable
36    |-    x: typing.TypeAlias = list[T]
   36 |+    type x[T] = list[T]
37 37 | 
38 38 |     # reference to class variable
39 39 |     TCLS = typing.TypeVar["TCLS"]

UP040.py:40:5: UP040 [*] Type alias `y` uses `TypeAlias` annotation instead of the `type` keyword
   |
38 |     # reference to class variable
39 |     TCLS = typing.TypeVar["TCLS"]
40 |     y: typing.TypeAlias = list[TCLS]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
41 |
42 | # UP040 won't add generics in fix
   |
   = help: Use the `type` keyword

ℹ Unsafe fix
37 37 | 
38 38 |     # reference to class variable
39 39 |     TCLS = typing.TypeVar["TCLS"]
40    |-    y: typing.TypeAlias = list[TCLS]
   40 |+    type y[TCLS] = list[TCLS]
41 41 | 
42 42 | # UP040 won't add generics in fix
43 43 | T = typing.TypeVar(*args)

UP040.py:44:1: UP040 [*] Type alias `x` uses `TypeAlias` annotation instead of the `type` keyword
   |
42 | # UP040 won't add generics in fix
43 | T = typing.TypeVar(*args)
44 | x: typing.TypeAlias = list[T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
45 |
46 | # `default` should be skipped for now, added in Python 3.13
   |
   = help: Use the `type` keyword

ℹ Unsafe fix
41 41 | 
42 42 | # UP040 won't add generics in fix
43 43 | T = typing.TypeVar(*args)
44    |-x: typing.TypeAlias = list[T]
   44 |+type x = list[T]
45 45 | 
46 46 | # `default` should be skipped for now, added in Python 3.13
47 47 | T = typing.TypeVar("T", default=Any)

UP040.py:57:1: UP040 [*] Type alias `Decorator` uses `TypeAlias` annotation instead of the `type` keyword
   |
55 | # type alias.
56 | T = typing.TypeVar["T"]
57 | Decorator: TypeAlias = typing.Callable[[T], T]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
   |
   = help: Use the `type` keyword

ℹ Unsafe fix
54 54 | # Ensure that "T" appears only once  in the type parameters for the modernized
55 55 | # type alias.
56 56 | T = typing.TypeVar["T"]
57    |-Decorator: TypeAlias = typing.Callable[[T], T]
   57 |+type Decorator[T] = typing.Callable[[T], T]
58 58 | 
59 59 | 
60 60 | from typing import TypeVar, Annotated, TypeAliasType

UP040.py:67:1: UP040 [*] Type alias `PositiveList` uses `TypeAliasType` assignment instead of the `type` keyword
   |
65 |   # https://github.com/astral-sh/ruff/issues/11422
66 |   T = TypeVar("T")
67 | / PositiveList = TypeAliasType(
68 | |     "PositiveList", list[Annotated[T, Gt(0)]], type_params=(T,)
69 | | )
   | |_^ UP040
70 |
71 |   # Bound
   |
   = help: Use the `type` keyword

ℹ Safe fix
64 64 | 
65 65 | # https://github.com/astral-sh/ruff/issues/11422
66 66 | T = TypeVar("T")
67    |-PositiveList = TypeAliasType(
68    |-    "PositiveList", list[Annotated[T, Gt(0)]], type_params=(T,)
69    |-)
   67 |+type PositiveList[T] = list[Annotated[T, Gt(0)]]
70 68 | 
71 69 | # Bound
72 70 | T = TypeVar("T", bound=SupportGt)

UP040.py:73:1: UP040 [*] Type alias `PositiveList` uses `TypeAliasType` assignment instead of the `type` keyword
   |
71 |   # Bound
72 |   T = TypeVar("T", bound=SupportGt)
73 | / PositiveList = TypeAliasType(
74 | |     "PositiveList", list[Annotated[T, Gt(0)]], type_params=(T,)
75 | | )
   | |_^ UP040
76 |
77 |   # Multiple bounds
   |
   = help: Use the `type` keyword

ℹ Safe fix
70 70 | 
71 71 | # Bound
72 72 | T = TypeVar("T", bound=SupportGt)
73    |-PositiveList = TypeAliasType(
74    |-    "PositiveList", list[Annotated[T, Gt(0)]], type_params=(T,)
75    |-)
   73 |+type PositiveList[T: SupportGt] = list[Annotated[T, Gt(0)]]
76 74 | 
77 75 | # Multiple bounds
78 76 | T1 = TypeVar("T1", bound=SupportGt)

UP040.py:81:1: UP040 [*] Type alias `Tuple3` uses `TypeAliasType` assignment instead of the `type` keyword
   |
79 | T2 = TypeVar("T2")
80 | T3 = TypeVar("T3")
81 | Tuple3 = TypeAliasType("Tuple3", tuple[T1, T2, T3], type_params=(T1, T2, T3))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
82 |
83 | # No type_params
   |
   = help: Use the `type` keyword

ℹ Safe fix
78 78 | T1 = TypeVar("T1", bound=SupportGt)
79 79 | T2 = TypeVar("T2")
80 80 | T3 = TypeVar("T3")
81    |-Tuple3 = TypeAliasType("Tuple3", tuple[T1, T2, T3], type_params=(T1, T2, T3))
   81 |+type Tuple3[T1: SupportGt, T2, T3] = tuple[T1, T2, T3]
82 82 | 
83 83 | # No type_params
84 84 | PositiveInt = TypeAliasType("PositiveInt", Annotated[int, Gt(0)])

UP040.py:84:1: UP040 [*] Type alias `PositiveInt` uses `TypeAliasType` assignment instead of the `type` keyword
   |
83 | # No type_params
84 | PositiveInt = TypeAliasType("PositiveInt", Annotated[int, Gt(0)])
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
85 | PositiveInt = TypeAliasType("PositiveInt", Annotated[int, Gt(0)], type_params=())
   |
   = help: Use the `type` keyword

ℹ Safe fix
81 81 | Tuple3 = TypeAliasType("Tuple3", tuple[T1, T2, T3], type_params=(T1, T2, T3))
82 82 | 
83 83 | # No type_params
84    |-PositiveInt = TypeAliasType("PositiveInt", Annotated[int, Gt(0)])
   84 |+type PositiveInt = Annotated[int, Gt(0)]
85 85 | PositiveInt = TypeAliasType("PositiveInt", Annotated[int, Gt(0)], type_params=())
86 86 | 
87 87 | # OK: Other name

UP040.py:85:1: UP040 [*] Type alias `PositiveInt` uses `TypeAliasType` assignment instead of the `type` keyword
   |
83 | # No type_params
84 | PositiveInt = TypeAliasType("PositiveInt", Annotated[int, Gt(0)])
85 | PositiveInt = TypeAliasType("PositiveInt", Annotated[int, Gt(0)], type_params=())
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP040
86 |
87 | # OK: Other name
   |
   = help: Use the `type` keyword

ℹ Safe fix
82 82 | 
83 83 | # No type_params
84 84 | PositiveInt = TypeAliasType("PositiveInt", Annotated[int, Gt(0)])
85    |-PositiveInt = TypeAliasType("PositiveInt", Annotated[int, Gt(0)], type_params=())
   85 |+type PositiveInt = Annotated[int, Gt(0)]
86 86 | 
87 87 | # OK: Other name
88 88 | T = TypeVar("T", bound=SupportGt)

UP040.py:99:1: UP040 [*] Type alias `PositiveList` uses `TypeAliasType` assignment instead of the `type` keyword
    |
 97 |   # unsafe fix if comments within the fix
 98 |   T = TypeVar("T")
 99 | / PositiveList = TypeAliasType(  # eaten comment
100 | |     "PositiveList", list[Annotated[T, Gt(0)]], type_params=(T,)
101 | | )
    | |_^ UP040
102 |
103 |   T = TypeVar("T")
    |
    = help: Use the `type` keyword

ℹ Unsafe fix
96  96  | 
97  97  | # unsafe fix if comments within the fix
98  98  | T = TypeVar("T")
99      |-PositiveList = TypeAliasType(  # eaten comment
100     |-    "PositiveList", list[Annotated[T, Gt(0)]], type_params=(T,)
101     |-)
    99  |+type PositiveList[T] = list[Annotated[T, Gt(0)]]
102 100 | 
103 101 | T = TypeVar("T")
104 102 | PositiveList = TypeAliasType(

UP040.py:104:1: UP040 [*] Type alias `PositiveList` uses `TypeAliasType` assignment instead of the `type` keyword
    |
103 |   T = TypeVar("T")
104 | / PositiveList = TypeAliasType(
105 | |     "PositiveList", list[Annotated[T, Gt(0)]], type_params=(T,)
106 | | ) # this comment should be okay
    | |_^ UP040
    |
    = help: Use the `type` keyword

ℹ Safe fix
101 101 | )
102 102 | 
103 103 | T = TypeVar("T")
104     |-PositiveList = TypeAliasType(
105     |-    "PositiveList", list[Annotated[T, Gt(0)]], type_params=(T,)
106     |-) # this comment should be okay
    104 |+type PositiveList[T] = list[Annotated[T, Gt(0)]] # this comment should be okay
107 105 | 
108 106 | 
109 107 | # this comment will actually be preserved because it's inside the "value" part

UP040.py:111:1: UP040 [*] Type alias `PositiveList` uses `TypeAliasType` assignment instead of the `type` keyword
    |
109 |   # this comment will actually be preserved because it's inside the "value" part
110 |   T = TypeVar("T")
111 | / PositiveList = TypeAliasType(
112 | |     "PositiveList", list[
113 | |         Annotated[T, Gt(0)],  # preserved comment
114 | |     ], type_params=(T,)
115 | | )
    | |_^ UP040
116 |
117 |   T: TypeAlias = (
    |
    = help: Use the `type` keyword

ℹ Safe fix
108 108 | 
109 109 | # this comment will actually be preserved because it's inside the "value" part
110 110 | T = TypeVar("T")
111     |-PositiveList = TypeAliasType(
112     |-    "PositiveList", list[
    111 |+type PositiveList[T] = list[
113 112 |         Annotated[T, Gt(0)],  # preserved comment
114     |-    ], type_params=(T,)
115     |-)
    113 |+    ]
116 114 | 
117 115 | T: TypeAlias = (
118 116 |     int

UP040.py:117:1: UP040 [*] Type alias `T` uses `TypeAlias` annotation instead of the `type` keyword
    |
115 |   )
116 |
117 | / T: TypeAlias = (
118 | |     int
119 | |     | str
120 | | )
    | |_^ UP040
121 |
122 |   T: TypeAlias = ( # comment0
    |
    = help: Use the `type` keyword

ℹ Unsafe fix
114 114 |     ], type_params=(T,)
115 115 | )
116 116 | 
117     |-T: TypeAlias = (
    117 |+type T = (
118 118 |     int
119 119 |     | str
120 120 | )

UP040.py:122:1: UP040 [*] Type alias `T` uses `TypeAlias` annotation instead of the `type` keyword
    |
120 |   )
121 |
122 | / T: TypeAlias = ( # comment0
123 | |     # comment1
124 | |     int  # comment2
125 | |     # comment3
126 | |     | # comment4
127 | |     # comment5
128 | |     str  # comment6
129 | |     # comment7
130 | | ) # comment8
    | |_^ UP040
    |
    = help: Use the `type` keyword

ℹ Unsafe fix
119 119 |     | str
120 120 | )
121 121 | 
122     |-T: TypeAlias = ( # comment0
    122 |+type T = ( # comment0
123 123 |     # comment1
124 124 |     int  # comment2
125 125 |     # comment3

---
source: crates/ruff_linter/src/rules/pyupgrade/mod.rs
---
UP045 [*] Use `X | None` for type annotations
 --> UP045.py:5:10
  |
5 | def f(x: Optional[str]) -> None:
  |          ^^^^^^^^^^^^^
6 |     ...
  |
help: Convert to `X | None`
2 | from typing import Optional
3 | 
4 | 
  - def f(x: Optional[str]) -> None:
5 + def f(x: str | None) -> None:
6 |     ...
7 | 
8 | 

UP045 [*] Use `X | None` for type annotations
  --> UP045.py:9:10
   |
 9 | def f(x: typing.Optional[str]) -> None:
   |          ^^^^^^^^^^^^^^^^^^^^
10 |     ...
   |
help: Convert to `X | None`
6  |     ...
7  | 
8  | 
   - def f(x: typing.Optional[str]) -> None:
9  + def f(x: str | None) -> None:
10 |     ...
11 | 
12 | 

UP045 [*] Use `X | None` for type annotations
  --> UP045.py:14:8
   |
13 | def f() -> None:
14 |     x: Optional[str]
   |        ^^^^^^^^^^^^^
15 |     x = Optional[str]
   |
help: Convert to `X | None`
11 | 
12 | 
13 | def f() -> None:
   -     x: Optional[str]
14 +     x: str | None
15 |     x = Optional[str]
16 | 
17 | 

UP045 Use `X | None` for type annotations
  --> UP045.py:15:9
   |
13 | def f() -> None:
14 |     x: Optional[str]
15 |     x = Optional[str]
   |         ^^^^^^^^^^^^^
   |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
  --> UP045.py:18:15
   |
18 | def f(x: list[Optional[int]]) -> None:
   |               ^^^^^^^^^^^^^
19 |     ...
   |
help: Convert to `X | None`
15 |     x = Optional[str]
16 | 
17 | 
   - def f(x: list[Optional[int]]) -> None:
18 + def f(x: list[int | None]) -> None:
19 |     ...
20 | 
21 | 

UP045 Use `X | None` for type annotations
  --> UP045.py:22:10
   |
22 | def f(x: Optional[int : float]) -> None:
   |          ^^^^^^^^^^^^^^^^^^^^^
23 |     ...
   |
help: Convert to `X | None`

UP045 Use `X | None` for type annotations
  --> UP045.py:26:10
   |
26 | def f(x: Optional[str, int : float]) -> None:
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^
27 |     ...
   |
help: Convert to `X | None`

UP045 Use `X | None` for type annotations
  --> UP045.py:30:10
   |
30 | def f(x: Optional[int, float]) -> None:
   |          ^^^^^^^^^^^^^^^^^^^^
31 |     ...
   |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
  --> UP045.py:36:28
   |
34 |   # Regression test for: https://github.com/astral-sh/ruff/issues/7131
35 |   class ServiceRefOrValue:
36 |       service_specification: Optional[
   |  ____________________________^
37 | |         list[ServiceSpecificationRef]
38 | |         | list[ServiceSpecification]
39 | |     ] = None
   | |_____^
   |
help: Convert to `X | None`
33 | 
34 | # Regression test for: https://github.com/astral-sh/ruff/issues/7131
35 | class ServiceRefOrValue:
   -     service_specification: Optional[
   -         list[ServiceSpecificationRef]
   -         | list[ServiceSpecification]
   -     ] = None
36 +     service_specification: list[ServiceSpecificationRef] | list[ServiceSpecification] | None = None
37 | 
38 | 
39 | # Regression test for: https://github.com/astral-sh/ruff/issues/7201

UP045 [*] Use `X | None` for type annotations
  --> UP045.py:44:28
   |
42 | # Regression test for: https://github.com/astral-sh/ruff/issues/7201
43 | class ServiceRefOrValue:
44 |     service_specification: Optional[str]is not True = None
   |                            ^^^^^^^^^^^^^
   |
help: Convert to `X | None`
41 | 
42 | # Regression test for: https://github.com/astral-sh/ruff/issues/7201
43 | class ServiceRefOrValue:
   -     service_specification: Optional[str]is not True = None
44 +     service_specification: str | None is not True = None
45 | 
46 | 
47 | # Test for: https://github.com/astral-sh/ruff/issues/18508

UP045 Use `X | None` for type annotations
  --> UP045.py:49:6
   |
47 | # Test for: https://github.com/astral-sh/ruff/issues/18508
48 | # Optional[None] should not be offered a fix
49 | foo: Optional[None] = None
   |      ^^^^^^^^^^^^^^
   |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
  --> UP045.py:76:18
   |
74 | # Test for: https://github.com/astral-sh/ruff/issues/19746
75 | # Nested Optional types should be flattened
76 | nested_optional: Optional[Optional[str]] = None
   |                  ^^^^^^^^^^^^^^^^^^^^^^^
77 | nested_optional_typing: typing.Optional[Optional[int]] = None
78 | triple_nested_optional: Optional[Optional[Optional[str]]] = None
   |
help: Convert to `X | None`
73 | 
74 | # Test for: https://github.com/astral-sh/ruff/issues/19746
75 | # Nested Optional types should be flattened
   - nested_optional: Optional[Optional[str]] = None
76 + nested_optional: str | None = None
77 | nested_optional_typing: typing.Optional[Optional[int]] = None
78 | triple_nested_optional: Optional[Optional[Optional[str]]] = None

UP045 [*] Use `X | None` for type annotations
  --> UP045.py:76:27
   |
74 | # Test for: https://github.com/astral-sh/ruff/issues/19746
75 | # Nested Optional types should be flattened
76 | nested_optional: Optional[Optional[str]] = None
   |                           ^^^^^^^^^^^^^
77 | nested_optional_typing: typing.Optional[Optional[int]] = None
78 | triple_nested_optional: Optional[Optional[Optional[str]]] = None
   |
help: Convert to `X | None`
73 | 
74 | # Test for: https://github.com/astral-sh/ruff/issues/19746
75 | # Nested Optional types should be flattened
   - nested_optional: Optional[Optional[str]] = None
76 + nested_optional: Optional[str | None] = None
77 | nested_optional_typing: typing.Optional[Optional[int]] = None
78 | triple_nested_optional: Optional[Optional[Optional[str]]] = None

UP045 [*] Use `X | None` for type annotations
  --> UP045.py:77:25
   |
75 | # Nested Optional types should be flattened
76 | nested_optional: Optional[Optional[str]] = None
77 | nested_optional_typing: typing.Optional[Optional[int]] = None
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
78 | triple_nested_optional: Optional[Optional[Optional[str]]] = None
   |
help: Convert to `X | None`
74 | # Test for: https://github.com/astral-sh/ruff/issues/19746
75 | # Nested Optional types should be flattened
76 | nested_optional: Optional[Optional[str]] = None
   - nested_optional_typing: typing.Optional[Optional[int]] = None
77 + nested_optional_typing: int | None = None
78 | triple_nested_optional: Optional[Optional[Optional[str]]] = None

UP045 [*] Use `X | None` for type annotations
  --> UP045.py:77:41
   |
75 | # Nested Optional types should be flattened
76 | nested_optional: Optional[Optional[str]] = None
77 | nested_optional_typing: typing.Optional[Optional[int]] = None
   |                                         ^^^^^^^^^^^^^
78 | triple_nested_optional: Optional[Optional[Optional[str]]] = None
   |
help: Convert to `X | None`
74 | # Test for: https://github.com/astral-sh/ruff/issues/19746
75 | # Nested Optional types should be flattened
76 | nested_optional: Optional[Optional[str]] = None
   - nested_optional_typing: typing.Optional[Optional[int]] = None
77 + nested_optional_typing: typing.Optional[int | None] = None
78 | triple_nested_optional: Optional[Optional[Optional[str]]] = None

UP045 [*] Use `X | None` for type annotations
  --> UP045.py:78:25
   |
76 | nested_optional: Optional[Optional[str]] = None
77 | nested_optional_typing: typing.Optional[Optional[int]] = None
78 | triple_nested_optional: Optional[Optional[Optional[str]]] = None
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Convert to `X | None`
75 | # Nested Optional types should be flattened
76 | nested_optional: Optional[Optional[str]] = None
77 | nested_optional_typing: typing.Optional[Optional[int]] = None
   - triple_nested_optional: Optional[Optional[Optional[str]]] = None
78 + triple_nested_optional: str | None = None

UP045 [*] Use `X | None` for type annotations
  --> UP045.py:78:34
   |
76 | nested_optional: Optional[Optional[str]] = None
77 | nested_optional_typing: typing.Optional[Optional[int]] = None
78 | triple_nested_optional: Optional[Optional[Optional[str]]] = None
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Convert to `X | None`
75 | # Nested Optional types should be flattened
76 | nested_optional: Optional[Optional[str]] = None
77 | nested_optional_typing: typing.Optional[Optional[int]] = None
   - triple_nested_optional: Optional[Optional[Optional[str]]] = None
78 + triple_nested_optional: Optional[str | None] = None

UP045 [*] Use `X | None` for type annotations
  --> UP045.py:78:43
   |
76 | nested_optional: Optional[Optional[str]] = None
77 | nested_optional_typing: typing.Optional[Optional[int]] = None
78 | triple_nested_optional: Optional[Optional[Optional[str]]] = None
   |                                           ^^^^^^^^^^^^^
   |
help: Convert to `X | None`
75 | # Nested Optional types should be flattened
76 | nested_optional: Optional[Optional[str]] = None
77 | nested_optional_typing: typing.Optional[Optional[int]] = None
   - triple_nested_optional: Optional[Optional[Optional[str]]] = None
78 + triple_nested_optional: Optional[Optional[str | None]] = None

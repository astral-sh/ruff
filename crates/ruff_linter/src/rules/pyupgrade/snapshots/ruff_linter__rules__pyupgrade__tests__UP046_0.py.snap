---
source: crates/ruff_linter/src/rules/pyupgrade/mod.rs
snapshot_kind: text
---
UP046_0.py:11:9: UP046 [*] Generic class `A` uses `Generic` subclass instead of type parameters
   |
11 | class A(Generic[T]):
   |         ^^^^^^^^^^ UP046
12 |     # Comments in a class body are preserved
13 |     var: T
   |
   = help: Use type parameters

ℹ Unsafe fix
8  8  | P = ParamSpec("P")
9  9  | 
10 10 | 
11    |-class A(Generic[T]):
   11 |+class A[T: float]:
12 12 |     # Comments in a class body are preserved
13 13 |     var: T
14 14 | 

UP046_0.py:16:9: UP046 [*] Generic class `B` uses `Generic` subclass instead of type parameters
   |
16 | class B(Generic[*Ts]):
   |         ^^^^^^^^^^^^ UP046
17 |     var: tuple[*Ts]
   |
   = help: Use type parameters

ℹ Unsafe fix
13 13 |     var: T
14 14 | 
15 15 | 
16    |-class B(Generic[*Ts]):
   16 |+class B[*Ts]:
17 17 |     var: tuple[*Ts]
18 18 | 
19 19 | 

UP046_0.py:20:9: UP046 [*] Generic class `C` uses `Generic` subclass instead of type parameters
   |
20 | class C(Generic[P]):
   |         ^^^^^^^^^^ UP046
21 |     var: P
   |
   = help: Use type parameters

ℹ Unsafe fix
17 17 |     var: tuple[*Ts]
18 18 | 
19 19 | 
20    |-class C(Generic[P]):
   20 |+class C[**P]:
21 21 |     var: P
22 22 | 
23 23 | 

UP046_0.py:24:19: UP046 [*] Generic class `Constrained` uses `Generic` subclass instead of type parameters
   |
24 | class Constrained(Generic[S]):
   |                   ^^^^^^^^^^ UP046
25 |     var: S
   |
   = help: Use type parameters

ℹ Unsafe fix
21 21 |     var: P
22 22 | 
23 23 | 
24    |-class Constrained(Generic[S]):
   24 |+class Constrained[S: (str, bytes)]:
25 25 |     var: S
26 26 | 
27 27 | 

UP046_0.py:30:20: UP046 Generic class `ExternalType` uses `Generic` subclass instead of type parameters
   |
28 | # This case gets a diagnostic but not a fix because we can't look up the bounds
29 | # or constraints on the TypeVar imported from another module
30 | class ExternalType(Generic[T, SupportsRichComparisonT]):
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP046
31 |     var: T
32 |     compare: SupportsRichComparisonT
   |
   = help: Use type parameters

UP046_0.py:37:13: UP046 [*] Generic class `MyStr` uses `Generic` subclass instead of type parameters
   |
35 | # typing.AnyStr is a common external type variable, so treat it specially as a
36 | # known TypeVar
37 | class MyStr(Generic[AnyStr]):
   |             ^^^^^^^^^^^^^^^ UP046
38 |     s: AnyStr
   |
   = help: Use type parameters

ℹ Unsafe fix
34 34 | 
35 35 | # typing.AnyStr is a common external type variable, so treat it specially as a
36 36 | # known TypeVar
37    |-class MyStr(Generic[AnyStr]):
   37 |+class MyStr[AnyStr: (bytes, str)]:
38 38 |     s: AnyStr
39 39 | 
40 40 | 

UP046_0.py:41:24: UP046 [*] Generic class `MultipleGenerics` uses `Generic` subclass instead of type parameters
   |
41 | class MultipleGenerics(Generic[S, T, *Ts, P]):
   |                        ^^^^^^^^^^^^^^^^^^^^^ UP046
42 |     var: S
43 |     typ: T
   |
   = help: Use type parameters

ℹ Unsafe fix
38 38 |     s: AnyStr
39 39 | 
40 40 | 
41    |-class MultipleGenerics(Generic[S, T, *Ts, P]):
   41 |+class MultipleGenerics[S: (str, bytes), T: float, *Ts, **P]:
42 42 |     var: S
43 43 |     typ: T
44 44 |     tup: tuple[*Ts]

UP046_0.py:48:33: UP046 [*] Generic class `MultipleBaseClasses` uses `Generic` subclass instead of type parameters
   |
48 | class MultipleBaseClasses(list, Generic[T]):
   |                                 ^^^^^^^^^^ UP046
49 |     var: T
   |
   = help: Use type parameters

ℹ Unsafe fix
45 45 |     pep: P
46 46 | 
47 47 | 
48    |-class MultipleBaseClasses(list, Generic[T]):
   48 |+class MultipleBaseClasses[T: float](list):
49 49 |     var: T
50 50 | 
51 51 | 

UP046_0.py:62:44: UP046 [*] Generic class `MoreBaseClasses` uses `Generic` subclass instead of type parameters
   |
62 | class MoreBaseClasses(Base1, Base2, Base3, Generic[T]):
   |                                            ^^^^^^^^^^ UP046
63 |     var: T
   |
   = help: Use type parameters

ℹ Unsafe fix
59 59 | class Base3: ...
60 60 | 
61 61 | 
62    |-class MoreBaseClasses(Base1, Base2, Base3, Generic[T]):
   62 |+class MoreBaseClasses[T: float](Base1, Base2, Base3):
63 63 |     var: T
64 64 | 
65 65 | 

UP046_0.py:66:52: UP046 [*] Generic class `MultipleBaseAndGenerics` uses `Generic` subclass instead of type parameters
   |
66 | class MultipleBaseAndGenerics(Base1, Base2, Base3, Generic[S, T, *Ts, P]):
   |                                                    ^^^^^^^^^^^^^^^^^^^^^ UP046
67 |     var: S
68 |     typ: T
   |
   = help: Use type parameters

ℹ Unsafe fix
63 63 |     var: T
64 64 | 
65 65 | 
66    |-class MultipleBaseAndGenerics(Base1, Base2, Base3, Generic[S, T, *Ts, P]):
   66 |+class MultipleBaseAndGenerics[S: (str, bytes), T: float, *Ts, **P](Base1, Base2, Base3):
67 67 |     var: S
68 68 |     typ: T
69 69 |     tup: tuple[*Ts]

UP046_0.py:73:9: UP046 [*] Generic class `A` uses `Generic` subclass instead of type parameters
   |
73 | class A(Generic[T]): ...
   |         ^^^^^^^^^^ UP046
   |
   = help: Use type parameters

ℹ Unsafe fix
70 70 |     pep: P
71 71 | 
72 72 | 
73    |-class A(Generic[T]): ...
   73 |+class A[T: float]: ...
74 74 | 
75 75 | 
76 76 | class B(A[S], Generic[S]):

UP046_0.py:76:15: UP046 [*] Generic class `B` uses `Generic` subclass instead of type parameters
   |
76 | class B(A[S], Generic[S]):
   |               ^^^^^^^^^^ UP046
77 |     var: S
   |
   = help: Use type parameters

ℹ Unsafe fix
73 73 | class A(Generic[T]): ...
74 74 | 
75 75 | 
76    |-class B(A[S], Generic[S]):
   76 |+class B[S: (str, bytes)](A[S]):
77 77 |     var: S
78 78 | 
79 79 | 

UP046_0.py:80:15: UP046 [*] Generic class `C` uses `Generic` subclass instead of type parameters
   |
80 | class C(A[S], Generic[S, T]):
   |               ^^^^^^^^^^^^^ UP046
81 |     var: tuple[S, T]
   |
   = help: Use type parameters

ℹ Unsafe fix
77 77 |     var: S
78 78 | 
79 79 | 
80    |-class C(A[S], Generic[S, T]):
   80 |+class C[S: (str, bytes), T: float](A[S]):
81 81 |     var: tuple[S, T]
82 82 | 
83 83 | 

UP046_0.py:84:17: UP046 [*] Generic class `D` uses `Generic` subclass instead of type parameters
   |
84 | class D(A[int], Generic[T]):
   |                 ^^^^^^^^^^ UP046
85 |     var: T
   |
   = help: Use type parameters

ℹ Unsafe fix
81 81 |     var: tuple[S, T]
82 82 | 
83 83 | 
84    |-class D(A[int], Generic[T]):
   84 |+class D[T: float](A[int]):
85 85 |     var: T
86 86 | 
87 87 | 

UP046_0.py:88:15: UP046 Generic class `NotLast` uses `Generic` subclass instead of type parameters
   |
88 | class NotLast(Generic[T], Base1):
   |               ^^^^^^^^^^ UP046
89 |     var: T
   |
   = help: Use type parameters

UP046_0.py:92:23: UP046 Generic class `Sandwich` uses `Generic` subclass instead of type parameters
   |
92 | class Sandwich(Base1, Generic[T], Base2):
   |                       ^^^^^^^^^^ UP046
93 |     var: T
   |
   = help: Use type parameters

UP046_0.py:98:23: UP046 Generic class `TooManyGenerics` uses `Generic` subclass instead of type parameters
    |
 96 | # runtime `TypeError` to inherit from `Generic` multiple times, but we still
 97 | # emit a diagnostic
 98 | class TooManyGenerics(Generic[T], Generic[S]):
    |                       ^^^^^^^^^^ UP046
 99 |     var: T
100 |     var: S
    |
    = help: Use type parameters

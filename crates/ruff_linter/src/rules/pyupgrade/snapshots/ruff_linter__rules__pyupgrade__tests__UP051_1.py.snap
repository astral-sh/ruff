---
source: crates/ruff_linter/src/rules/pyupgrade/mod.rs
---
UP051_1.py:2:11: UP051 [*] Generic class uses private type parameters
  |
1 | # bound
2 | class Foo[_T: str]:
  |           ^^ UP051
3 |     var: _T
  |
  = help: Remove the leading underscores

ℹ Safe fix
1 1 | # bound
2   |-class Foo[_T: str]:
3   |-    var: _T
  2 |+class Foo[T: str]:
  3 |+    var: T
4 4 | 
5 5 | 
6 6 | # constraint

UP051_1.py:7:11: UP051 [*] Generic class uses private type parameters
  |
6 | # constraint
7 | class Foo[_T: (str, bytes)]:
  |           ^^ UP051
8 |     var: _T
  |
  = help: Remove the leading underscores

ℹ Safe fix
4 4 | 
5 5 | 
6 6 | # constraint
7   |-class Foo[_T: (str, bytes)]:
8   |-    var: _T
  7 |+class Foo[T: (str, bytes)]:
  8 |+    var: T
9 9 | 
10 10 | 
11 11 | # python 3.13+ default

UP051_1.py:12:11: UP051 [*] Generic class uses private type parameters
   |
11 | # python 3.13+ default
12 | class Foo[_T = int]:
   |           ^^ UP051
13 |     var: _T
   |
   = help: Remove the leading underscores

ℹ Safe fix
9  9  | 
10 10 | 
11 11 | # python 3.13+ default
12    |-class Foo[_T = int]:
13    |-    var: _T
   12 |+class Foo[T = int]:
   13 |+    var: T
14 14 | 
15 15 | 
16 16 | # tuple

UP051_1.py:17:12: UP051 [*] Generic class uses private type parameters
   |
16 | # tuple
17 | class Foo[*_Ts]:
   |            ^^^ UP051
18 |     var: tuple[*_Ts]
   |
   = help: Remove the leading underscores

ℹ Safe fix
14 14 | 
15 15 | 
16 16 | # tuple
17    |-class Foo[*_Ts]:
18    |-    var: tuple[*_Ts]
   17 |+class Foo[*Ts]:
   18 |+    var: tuple[*Ts]
19 19 | 
20 20 | 
21 21 | # paramspec

UP051_1.py:22:11: UP051 [*] Generic class uses private type parameters
   |
21 | # paramspec
22 | class C[**_P]:
   |           ^^ UP051
23 |     var: _P
   |
   = help: Remove the leading underscores

ℹ Safe fix
19 19 | 
20 20 | 
21 21 | # paramspec
22    |-class C[**_P]:
23    |-    var: _P
   22 |+class C[**P]:
   23 |+    var: P
24 24 | 
25 25 | 
26 26 | from typing import Callable

UP051_1.py:31:18: UP051 [*] Generic class uses private type parameters
   |
29 | # each of these will get a separate diagnostic, but at least they'll all get
30 | # fixed
31 | class Everything[_T, _U: str, _V: (int, float), *_W, **_X]:
   |                  ^^ UP051
32 |     @staticmethod
33 |     def transform(t: _T, u: _U, v: _V) -> tuple[*_W] | Callable[_X, _T] | None:
   |
   = help: Remove the leading underscores

ℹ Safe fix
28 28 | 
29 29 | # each of these will get a separate diagnostic, but at least they'll all get
30 30 | # fixed
31    |-class Everything[_T, _U: str, _V: (int, float), *_W, **_X]:
   31 |+class Everything[T, _U: str, _V: (int, float), *_W, **_X]:
32 32 |     @staticmethod
33    |-    def transform(t: _T, u: _U, v: _V) -> tuple[*_W] | Callable[_X, _T] | None:
   33 |+    def transform(t: T, u: _U, v: _V) -> tuple[*_W] | Callable[_X, T] | None:
34 34 |         return None
35 35 | 
36 36 | 

UP051_1.py:31:22: UP051 [*] Generic class uses private type parameters
   |
29 | # each of these will get a separate diagnostic, but at least they'll all get
30 | # fixed
31 | class Everything[_T, _U: str, _V: (int, float), *_W, **_X]:
   |                      ^^ UP051
32 |     @staticmethod
33 |     def transform(t: _T, u: _U, v: _V) -> tuple[*_W] | Callable[_X, _T] | None:
   |
   = help: Remove the leading underscores

ℹ Safe fix
28 28 | 
29 29 | # each of these will get a separate diagnostic, but at least they'll all get
30 30 | # fixed
31    |-class Everything[_T, _U: str, _V: (int, float), *_W, **_X]:
   31 |+class Everything[_T, U: str, _V: (int, float), *_W, **_X]:
32 32 |     @staticmethod
33    |-    def transform(t: _T, u: _U, v: _V) -> tuple[*_W] | Callable[_X, _T] | None:
   33 |+    def transform(t: _T, u: U, v: _V) -> tuple[*_W] | Callable[_X, _T] | None:
34 34 |         return None
35 35 | 
36 36 | 

UP051_1.py:31:31: UP051 [*] Generic class uses private type parameters
   |
29 | # each of these will get a separate diagnostic, but at least they'll all get
30 | # fixed
31 | class Everything[_T, _U: str, _V: (int, float), *_W, **_X]:
   |                               ^^ UP051
32 |     @staticmethod
33 |     def transform(t: _T, u: _U, v: _V) -> tuple[*_W] | Callable[_X, _T] | None:
   |
   = help: Remove the leading underscores

ℹ Safe fix
28 28 | 
29 29 | # each of these will get a separate diagnostic, but at least they'll all get
30 30 | # fixed
31    |-class Everything[_T, _U: str, _V: (int, float), *_W, **_X]:
   31 |+class Everything[_T, _U: str, V: (int, float), *_W, **_X]:
32 32 |     @staticmethod
33    |-    def transform(t: _T, u: _U, v: _V) -> tuple[*_W] | Callable[_X, _T] | None:
   33 |+    def transform(t: _T, u: _U, v: V) -> tuple[*_W] | Callable[_X, _T] | None:
34 34 |         return None
35 35 | 
36 36 | 

UP051_1.py:31:50: UP051 [*] Generic class uses private type parameters
   |
29 | # each of these will get a separate diagnostic, but at least they'll all get
30 | # fixed
31 | class Everything[_T, _U: str, _V: (int, float), *_W, **_X]:
   |                                                  ^^ UP051
32 |     @staticmethod
33 |     def transform(t: _T, u: _U, v: _V) -> tuple[*_W] | Callable[_X, _T] | None:
   |
   = help: Remove the leading underscores

ℹ Safe fix
28 28 | 
29 29 | # each of these will get a separate diagnostic, but at least they'll all get
30 30 | # fixed
31    |-class Everything[_T, _U: str, _V: (int, float), *_W, **_X]:
   31 |+class Everything[_T, _U: str, _V: (int, float), *W, **_X]:
32 32 |     @staticmethod
33    |-    def transform(t: _T, u: _U, v: _V) -> tuple[*_W] | Callable[_X, _T] | None:
   33 |+    def transform(t: _T, u: _U, v: _V) -> tuple[*W] | Callable[_X, _T] | None:
34 34 |         return None
35 35 | 
36 36 | 

UP051_1.py:31:56: UP051 [*] Generic class uses private type parameters
   |
29 | # each of these will get a separate diagnostic, but at least they'll all get
30 | # fixed
31 | class Everything[_T, _U: str, _V: (int, float), *_W, **_X]:
   |                                                        ^^ UP051
32 |     @staticmethod
33 |     def transform(t: _T, u: _U, v: _V) -> tuple[*_W] | Callable[_X, _T] | None:
   |
   = help: Remove the leading underscores

ℹ Safe fix
28 28 | 
29 29 | # each of these will get a separate diagnostic, but at least they'll all get
30 30 | # fixed
31    |-class Everything[_T, _U: str, _V: (int, float), *_W, **_X]:
   31 |+class Everything[_T, _U: str, _V: (int, float), *_W, **X]:
32 32 |     @staticmethod
33    |-    def transform(t: _T, u: _U, v: _V) -> tuple[*_W] | Callable[_X, _T] | None:
   33 |+    def transform(t: _T, u: _U, v: _V) -> tuple[*_W] | Callable[X, _T] | None:
34 34 |         return None
35 35 | 
36 36 |

---
source: crates/ruff_linter/src/rules/pydocstyle/mod.rs
---
D300 [*] Use triple double quotes `"""`
   --> D.py:307:5
    |
305 | @expect('D300: Use """triple double quotes""" (found \'\'\'-quotes)')
306 | def triple_single_quotes_raw():
307 |     r'''Summary.'''
    |     ^^^^^^^^^^^^^^^
    |
help: Convert to triple double quotes
304 | 
305 | @expect('D300: Use """triple double quotes""" (found \'\'\'-quotes)')
306 | def triple_single_quotes_raw():
    -     r'''Summary.'''
307 +     r"""Summary."""
308 | 
309 | 
310 | @expect('D300: Use """triple double quotes""" (found \'\'\'-quotes)')

D300 [*] Use triple double quotes `"""`
   --> D.py:312:5
    |
310 | @expect('D300: Use """triple double quotes""" (found \'\'\'-quotes)')
311 | def triple_single_quotes_raw_uppercase():
312 |     R'''Summary.'''
    |     ^^^^^^^^^^^^^^^
    |
help: Convert to triple double quotes
309 | 
310 | @expect('D300: Use """triple double quotes""" (found \'\'\'-quotes)')
311 | def triple_single_quotes_raw_uppercase():
    -     R'''Summary.'''
312 +     R"""Summary."""
313 | 
314 | 
315 | @expect('D300: Use """triple double quotes""" (found \'-quotes)')

D300 [*] Use triple double quotes `"""`
   --> D.py:317:5
    |
315 | @expect('D300: Use """triple double quotes""" (found \'-quotes)')
316 | def single_quotes_raw():
317 |     r'Summary.'
    |     ^^^^^^^^^^^
    |
help: Convert to triple double quotes
314 | 
315 | @expect('D300: Use """triple double quotes""" (found \'-quotes)')
316 | def single_quotes_raw():
    -     r'Summary.'
317 +     r"""Summary."""
318 | 
319 | 
320 | @expect('D300: Use """triple double quotes""" (found \'-quotes)')

D300 [*] Use triple double quotes `"""`
   --> D.py:322:5
    |
320 | @expect('D300: Use """triple double quotes""" (found \'-quotes)')
321 | def single_quotes_raw_uppercase():
322 |     R'Summary.'
    |     ^^^^^^^^^^^
    |
help: Convert to triple double quotes
319 | 
320 | @expect('D300: Use """triple double quotes""" (found \'-quotes)')
321 | def single_quotes_raw_uppercase():
    -     R'Summary.'
322 +     R"""Summary."""
323 | 
324 | 
325 | @expect('D300: Use """triple double quotes""" (found \'-quotes)')

D300 [*] Use triple double quotes `"""`
   --> D.py:328:5
    |
326 | @expect('D301: Use r""" if any backslashes in a docstring')
327 | def single_quotes_raw_uppercase_backslash():
328 |     R'Sum\mary.'
    |     ^^^^^^^^^^^^
    |
help: Convert to triple double quotes
325 | @expect('D300: Use """triple double quotes""" (found \'-quotes)')
326 | @expect('D301: Use r""" if any backslashes in a docstring')
327 | def single_quotes_raw_uppercase_backslash():
    -     R'Sum\mary.'
328 +     R"""Sum\mary."""
329 | 
330 | 
331 | @expect('D301: Use r""" if any backslashes in a docstring')

D300 [*] Use triple double quotes `"""`
   --> D.py:645:5
    |
644 |   def single_line_docstring_with_an_escaped_backslash():
645 | /     "\
646 | |     "
    | |_____^
647 |
648 |   class StatementOnSameLineAsDocstring:
    |
help: Convert to triple double quotes
642 | 
643 | 
644 | def single_line_docstring_with_an_escaped_backslash():
    -     "\
    -     "
645 +     """\
646 +     """
647 | 
648 | class StatementOnSameLineAsDocstring:
649 |     "After this docstring there's another statement on the same line separated by a semicolon." ; priorities=1

D300 [*] Use triple double quotes `"""`
   --> D.py:649:5
    |
648 | class StatementOnSameLineAsDocstring:
649 |     "After this docstring there's another statement on the same line separated by a semicolon." ; priorities=1
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
650 |     def sort_services(self):
651 |         pass
    |
help: Convert to triple double quotes
646 |     "
647 | 
648 | class StatementOnSameLineAsDocstring:
    -     "After this docstring there's another statement on the same line separated by a semicolon." ; priorities=1
649 +     """After this docstring there's another statement on the same line separated by a semicolon.""" ; priorities=1
650 |     def sort_services(self):
651 |         pass
652 | 

D300 [*] Use triple double quotes `"""`
   --> D.py:654:5
    |
653 | class StatementOnSameLineAsDocstring:
654 |     "After this docstring there's another statement on the same line separated by a semicolon."; priorities=1
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Convert to triple double quotes
651 |         pass
652 | 
653 | class StatementOnSameLineAsDocstring:
    -     "After this docstring there's another statement on the same line separated by a semicolon."; priorities=1
654 +     """After this docstring there's another statement on the same line separated by a semicolon."""; priorities=1
655 | 
656 | 
657 | class CommentAfterDocstring:

D300 [*] Use triple double quotes `"""`
   --> D.py:658:5
    |
657 | class CommentAfterDocstring:
658 |     "After this docstring there's a comment."  # priorities=1
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
659 |     def sort_services(self):
660 |         pass
    |
help: Convert to triple double quotes
655 | 
656 | 
657 | class CommentAfterDocstring:
    -     "After this docstring there's a comment."  # priorities=1
658 +     """After this docstring there's a comment."""  # priorities=1
659 |     def sort_services(self):
660 |         pass
661 | 

D300 [*] Use triple double quotes `"""`
   --> D.py:664:5
    |
663 |   def newline_after_closing_quote(self):
664 | /     "We enforce a newline after the closing quote for a multi-line docstring \
665 | |     but continuations shouldn't be considered multi-line"
    | |_________________________________________________________^
    |
help: Convert to triple double quotes
661 | 
662 | 
663 | def newline_after_closing_quote(self):
    -     "We enforce a newline after the closing quote for a multi-line docstring \
    -     but continuations shouldn't be considered multi-line"
664 +     """We enforce a newline after the closing quote for a multi-line docstring \
665 +     but continuations shouldn't be considered multi-line"""
666 | 
667 | 
668 |

---
source: crates/ruff_linter/src/rules/refurb/mod.rs
---
FURB180 [*] Use of `metaclass=abc.ABCMeta` to define abstract base class
 --> FURB180.py:7:10
  |
5 | # Errors
6 |
7 | class A0(metaclass=abc.ABCMeta):
  |          ^^^^^^^^^^^^^^^^^^^^^
8 |     @abstractmethod
9 |     def foo(self): pass
  |
help: Replace with `abc.ABC`
4  | 
5  | # Errors
6  | 
   - class A0(metaclass=abc.ABCMeta):
7  + class A0(abc.ABC):
8  |     @abstractmethod
9  |     def foo(self): pass
10 | 

FURB180 [*] Use of `metaclass=abc.ABCMeta` to define abstract base class
  --> FURB180.py:12:10
   |
12 | class A1(metaclass=ABCMeta):
   |          ^^^^^^^^^^^^^^^^^
13 |     @abstractmethod
14 |     def foo(self): pass
   |
help: Replace with `abc.ABC`
9  |     def foo(self): pass
10 | 
11 | 
   - class A1(metaclass=ABCMeta):
12 + class A1(abc.ABC):
13 |     @abstractmethod
14 |     def foo(self): pass
15 | 

FURB180 [*] Use of `metaclass=abc.ABCMeta` to define abstract base class
  --> FURB180.py:26:18
   |
26 | class A2(B0, B1, metaclass=ABCMeta):
   |                  ^^^^^^^^^^^^^^^^^
27 |     @abstractmethod
28 |     def foo(self): pass
   |
help: Replace with `abc.ABC`
23 |     pass
24 | 
25 | 
   - class A2(B0, B1, metaclass=ABCMeta):
26 + class A2(B0, B1, abc.ABC):
27 |     @abstractmethod
28 |     def foo(self): pass
29 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB180 [*] Use of `metaclass=abc.ABCMeta` to define abstract base class
  --> FURB180.py:31:34
   |
31 | class A3(B0, before_metaclass=1, metaclass=abc.ABCMeta):
   |                                  ^^^^^^^^^^^^^^^^^^^^^
32 |     pass
   |
help: Replace with `abc.ABC`
28 |     def foo(self): pass
29 | 
30 | 
   - class A3(B0, before_metaclass=1, metaclass=abc.ABCMeta):
31 + class A3(B0, abc.ABC, before_metaclass=1):
32 |     pass
33 | 
34 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

---
source: crates/ruff_linter/src/rules/refurb/mod.rs
---
FURB161.py:6:9: FURB161 [*] Use of `bin(x).count('1')`
  |
4 |     return 10
5 | 
6 | count = bin(x).count("1")  # FURB161
  |         ^^^^^^^^^^^^^^^^^ FURB161
7 | count = bin(10).count("1")  # FURB161
8 | count = bin(0b1010).count("1")  # FURB161
  |
  = help: Replace with `(x).bit_count()`

ℹ Safe fix
3 3 | def ten() -> int:
4 4 |     return 10
5 5 | 
6   |-count = bin(x).count("1")  # FURB161
  6 |+count = (x).bit_count()  # FURB161
7 7 | count = bin(10).count("1")  # FURB161
8 8 | count = bin(0b1010).count("1")  # FURB161
9 9 | count = bin(0xA).count("1")  # FURB161

FURB161.py:7:9: FURB161 [*] Use of `bin(10).count('1')`
  |
6 | count = bin(x).count("1")  # FURB161
7 | count = bin(10).count("1")  # FURB161
  |         ^^^^^^^^^^^^^^^^^^ FURB161
8 | count = bin(0b1010).count("1")  # FURB161
9 | count = bin(0xA).count("1")  # FURB161
  |
  = help: Replace with `(10).bit_count()`

ℹ Safe fix
4 4 |     return 10
5 5 | 
6 6 | count = bin(x).count("1")  # FURB161
7   |-count = bin(10).count("1")  # FURB161
  7 |+count = (10).bit_count()  # FURB161
8 8 | count = bin(0b1010).count("1")  # FURB161
9 9 | count = bin(0xA).count("1")  # FURB161
10 10 | count = bin(0o12).count("1")  # FURB161

FURB161.py:8:9: FURB161 [*] Use of `bin(0b1010).count('1')`
   |
 6 | count = bin(x).count("1")  # FURB161
 7 | count = bin(10).count("1")  # FURB161
 8 | count = bin(0b1010).count("1")  # FURB161
   |         ^^^^^^^^^^^^^^^^^^^^^^ FURB161
 9 | count = bin(0xA).count("1")  # FURB161
10 | count = bin(0o12).count("1")  # FURB161
   |
   = help: Replace with `0b1010.bit_count()`

ℹ Safe fix
5 5 | 
6 6 | count = bin(x).count("1")  # FURB161
7 7 | count = bin(10).count("1")  # FURB161
8   |-count = bin(0b1010).count("1")  # FURB161
  8 |+count = 0b1010.bit_count()  # FURB161
9 9 | count = bin(0xA).count("1")  # FURB161
10 10 | count = bin(0o12).count("1")  # FURB161
11 11 | count = bin(0x10 + 0x1000).count("1")  # FURB161

FURB161.py:9:9: FURB161 [*] Use of `bin(0xA).count('1')`
   |
 7 | count = bin(10).count("1")  # FURB161
 8 | count = bin(0b1010).count("1")  # FURB161
 9 | count = bin(0xA).count("1")  # FURB161
   |         ^^^^^^^^^^^^^^^^^^^ FURB161
10 | count = bin(0o12).count("1")  # FURB161
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
   |
   = help: Replace with `0xA.bit_count()`

ℹ Safe fix
6  6  | count = bin(x).count("1")  # FURB161
7  7  | count = bin(10).count("1")  # FURB161
8  8  | count = bin(0b1010).count("1")  # FURB161
9     |-count = bin(0xA).count("1")  # FURB161
   9  |+count = 0xA.bit_count()  # FURB161
10 10 | count = bin(0o12).count("1")  # FURB161
11 11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12 12 | count = bin(ten()).count("1")  # FURB161

FURB161.py:10:9: FURB161 [*] Use of `bin(0o12).count('1')`
   |
 8 | count = bin(0b1010).count("1")  # FURB161
 9 | count = bin(0xA).count("1")  # FURB161
10 | count = bin(0o12).count("1")  # FURB161
   |         ^^^^^^^^^^^^^^^^^^^^ FURB161
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12 | count = bin(ten()).count("1")  # FURB161
   |
   = help: Replace with `0o12.bit_count()`

ℹ Safe fix
7  7  | count = bin(10).count("1")  # FURB161
8  8  | count = bin(0b1010).count("1")  # FURB161
9  9  | count = bin(0xA).count("1")  # FURB161
10    |-count = bin(0o12).count("1")  # FURB161
   10 |+count = 0o12.bit_count()  # FURB161
11 11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12 12 | count = bin(ten()).count("1")  # FURB161
13 13 | count = bin((10)).count("1")  # FURB161

FURB161.py:11:9: FURB161 [*] Use of `bin(0x10 + 0x1000).count('1')`
   |
 9 | count = bin(0xA).count("1")  # FURB161
10 | count = bin(0o12).count("1")  # FURB161
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ FURB161
12 | count = bin(ten()).count("1")  # FURB161
13 | count = bin((10)).count("1")  # FURB161
   |
   = help: Replace with `(0x10 + 0x1000).bit_count()`

ℹ Safe fix
8  8  | count = bin(0b1010).count("1")  # FURB161
9  9  | count = bin(0xA).count("1")  # FURB161
10 10 | count = bin(0o12).count("1")  # FURB161
11    |-count = bin(0x10 + 0x1000).count("1")  # FURB161
   11 |+count = (0x10 + 0x1000).bit_count()  # FURB161
12 12 | count = bin(ten()).count("1")  # FURB161
13 13 | count = bin((10)).count("1")  # FURB161
14 14 | count = bin("10" "15").count("1")  # FURB161

FURB161.py:12:9: FURB161 [*] Use of `bin(ten()).count('1')`
   |
10 | count = bin(0o12).count("1")  # FURB161
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12 | count = bin(ten()).count("1")  # FURB161
   |         ^^^^^^^^^^^^^^^^^^^^^ FURB161
13 | count = bin((10)).count("1")  # FURB161
14 | count = bin("10" "15").count("1")  # FURB161
   |
   = help: Replace with `ten().bit_count()`

ℹ Safe fix
9  9  | count = bin(0xA).count("1")  # FURB161
10 10 | count = bin(0o12).count("1")  # FURB161
11 11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12    |-count = bin(ten()).count("1")  # FURB161
   12 |+count = ten().bit_count()  # FURB161
13 13 | count = bin((10)).count("1")  # FURB161
14 14 | count = bin("10" "15").count("1")  # FURB161
15 15 | 

FURB161.py:13:9: FURB161 [*] Use of `bin(10).count('1')`
   |
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12 | count = bin(ten()).count("1")  # FURB161
13 | count = bin((10)).count("1")  # FURB161
   |         ^^^^^^^^^^^^^^^^^^^^ FURB161
14 | count = bin("10" "15").count("1")  # FURB161
   |
   = help: Replace with `(10).bit_count()`

ℹ Safe fix
10 10 | count = bin(0o12).count("1")  # FURB161
11 11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12 12 | count = bin(ten()).count("1")  # FURB161
13    |-count = bin((10)).count("1")  # FURB161
   13 |+count = (10).bit_count()  # FURB161
14 14 | count = bin("10" "15").count("1")  # FURB161
15 15 | 
16 16 | count = x.bit_count()  # OK

FURB161.py:14:9: FURB161 [*] Use of `bin("10" "15").count('1')`
   |
12 | count = bin(ten()).count("1")  # FURB161
13 | count = bin((10)).count("1")  # FURB161
14 | count = bin("10" "15").count("1")  # FURB161
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ FURB161
15 | 
16 | count = x.bit_count()  # OK
   |
   = help: Replace with `("10" "15").bit_count()`

ℹ Safe fix
11 11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12 12 | count = bin(ten()).count("1")  # FURB161
13 13 | count = bin((10)).count("1")  # FURB161
14    |-count = bin("10" "15").count("1")  # FURB161
   14 |+count = ("10" "15").bit_count()  # FURB161
15 15 | 
16 16 | count = x.bit_count()  # OK
17 17 | count = (10).bit_count()  # OK



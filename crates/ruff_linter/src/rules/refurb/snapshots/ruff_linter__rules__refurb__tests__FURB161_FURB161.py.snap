---
source: crates/ruff_linter/src/rules/refurb/mod.rs
---
FURB161 [*] Use of `bin(x).count('1')`
 --> FURB161.py:6:9
  |
4 |     return 10
5 |
6 | count = bin(x).count("1")  # FURB161
  |         ^^^^^^^^^^^^^^^^^
7 | count = bin(10).count("1")  # FURB161
8 | count = bin(0b1010).count("1")  # FURB161
  |
help: Replace with `(x).bit_count()`
3 | def ten() -> int:
4 |     return 10
5 | 
  - count = bin(x).count("1")  # FURB161
6 + count = (x).bit_count()  # FURB161
7 | count = bin(10).count("1")  # FURB161
8 | count = bin(0b1010).count("1")  # FURB161
9 | count = bin(0xA).count("1")  # FURB161
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB161 [*] Use of `bin(10).count('1')`
 --> FURB161.py:7:9
  |
6 | count = bin(x).count("1")  # FURB161
7 | count = bin(10).count("1")  # FURB161
  |         ^^^^^^^^^^^^^^^^^^
8 | count = bin(0b1010).count("1")  # FURB161
9 | count = bin(0xA).count("1")  # FURB161
  |
help: Replace with `(10).bit_count()`
4  |     return 10
5  | 
6  | count = bin(x).count("1")  # FURB161
   - count = bin(10).count("1")  # FURB161
7  + count = (10).bit_count()  # FURB161
8  | count = bin(0b1010).count("1")  # FURB161
9  | count = bin(0xA).count("1")  # FURB161
10 | count = bin(0o12).count("1")  # FURB161

FURB161 [*] Use of `bin(0b1010).count('1')`
  --> FURB161.py:8:9
   |
 6 | count = bin(x).count("1")  # FURB161
 7 | count = bin(10).count("1")  # FURB161
 8 | count = bin(0b1010).count("1")  # FURB161
   |         ^^^^^^^^^^^^^^^^^^^^^^
 9 | count = bin(0xA).count("1")  # FURB161
10 | count = bin(0o12).count("1")  # FURB161
   |
help: Replace with `0b1010.bit_count()`
5  | 
6  | count = bin(x).count("1")  # FURB161
7  | count = bin(10).count("1")  # FURB161
   - count = bin(0b1010).count("1")  # FURB161
8  + count = 0b1010.bit_count()  # FURB161
9  | count = bin(0xA).count("1")  # FURB161
10 | count = bin(0o12).count("1")  # FURB161
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161

FURB161 [*] Use of `bin(0xA).count('1')`
  --> FURB161.py:9:9
   |
 7 | count = bin(10).count("1")  # FURB161
 8 | count = bin(0b1010).count("1")  # FURB161
 9 | count = bin(0xA).count("1")  # FURB161
   |         ^^^^^^^^^^^^^^^^^^^
10 | count = bin(0o12).count("1")  # FURB161
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
   |
help: Replace with `0xA.bit_count()`
6  | count = bin(x).count("1")  # FURB161
7  | count = bin(10).count("1")  # FURB161
8  | count = bin(0b1010).count("1")  # FURB161
   - count = bin(0xA).count("1")  # FURB161
9  + count = 0xA.bit_count()  # FURB161
10 | count = bin(0o12).count("1")  # FURB161
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12 | count = bin(ten()).count("1")  # FURB161

FURB161 [*] Use of `bin(0o12).count('1')`
  --> FURB161.py:10:9
   |
 8 | count = bin(0b1010).count("1")  # FURB161
 9 | count = bin(0xA).count("1")  # FURB161
10 | count = bin(0o12).count("1")  # FURB161
   |         ^^^^^^^^^^^^^^^^^^^^
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12 | count = bin(ten()).count("1")  # FURB161
   |
help: Replace with `0o12.bit_count()`
7  | count = bin(10).count("1")  # FURB161
8  | count = bin(0b1010).count("1")  # FURB161
9  | count = bin(0xA).count("1")  # FURB161
   - count = bin(0o12).count("1")  # FURB161
10 + count = 0o12.bit_count()  # FURB161
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12 | count = bin(ten()).count("1")  # FURB161
13 | count = bin((10)).count("1")  # FURB161

FURB161 [*] Use of `bin(0x10 + 0x1000).count('1')`
  --> FURB161.py:11:9
   |
 9 | count = bin(0xA).count("1")  # FURB161
10 | count = bin(0o12).count("1")  # FURB161
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 | count = bin(ten()).count("1")  # FURB161
13 | count = bin((10)).count("1")  # FURB161
   |
help: Replace with `(0x10 + 0x1000).bit_count()`
8  | count = bin(0b1010).count("1")  # FURB161
9  | count = bin(0xA).count("1")  # FURB161
10 | count = bin(0o12).count("1")  # FURB161
   - count = bin(0x10 + 0x1000).count("1")  # FURB161
11 + count = (0x10 + 0x1000).bit_count()  # FURB161
12 | count = bin(ten()).count("1")  # FURB161
13 | count = bin((10)).count("1")  # FURB161
14 | count = bin("10" "15").count("1")  # FURB161

FURB161 [*] Use of `bin(ten()).count('1')`
  --> FURB161.py:12:9
   |
10 | count = bin(0o12).count("1")  # FURB161
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12 | count = bin(ten()).count("1")  # FURB161
   |         ^^^^^^^^^^^^^^^^^^^^^
13 | count = bin((10)).count("1")  # FURB161
14 | count = bin("10" "15").count("1")  # FURB161
   |
help: Replace with `ten().bit_count()`
9  | count = bin(0xA).count("1")  # FURB161
10 | count = bin(0o12).count("1")  # FURB161
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
   - count = bin(ten()).count("1")  # FURB161
12 + count = ten().bit_count()  # FURB161
13 | count = bin((10)).count("1")  # FURB161
14 | count = bin("10" "15").count("1")  # FURB161
15 | count = bin("123").count("1") # FURB161
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB161 [*] Use of `bin(10).count('1')`
  --> FURB161.py:13:9
   |
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12 | count = bin(ten()).count("1")  # FURB161
13 | count = bin((10)).count("1")  # FURB161
   |         ^^^^^^^^^^^^^^^^^^^^
14 | count = bin("10" "15").count("1")  # FURB161
15 | count = bin("123").count("1") # FURB161
   |
help: Replace with `(10).bit_count()`
10 | count = bin(0o12).count("1")  # FURB161
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12 | count = bin(ten()).count("1")  # FURB161
   - count = bin((10)).count("1")  # FURB161
13 + count = (10).bit_count()  # FURB161
14 | count = bin("10" "15").count("1")  # FURB161
15 | count = bin("123").count("1") # FURB161
16 | 

FURB161 [*] Use of `bin("10" "15").count('1')`
  --> FURB161.py:14:9
   |
12 | count = bin(ten()).count("1")  # FURB161
13 | count = bin((10)).count("1")  # FURB161
14 | count = bin("10" "15").count("1")  # FURB161
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
15 | count = bin("123").count("1") # FURB161
   |
help: Replace with `("10" "15").bit_count()`
11 | count = bin(0x10 + 0x1000).count("1")  # FURB161
12 | count = bin(ten()).count("1")  # FURB161
13 | count = bin((10)).count("1")  # FURB161
   - count = bin("10" "15").count("1")  # FURB161
14 + count = ("10" "15").bit_count()  # FURB161
15 | count = bin("123").count("1") # FURB161
16 | 
17 | count = x.bit_count()  # OK
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB161 [*] Use of `bin("123").count('1')`
  --> FURB161.py:15:9
   |
13 | count = bin((10)).count("1")  # FURB161
14 | count = bin("10" "15").count("1")  # FURB161
15 | count = bin("123").count("1") # FURB161
   |         ^^^^^^^^^^^^^^^^^^^^^
16 |
17 | count = x.bit_count()  # OK
   |
help: Replace with `"123".bit_count()`
12 | count = bin(ten()).count("1")  # FURB161
13 | count = bin((10)).count("1")  # FURB161
14 | count = bin("10" "15").count("1")  # FURB161
   - count = bin("123").count("1") # FURB161
15 + count = "123".bit_count() # FURB161
16 | 
17 | count = x.bit_count()  # OK
18 | count = (10).bit_count()  # OK
note: This is an unsafe fix and may remove comments or change runtime behavior

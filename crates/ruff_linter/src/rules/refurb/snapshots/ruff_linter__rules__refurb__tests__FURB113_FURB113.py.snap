---
source: crates/ruff_linter/src/rules/refurb/mod.rs
---
FURB113.py:23:1: FURB113 [*] Use `nums.extend((1, 2))` instead of repeatedly calling `nums.append()`
   |
22 |   # FURB113
23 | / nums.append(1)
24 | | nums.append(2)
   | |______________^ FURB113
25 |   pass
   |
   = help: Replace with `nums.extend((1, 2))`


FURB113.py:29:1: FURB113 [*] Use `nums3.extend((1, 2))` instead of repeatedly calling `nums3.append()`
   |
28 |   # FURB113
29 | / nums3.append(1)
30 | | nums3.append(2)
   | |_______________^ FURB113
31 |   pass
   |
   = help: Replace with `nums3.extend((1, 2))`


FURB113.py:35:1: FURB113 [*] Use `nums4.extend((1, 2))` instead of repeatedly calling `nums4.append()`
   |
34 |   # FURB113
35 | / nums4.append(1)
36 | | nums4.append(2)
   | |_______________^ FURB113
37 |   pass
   |
   = help: Replace with `nums4.extend((1, 2))`


FURB113.py:41:1: FURB113 Use `nums.extend((1, 2, 3))` instead of repeatedly calling `nums.append()`
   |
40 |   # FURB113
41 | / nums.append(1)
42 | | nums2.append(1)
43 | | nums.append(2)
44 | | nums.append(3)
   | |______________^ FURB113
45 |   pass
   |
   = help: Replace with `nums.extend((1, 2, 3))`

FURB113.py:49:1: FURB113 Use `nums.extend((1, 2, 3))` instead of repeatedly calling `nums.append()`
   |
48 |   # FURB113
49 | / nums.append(1)
50 | | nums2.append(1)
51 | | nums.append(2)
52 | | # FURB113
53 | | nums3.append(1)
54 | | nums.append(3)
   | |______________^ FURB113
55 |   # FURB113
56 |   nums4.append(1)
   |
   = help: Replace with `nums.extend((1, 2, 3))`

FURB113.py:53:1: FURB113 Use `nums3.extend((1, 2))` instead of repeatedly calling `nums3.append()`
   |
51 |   nums.append(2)
52 |   # FURB113
53 | / nums3.append(1)
54 | | nums.append(3)
55 | | # FURB113
56 | | nums4.append(1)
57 | | nums4.append(2)
58 | | nums3.append(2)
   | |_______________^ FURB113
59 |   pass
   |
   = help: Replace with `nums3.extend((1, 2))`

FURB113.py:56:1: FURB113 [*] Use `nums4.extend((1, 2))` instead of repeatedly calling `nums4.append()`
   |
54 |   nums.append(3)
55 |   # FURB113
56 | / nums4.append(1)
57 | | nums4.append(2)
   | |_______________^ FURB113
58 |   nums3.append(2)
59 |   pass
   |
   = help: Replace with `nums4.extend((1, 2))`


FURB113.py:62:1: FURB113 [*] Use `nums.extend((1, 2, 3))` instead of repeatedly calling `nums.append()`
   |
61 |   # FURB113
62 | / nums.append(1)
63 | | nums.append(2)
64 | | nums.append(3)
   | |______________^ FURB113
   |
   = help: Replace with `nums.extend((1, 2, 3))`


FURB113.py:69:5: FURB113 [*] Use `nums.extend((1, 2))` instead of repeatedly calling `nums.append()`
   |
67 |   if True:
68 |       # FURB113
69 |       nums.append(1)
   |  _____^
70 | |     nums.append(2)
   | |__________________^ FURB113
   |
   = help: Replace with `nums.extend((1, 2))`


FURB113.py:75:5: FURB113 [*] Use `nums.extend((1, 2))` instead of repeatedly calling `nums.append()`
   |
73 |   if True:
74 |       # FURB113
75 |       nums.append(1)
   |  _____^
76 | |     nums.append(2)
   | |__________________^ FURB113
77 |       pass
   |
   = help: Replace with `nums.extend((1, 2))`


FURB113.py:82:5: FURB113 Use `nums.extend((1, 2, 3))` instead of repeatedly calling `nums.append()`
   |
80 |   if True:
81 |       # FURB113
82 |       nums.append(1)
   |  _____^
83 | |     nums2.append(1)
84 | |     nums.append(2)
85 | |     nums.append(3)
   | |__________________^ FURB113
   |
   = help: Replace with `nums.extend((1, 2, 3))`

FURB113.py:90:5: FURB113 [*] Use `x.extend((1, 2))` instead of repeatedly calling `x.append()`
   |
88 |   def yes_one(x: list[int]):
89 |       # FURB113
90 |       x.append(1)
   |  _____^
91 | |     x.append(2)
   | |_______________^ FURB113
   |
   = help: Replace with `x.extend((1, 2))`


FURB113.py:96:5: FURB113 [*] Use `x.extend((1, 2))` instead of repeatedly calling `x.append()`
   |
94 |   def yes_two(x: List[int]):
95 |       # FURB113
96 |       x.append(1)
   |  _____^
97 | |     x.append(2)
   | |_______________^ FURB113
   |
   = help: Replace with `x.extend((1, 2))`


FURB113.py:102:5: FURB113 [*] Use `x.extend((1, 2))` instead of repeatedly calling `x.append()`
    |
100 |   def yes_three(*, x: list[int]):
101 |       # FURB113
102 |       x.append(1)
    |  _____^
103 | |     x.append(2)
    | |_______________^ FURB113
    |
    = help: Replace with `x.extend((1, 2))`


FURB113.py:108:5: FURB113 [*] Use `x.extend((1, 2))` instead of repeatedly calling `x.append()`
    |
106 |   def yes_four(x: list[int], /):
107 |       # FURB113
108 |       x.append(1)
    |  _____^
109 | |     x.append(2)
    | |_______________^ FURB113
    |
    = help: Replace with `x.extend((1, 2))`


FURB113.py:114:5: FURB113 Use `x.extend((1, 2, 3))` instead of repeatedly calling `x.append()`
    |
112 |   def yes_five(x: list[int], y: list[int]):
113 |       # FURB113
114 |       x.append(1)
    |  _____^
115 | |     x.append(2)
116 | |     y.append(1)
117 | |     x.append(3)
    | |_______________^ FURB113
    |
    = help: Replace with `x.extend((1, 2, 3))`

FURB113.py:122:5: FURB113 [*] Use `x.extend((1, 2))` instead of repeatedly calling `x.append()`
    |
120 |   def yes_six(x: list):
121 |       # FURB113
122 |       x.append(1)
    |  _____^
123 | |     x.append(2)
    | |_______________^ FURB113
    |
    = help: Replace with `x.extend((1, 2))`


FURB113.py:128:5: FURB113 Use `nums.extend((1, 2, 3))` instead of repeatedly calling `nums.append()`
    |
126 |   if True:
127 |       # FURB113
128 |       nums.append(1)
    |  _____^
129 | |     # comment
130 | |     nums.append(2)
131 | |     # comment
132 | |     nums.append(3)
    | |__________________^ FURB113
    |
    = help: Replace with `nums.extend((1, 2, 3))`

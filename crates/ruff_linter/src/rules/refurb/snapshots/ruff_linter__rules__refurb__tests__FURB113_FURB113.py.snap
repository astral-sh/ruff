---
source: crates/ruff_linter/src/rules/refurb/mod.rs
---
FURB113 [*] Use `nums.extend((1, 2))` instead of repeatedly calling `nums.append()`
  --> FURB113.py:23:1
   |
22 |   # FURB113
23 | / nums.append(1)
24 | | nums.append(2)
   | |______________^
25 |   pass
   |
help: Replace with `nums.extend((1, 2))`
20 | 
21 | 
22 | # FURB113
   - nums.append(1)
   - nums.append(2)
23 + nums.extend((1, 2))
24 | pass
25 | 
26 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB113 [*] Use `nums3.extend((1, 2))` instead of repeatedly calling `nums3.append()`
  --> FURB113.py:29:1
   |
28 |   # FURB113
29 | / nums3.append(1)
30 | | nums3.append(2)
   | |_______________^
31 |   pass
   |
help: Replace with `nums3.extend((1, 2))`
26 | 
27 | 
28 | # FURB113
   - nums3.append(1)
   - nums3.append(2)
29 + nums3.extend((1, 2))
30 | pass
31 | 
32 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB113 [*] Use `nums4.extend((1, 2))` instead of repeatedly calling `nums4.append()`
  --> FURB113.py:35:1
   |
34 |   # FURB113
35 | / nums4.append(1)
36 | | nums4.append(2)
   | |_______________^
37 |   pass
   |
help: Replace with `nums4.extend((1, 2))`
32 | 
33 | 
34 | # FURB113
   - nums4.append(1)
   - nums4.append(2)
35 + nums4.extend((1, 2))
36 | pass
37 | 
38 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB113 Use `nums.extend((1, 2, 3))` instead of repeatedly calling `nums.append()`
  --> FURB113.py:41:1
   |
40 |   # FURB113
41 | / nums.append(1)
42 | | nums2.append(1)
43 | | nums.append(2)
44 | | nums.append(3)
   | |______________^
45 |   pass
   |
help: Replace with `nums.extend((1, 2, 3))`

FURB113 Use `nums.extend((1, 2, 3))` instead of repeatedly calling `nums.append()`
  --> FURB113.py:49:1
   |
48 |   # FURB113
49 | / nums.append(1)
50 | | nums2.append(1)
51 | | nums.append(2)
52 | | # FURB113
53 | | nums3.append(1)
54 | | nums.append(3)
   | |______________^
55 |   # FURB113
56 |   nums4.append(1)
   |
help: Replace with `nums.extend((1, 2, 3))`

FURB113 Use `nums3.extend((1, 2))` instead of repeatedly calling `nums3.append()`
  --> FURB113.py:53:1
   |
51 |   nums.append(2)
52 |   # FURB113
53 | / nums3.append(1)
54 | | nums.append(3)
55 | | # FURB113
56 | | nums4.append(1)
57 | | nums4.append(2)
58 | | nums3.append(2)
   | |_______________^
59 |   pass
   |
help: Replace with `nums3.extend((1, 2))`

FURB113 [*] Use `nums4.extend((1, 2))` instead of repeatedly calling `nums4.append()`
  --> FURB113.py:56:1
   |
54 |   nums.append(3)
55 |   # FURB113
56 | / nums4.append(1)
57 | | nums4.append(2)
   | |_______________^
58 |   nums3.append(2)
59 |   pass
   |
help: Replace with `nums4.extend((1, 2))`
53 | nums3.append(1)
54 | nums.append(3)
55 | # FURB113
   - nums4.append(1)
   - nums4.append(2)
56 + nums4.extend((1, 2))
57 | nums3.append(2)
58 | pass
59 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB113 [*] Use `nums.extend((1, 2, 3))` instead of repeatedly calling `nums.append()`
  --> FURB113.py:62:1
   |
61 |   # FURB113
62 | / nums.append(1)
63 | | nums.append(2)
64 | | nums.append(3)
   | |______________^
   |
help: Replace with `nums.extend((1, 2, 3))`
59 | pass
60 | 
61 | # FURB113
   - nums.append(1)
   - nums.append(2)
   - nums.append(3)
62 + nums.extend((1, 2, 3))
63 | 
64 | 
65 | if True:
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB113 [*] Use `nums.extend((1, 2))` instead of repeatedly calling `nums.append()`
  --> FURB113.py:69:5
   |
67 |   if True:
68 |       # FURB113
69 | /     nums.append(1)
70 | |     nums.append(2)
   | |__________________^
   |
help: Replace with `nums.extend((1, 2))`
66 | 
67 | if True:
68 |     # FURB113
   -     nums.append(1)
   -     nums.append(2)
69 +     nums.extend((1, 2))
70 | 
71 | 
72 | if True:
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB113 [*] Use `nums.extend((1, 2))` instead of repeatedly calling `nums.append()`
  --> FURB113.py:75:5
   |
73 |   if True:
74 |       # FURB113
75 | /     nums.append(1)
76 | |     nums.append(2)
   | |__________________^
77 |       pass
   |
help: Replace with `nums.extend((1, 2))`
72 | 
73 | if True:
74 |     # FURB113
   -     nums.append(1)
   -     nums.append(2)
75 +     nums.extend((1, 2))
76 |     pass
77 | 
78 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB113 Use `nums.extend((1, 2, 3))` instead of repeatedly calling `nums.append()`
  --> FURB113.py:82:5
   |
80 |   if True:
81 |       # FURB113
82 | /     nums.append(1)
83 | |     nums2.append(1)
84 | |     nums.append(2)
85 | |     nums.append(3)
   | |__________________^
   |
help: Replace with `nums.extend((1, 2, 3))`

FURB113 [*] Use `x.extend((1, 2))` instead of repeatedly calling `x.append()`
  --> FURB113.py:90:5
   |
88 |   def yes_one(x: list[int]):
89 |       # FURB113
90 | /     x.append(1)
91 | |     x.append(2)
   | |_______________^
   |
help: Replace with `x.extend((1, 2))`
87 | 
88 | def yes_one(x: list[int]):
89 |     # FURB113
   -     x.append(1)
   -     x.append(2)
90 +     x.extend((1, 2))
91 | 
92 | 
93 | def yes_two(x: List[int]):
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB113 [*] Use `x.extend((1, 2))` instead of repeatedly calling `x.append()`
  --> FURB113.py:96:5
   |
94 |   def yes_two(x: List[int]):
95 |       # FURB113
96 | /     x.append(1)
97 | |     x.append(2)
   | |_______________^
   |
help: Replace with `x.extend((1, 2))`
93 | 
94 | def yes_two(x: List[int]):
95 |     # FURB113
   -     x.append(1)
   -     x.append(2)
96 +     x.extend((1, 2))
97 | 
98 | 
99 | def yes_three(*, x: list[int]):
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB113 [*] Use `x.extend((1, 2))` instead of repeatedly calling `x.append()`
   --> FURB113.py:102:5
    |
100 |   def yes_three(*, x: list[int]):
101 |       # FURB113
102 | /     x.append(1)
103 | |     x.append(2)
    | |_______________^
    |
help: Replace with `x.extend((1, 2))`
99  | 
100 | def yes_three(*, x: list[int]):
101 |     # FURB113
    -     x.append(1)
    -     x.append(2)
102 +     x.extend((1, 2))
103 | 
104 | 
105 | def yes_four(x: list[int], /):
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB113 [*] Use `x.extend((1, 2))` instead of repeatedly calling `x.append()`
   --> FURB113.py:108:5
    |
106 |   def yes_four(x: list[int], /):
107 |       # FURB113
108 | /     x.append(1)
109 | |     x.append(2)
    | |_______________^
    |
help: Replace with `x.extend((1, 2))`
105 | 
106 | def yes_four(x: list[int], /):
107 |     # FURB113
    -     x.append(1)
    -     x.append(2)
108 +     x.extend((1, 2))
109 | 
110 | 
111 | def yes_five(x: list[int], y: list[int]):
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB113 Use `x.extend((1, 2, 3))` instead of repeatedly calling `x.append()`
   --> FURB113.py:114:5
    |
112 |   def yes_five(x: list[int], y: list[int]):
113 |       # FURB113
114 | /     x.append(1)
115 | |     x.append(2)
116 | |     y.append(1)
117 | |     x.append(3)
    | |_______________^
    |
help: Replace with `x.extend((1, 2, 3))`

FURB113 [*] Use `x.extend((1, 2))` instead of repeatedly calling `x.append()`
   --> FURB113.py:122:5
    |
120 |   def yes_six(x: list):
121 |       # FURB113
122 | /     x.append(1)
123 | |     x.append(2)
    | |_______________^
    |
help: Replace with `x.extend((1, 2))`
119 | 
120 | def yes_six(x: list):
121 |     # FURB113
    -     x.append(1)
    -     x.append(2)
122 +     x.extend((1, 2))
123 | 
124 | 
125 | if True:
note: This is an unsafe fix and may remove comments or change runtime behavior

FURB113 Use `nums.extend((1, 2, 3))` instead of repeatedly calling `nums.append()`
   --> FURB113.py:128:5
    |
126 |   if True:
127 |       # FURB113
128 | /     nums.append(1)
129 | |     # comment
130 | |     nums.append(2)
131 | |     # comment
132 | |     nums.append(3)
    | |__________________^
    |
help: Replace with `nums.extend((1, 2, 3))`

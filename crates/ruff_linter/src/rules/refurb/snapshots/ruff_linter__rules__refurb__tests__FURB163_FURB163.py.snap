---
source: crates/ruff_linter/src/rules/refurb/mod.rs
---
FURB163.py:4:1: FURB163 [*] Prefer `math.log2(1)` over `math.log` with a redundant base
  |
3 | # Errors
4 | math.log(1, 2)
  | ^^^^^^^^^^^^^^ FURB163
5 | math.log(1, 10)
6 | math.log(1, math.e)
  |
  = help: Replace with `math.log2(1)`

ℹ Unsafe fix
1 1 | import math
2 2 | 
3 3 | # Errors
4   |-math.log(1, 2)
  4 |+math.log2(1)
5 5 | math.log(1, 10)
6 6 | math.log(1, math.e)
7 7 | foo = ...

FURB163.py:5:1: FURB163 [*] Prefer `math.log10(1)` over `math.log` with a redundant base
  |
3 | # Errors
4 | math.log(1, 2)
5 | math.log(1, 10)
  | ^^^^^^^^^^^^^^^ FURB163
6 | math.log(1, math.e)
7 | foo = ...
  |
  = help: Replace with `math.log10(1)`

ℹ Unsafe fix
2 2 | 
3 3 | # Errors
4 4 | math.log(1, 2)
5   |-math.log(1, 10)
  5 |+math.log10(1)
6 6 | math.log(1, math.e)
7 7 | foo = ...
8 8 | math.log(foo, 2)

FURB163.py:6:1: FURB163 [*] Prefer `math.log(1)` over `math.log` with a redundant base
  |
4 | math.log(1, 2)
5 | math.log(1, 10)
6 | math.log(1, math.e)
  | ^^^^^^^^^^^^^^^^^^^ FURB163
7 | foo = ...
8 | math.log(foo, 2)
  |
  = help: Replace with `math.log(1)`

ℹ Safe fix
3 3 | # Errors
4 4 | math.log(1, 2)
5 5 | math.log(1, 10)
6   |-math.log(1, math.e)
  6 |+math.log(1)
7 7 | foo = ...
8 8 | math.log(foo, 2)
9 9 | math.log(foo, 10)

FURB163.py:8:1: FURB163 [*] Prefer `math.log2(foo)` over `math.log` with a redundant base
   |
 6 | math.log(1, math.e)
 7 | foo = ...
 8 | math.log(foo, 2)
   | ^^^^^^^^^^^^^^^^ FURB163
 9 | math.log(foo, 10)
10 | math.log(foo, math.e)
   |
   = help: Replace with `math.log2(foo)`

ℹ Unsafe fix
5 5 | math.log(1, 10)
6 6 | math.log(1, math.e)
7 7 | foo = ...
8   |-math.log(foo, 2)
  8 |+math.log2(foo)
9 9 | math.log(foo, 10)
10 10 | math.log(foo, math.e)
11 11 | math.log(1, 2.0)

FURB163.py:9:1: FURB163 [*] Prefer `math.log10(foo)` over `math.log` with a redundant base
   |
 7 | foo = ...
 8 | math.log(foo, 2)
 9 | math.log(foo, 10)
   | ^^^^^^^^^^^^^^^^^ FURB163
10 | math.log(foo, math.e)
11 | math.log(1, 2.0)
   |
   = help: Replace with `math.log10(foo)`

ℹ Unsafe fix
6  6  | math.log(1, math.e)
7  7  | foo = ...
8  8  | math.log(foo, 2)
9     |-math.log(foo, 10)
   9  |+math.log10(foo)
10 10 | math.log(foo, math.e)
11 11 | math.log(1, 2.0)
12 12 | math.log(1, 10.0)

FURB163.py:10:1: FURB163 [*] Prefer `math.log(foo)` over `math.log` with a redundant base
   |
 8 | math.log(foo, 2)
 9 | math.log(foo, 10)
10 | math.log(foo, math.e)
   | ^^^^^^^^^^^^^^^^^^^^^ FURB163
11 | math.log(1, 2.0)
12 | math.log(1, 10.0)
   |
   = help: Replace with `math.log(foo)`

ℹ Safe fix
7  7  | foo = ...
8  8  | math.log(foo, 2)
9  9  | math.log(foo, 10)
10    |-math.log(foo, math.e)
   10 |+math.log(foo)
11 11 | math.log(1, 2.0)
12 12 | math.log(1, 10.0)
13 13 | 

FURB163.py:11:1: FURB163 [*] Prefer `math.log2(1)` over `math.log` with a redundant base
   |
 9 | math.log(foo, 10)
10 | math.log(foo, math.e)
11 | math.log(1, 2.0)
   | ^^^^^^^^^^^^^^^^ FURB163
12 | math.log(1, 10.0)
   |
   = help: Replace with `math.log2(1)`

ℹ Unsafe fix
8  8  | math.log(foo, 2)
9  9  | math.log(foo, 10)
10 10 | math.log(foo, math.e)
11    |-math.log(1, 2.0)
   11 |+math.log2(1)
12 12 | math.log(1, 10.0)
13 13 | 
14 14 | # OK

FURB163.py:12:1: FURB163 [*] Prefer `math.log10(1)` over `math.log` with a redundant base
   |
10 | math.log(foo, math.e)
11 | math.log(1, 2.0)
12 | math.log(1, 10.0)
   | ^^^^^^^^^^^^^^^^^ FURB163
13 |
14 | # OK
   |
   = help: Replace with `math.log10(1)`

ℹ Unsafe fix
9  9  | math.log(foo, 10)
10 10 | math.log(foo, math.e)
11 11 | math.log(1, 2.0)
12    |-math.log(1, 10.0)
   12 |+math.log10(1)
13 13 | 
14 14 | # OK
15 15 | math.log2(1)

FURB163.py:49:11: FURB163 [*] Prefer `math.log(yield)` over `math.log` with a redundant base
   |
47 | # https://github.com/astral-sh/ruff/issues/18747
48 | def log():
49 |     yield math.log((yield), math.e)
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^ FURB163
   |
   = help: Replace with `math.log(yield)`

ℹ Safe fix
46 46 | 
47 47 | # https://github.com/astral-sh/ruff/issues/18747
48 48 | def log():
49    |-    yield math.log((yield), math.e)
   49 |+    yield math.log((yield))
50 50 | 
51 51 | 
52 52 | def log():

FURB163.py:53:11: FURB163 [*] Prefer `math.log(yield from x)` over `math.log` with a redundant base
   |
52 | def log():
53 |     yield math.log((yield from x), math.e)
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ FURB163
   |
   = help: Replace with `math.log(yield from x)`

ℹ Safe fix
50 50 | 
51 51 | 
52 52 | def log():
53    |-    yield math.log((yield from x), math.e)
   53 |+    yield math.log((yield from x))

FURB163.py:49:1: FURB163 [*] Prefer `math.log10(1)` over `math.log` with a redundant base
   |
48 |   # see: https://github.com/astral-sh/ruff/issues/18639
49 | / math.log(1, 10 # comment
50 | |          )
   | |__________^ FURB163
51 |
52 |   math.log(1,
   |
   = help: Replace with `math.log10(1)`

ℹ Unsafe fix
46 46 | 
47 47 | 
48 48 | # see: https://github.com/astral-sh/ruff/issues/18639
49    |-math.log(1, 10 # comment
50    |-         )
   49 |+math.log10(1)
51 50 | 
52 51 | math.log(1,
53 52 |          10 # comment

FURB163.py:52:1: FURB163 [*] Prefer `math.log10(1)` over `math.log` with a redundant base
   |
50 |            )
51 |
52 | / math.log(1,
53 | |          10 # comment
54 | |          )
   | |__________^ FURB163
55 |
56 |   math.log(1 # comment
   |
   = help: Replace with `math.log10(1)`

ℹ Unsafe fix
49 49 | math.log(1, 10 # comment
50 50 |          )
51 51 | 
52    |-math.log(1,
53    |-         10 # comment
54    |-         )
   52 |+math.log10(1)
55 53 | 
56 54 | math.log(1 # comment
57 55 |          , # comment

FURB163.py:56:1: FURB163 [*] Prefer `math.log10(1)` over `math.log` with a redundant base
   |
54 |            )
55 |
56 | / math.log(1 # comment
57 | |          , # comment
58 | |          10 # comment
59 | |          )
   | |__________^ FURB163
60 |
61 |   math.log(
   |
   = help: Replace with `math.log10(1)`

ℹ Unsafe fix
53 53 |          10 # comment
54 54 |          )
55 55 | 
56    |-math.log(1 # comment
57    |-         , # comment
58    |-         10 # comment
59    |-         )
   56 |+math.log10(1)
60 57 | 
61 58 | math.log(
62 59 |     1 # comment

FURB163.py:61:1: FURB163 [*] Prefer `math.log10(1)` over `math.log` with a redundant base
   |
59 |            )
60 |
61 | / math.log(
62 | |     1 # comment
63 | |     ,
64 | |     10 # comment
65 | | )
   | |_^ FURB163
66 |
67 |   math.log(4.13e223, 2)
   |
   = help: Replace with `math.log10(1)`

ℹ Unsafe fix
58 58 |          10 # comment
59 59 |          )
60 60 | 
61    |-math.log(
62    |-    1 # comment
63    |-    ,
64    |-    10 # comment
65    |-)
   61 |+math.log10(1)
66 62 | 
67 63 | math.log(4.13e223, 2)
68 64 | math.log(4.14e223, 10)

FURB163.py:67:1: FURB163 [*] Prefer `math.log2(4.13e223)` over `math.log` with a redundant base
   |
65 | )
66 |
67 | math.log(4.13e223, 2)
   | ^^^^^^^^^^^^^^^^^^^^^ FURB163
68 | math.log(4.14e223, 10)
   |
   = help: Replace with `math.log2(4.13e223)`

ℹ Unsafe fix
64 64 |     10 # comment
65 65 | )
66 66 | 
67    |-math.log(4.13e223, 2)
   67 |+math.log2(4.13e223)
68 68 | math.log(4.14e223, 10)
69 69 | 
70 70 | 

FURB163.py:68:1: FURB163 [*] Prefer `math.log10(4.14e223)` over `math.log` with a redundant base
   |
67 | math.log(4.13e223, 2)
68 | math.log(4.14e223, 10)
   | ^^^^^^^^^^^^^^^^^^^^^^ FURB163
   |
   = help: Replace with `math.log10(4.14e223)`

ℹ Unsafe fix
65 65 | )
66 66 | 
67 67 | math.log(4.13e223, 2)
68    |-math.log(4.14e223, 10)
   68 |+math.log10(4.14e223)
69 69 | 
70 70 | 
71 71 | def print_log(*args):

FURB163.py:73:15: FURB163 [*] Prefer `math.log(*args)` over `math.log` with a redundant base
   |
71 | def print_log(*args):
72 |     try:
73 |         print(math.log(*args, math.e))
   |               ^^^^^^^^^^^^^^^^^^^^^^^ FURB163
74 |     except TypeError as e:
75 |         print(repr(e))
   |
   = help: Replace with `math.log(*args)`

ℹ Unsafe fix
70 70 | 
71 71 | def print_log(*args):
72 72 |     try:
73    |-        print(math.log(*args, math.e))
   73 |+        print(math.log(*args))
74 74 |     except TypeError as e:
75 75 |         print(repr(e))
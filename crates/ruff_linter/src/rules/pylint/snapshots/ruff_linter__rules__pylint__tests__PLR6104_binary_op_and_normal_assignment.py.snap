---
source: crates/ruff_linter/src/rules/pylint/mod.rs
---
binary_op_and_normal_assignment.py:7:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
 5 |   mat1, mat2 = None, None # PLR6104
 6 |   
 7 | / some_string = (
 8 | |   some_string
 9 | |   + "a very long end of string"
10 | | ) # PLR6104
   | |_^ PLR6104
11 |   index = index - 1 # PLR6104
12 |   a_list = a_list + ["to concat"] # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
4  4  | some_set = {"elem"} # PLR6104
5  5  | mat1, mat2 = None, None # PLR6104
6  6  | 
7     |-some_string = (
8     |-  some_string
9     |-  + "a very long end of string"
10    |-) # PLR6104
   7  |+some_string += "a very long end of string" # PLR6104
11 8  | index = index - 1 # PLR6104
12 9  | a_list = a_list + ["to concat"] # PLR6104
13 10 | some_set = some_set | {"to concat"} # PLR6104

binary_op_and_normal_assignment.py:11:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
 9 |   + "a very long end of string"
10 | ) # PLR6104
11 | index = index - 1 # PLR6104
   | ^^^^^^^^^^^^^^^^^ PLR6104
12 | a_list = a_list + ["to concat"] # PLR6104
13 | some_set = some_set | {"to concat"} # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
8  8  |   some_string
9  9  |   + "a very long end of string"
10 10 | ) # PLR6104
11    |-index = index - 1 # PLR6104
   11 |+index -= 1 # PLR6104
12 12 | a_list = a_list + ["to concat"] # PLR6104
13 13 | some_set = some_set | {"to concat"} # PLR6104
14 14 | to_multiply = to_multiply * 5 # PLR6104

binary_op_and_normal_assignment.py:12:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
10 | ) # PLR6104
11 | index = index - 1 # PLR6104
12 | a_list = a_list + ["to concat"] # PLR6104
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6104
13 | some_set = some_set | {"to concat"} # PLR6104
14 | to_multiply = to_multiply * 5 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
9  9  |   + "a very long end of string"
10 10 | ) # PLR6104
11 11 | index = index - 1 # PLR6104
12    |-a_list = a_list + ["to concat"] # PLR6104
   12 |+a_list += ["to concat"] # PLR6104
13 13 | some_set = some_set | {"to concat"} # PLR6104
14 14 | to_multiply = to_multiply * 5 # PLR6104
15 15 | to_divide = to_divide / 5 # PLR6104

binary_op_and_normal_assignment.py:13:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
11 | index = index - 1 # PLR6104
12 | a_list = a_list + ["to concat"] # PLR6104
13 | some_set = some_set | {"to concat"} # PLR6104
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6104
14 | to_multiply = to_multiply * 5 # PLR6104
15 | to_divide = to_divide / 5 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
10 10 | ) # PLR6104
11 11 | index = index - 1 # PLR6104
12 12 | a_list = a_list + ["to concat"] # PLR6104
13    |-some_set = some_set | {"to concat"} # PLR6104
   13 |+some_set |= {"to concat"} # PLR6104
14 14 | to_multiply = to_multiply * 5 # PLR6104
15 15 | to_divide = to_divide / 5 # PLR6104
16 16 | to_divide = to_divide // 5 # PLR6104

binary_op_and_normal_assignment.py:14:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
12 | a_list = a_list + ["to concat"] # PLR6104
13 | some_set = some_set | {"to concat"} # PLR6104
14 | to_multiply = to_multiply * 5 # PLR6104
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6104
15 | to_divide = to_divide / 5 # PLR6104
16 | to_divide = to_divide // 5 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
11 11 | index = index - 1 # PLR6104
12 12 | a_list = a_list + ["to concat"] # PLR6104
13 13 | some_set = some_set | {"to concat"} # PLR6104
14    |-to_multiply = to_multiply * 5 # PLR6104
   14 |+to_multiply *= 5 # PLR6104
15 15 | to_divide = to_divide / 5 # PLR6104
16 16 | to_divide = to_divide // 5 # PLR6104
17 17 | to_cube = to_cube ** 3 # PLR6104

binary_op_and_normal_assignment.py:15:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
13 | some_set = some_set | {"to concat"} # PLR6104
14 | to_multiply = to_multiply * 5 # PLR6104
15 | to_divide = to_divide / 5 # PLR6104
   | ^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6104
16 | to_divide = to_divide // 5 # PLR6104
17 | to_cube = to_cube ** 3 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
12 12 | a_list = a_list + ["to concat"] # PLR6104
13 13 | some_set = some_set | {"to concat"} # PLR6104
14 14 | to_multiply = to_multiply * 5 # PLR6104
15    |-to_divide = to_divide / 5 # PLR6104
   15 |+to_divide /= 5 # PLR6104
16 16 | to_divide = to_divide // 5 # PLR6104
17 17 | to_cube = to_cube ** 3 # PLR6104
18 18 | timeDiffSeconds = timeDiffSeconds % 60 # PLR6104

binary_op_and_normal_assignment.py:16:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
14 | to_multiply = to_multiply * 5 # PLR6104
15 | to_divide = to_divide / 5 # PLR6104
16 | to_divide = to_divide // 5 # PLR6104
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6104
17 | to_cube = to_cube ** 3 # PLR6104
18 | timeDiffSeconds = timeDiffSeconds % 60 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
13 13 | some_set = some_set | {"to concat"} # PLR6104
14 14 | to_multiply = to_multiply * 5 # PLR6104
15 15 | to_divide = to_divide / 5 # PLR6104
16    |-to_divide = to_divide // 5 # PLR6104
   16 |+to_divide //= 5 # PLR6104
17 17 | to_cube = to_cube ** 3 # PLR6104
18 18 | timeDiffSeconds = timeDiffSeconds % 60 # PLR6104
19 19 | flags = flags & 0x1 # PLR6104

binary_op_and_normal_assignment.py:17:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
15 | to_divide = to_divide / 5 # PLR6104
16 | to_divide = to_divide // 5 # PLR6104
17 | to_cube = to_cube ** 3 # PLR6104
   | ^^^^^^^^^^^^^^^^^^^^^^ PLR6104
18 | timeDiffSeconds = timeDiffSeconds % 60 # PLR6104
19 | flags = flags & 0x1 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
14 14 | to_multiply = to_multiply * 5 # PLR6104
15 15 | to_divide = to_divide / 5 # PLR6104
16 16 | to_divide = to_divide // 5 # PLR6104
17    |-to_cube = to_cube ** 3 # PLR6104
   17 |+to_cube **= 3 # PLR6104
18 18 | timeDiffSeconds = timeDiffSeconds % 60 # PLR6104
19 19 | flags = flags & 0x1 # PLR6104
20 20 | flags = flags | 0x1 # PLR6104

binary_op_and_normal_assignment.py:18:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
16 | to_divide = to_divide // 5 # PLR6104
17 | to_cube = to_cube ** 3 # PLR6104
18 | timeDiffSeconds = timeDiffSeconds % 60 # PLR6104
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6104
19 | flags = flags & 0x1 # PLR6104
20 | flags = flags | 0x1 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
15 15 | to_divide = to_divide / 5 # PLR6104
16 16 | to_divide = to_divide // 5 # PLR6104
17 17 | to_cube = to_cube ** 3 # PLR6104
18    |-timeDiffSeconds = timeDiffSeconds % 60 # PLR6104
   18 |+timeDiffSeconds %= 60 # PLR6104
19 19 | flags = flags & 0x1 # PLR6104
20 20 | flags = flags | 0x1 # PLR6104
21 21 | flags = flags ^ 0x1 # PLR6104

binary_op_and_normal_assignment.py:19:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
17 | to_cube = to_cube ** 3 # PLR6104
18 | timeDiffSeconds = timeDiffSeconds % 60 # PLR6104
19 | flags = flags & 0x1 # PLR6104
   | ^^^^^^^^^^^^^^^^^^^ PLR6104
20 | flags = flags | 0x1 # PLR6104
21 | flags = flags ^ 0x1 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
16 16 | to_divide = to_divide // 5 # PLR6104
17 17 | to_cube = to_cube ** 3 # PLR6104
18 18 | timeDiffSeconds = timeDiffSeconds % 60 # PLR6104
19    |-flags = flags & 0x1 # PLR6104
   19 |+flags &= 1 # PLR6104
20 20 | flags = flags | 0x1 # PLR6104
21 21 | flags = flags ^ 0x1 # PLR6104
22 22 | flags = flags << 1 # PLR6104

binary_op_and_normal_assignment.py:20:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
18 | timeDiffSeconds = timeDiffSeconds % 60 # PLR6104
19 | flags = flags & 0x1 # PLR6104
20 | flags = flags | 0x1 # PLR6104
   | ^^^^^^^^^^^^^^^^^^^ PLR6104
21 | flags = flags ^ 0x1 # PLR6104
22 | flags = flags << 1 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
17 17 | to_cube = to_cube ** 3 # PLR6104
18 18 | timeDiffSeconds = timeDiffSeconds % 60 # PLR6104
19 19 | flags = flags & 0x1 # PLR6104
20    |-flags = flags | 0x1 # PLR6104
   20 |+flags |= 1 # PLR6104
21 21 | flags = flags ^ 0x1 # PLR6104
22 22 | flags = flags << 1 # PLR6104
23 23 | flags = flags >> 1 # PLR6104

binary_op_and_normal_assignment.py:21:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
19 | flags = flags & 0x1 # PLR6104
20 | flags = flags | 0x1 # PLR6104
21 | flags = flags ^ 0x1 # PLR6104
   | ^^^^^^^^^^^^^^^^^^^ PLR6104
22 | flags = flags << 1 # PLR6104
23 | flags = flags >> 1 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
18 18 | timeDiffSeconds = timeDiffSeconds % 60 # PLR6104
19 19 | flags = flags & 0x1 # PLR6104
20 20 | flags = flags | 0x1 # PLR6104
21    |-flags = flags ^ 0x1 # PLR6104
   21 |+flags ^= 1 # PLR6104
22 22 | flags = flags << 1 # PLR6104
23 23 | flags = flags >> 1 # PLR6104
24 24 | mat1 = mat1 @ mat2 # PLR6104

binary_op_and_normal_assignment.py:22:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
20 | flags = flags | 0x1 # PLR6104
21 | flags = flags ^ 0x1 # PLR6104
22 | flags = flags << 1 # PLR6104
   | ^^^^^^^^^^^^^^^^^^ PLR6104
23 | flags = flags >> 1 # PLR6104
24 | mat1 = mat1 @ mat2 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
19 19 | flags = flags & 0x1 # PLR6104
20 20 | flags = flags | 0x1 # PLR6104
21 21 | flags = flags ^ 0x1 # PLR6104
22    |-flags = flags << 1 # PLR6104
   22 |+flags <<= 1 # PLR6104
23 23 | flags = flags >> 1 # PLR6104
24 24 | mat1 = mat1 @ mat2 # PLR6104
25 25 | a_list[1] = a_list[1] + 1 # PLR6104

binary_op_and_normal_assignment.py:23:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
21 | flags = flags ^ 0x1 # PLR6104
22 | flags = flags << 1 # PLR6104
23 | flags = flags >> 1 # PLR6104
   | ^^^^^^^^^^^^^^^^^^ PLR6104
24 | mat1 = mat1 @ mat2 # PLR6104
25 | a_list[1] = a_list[1] + 1 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
20 20 | flags = flags | 0x1 # PLR6104
21 21 | flags = flags ^ 0x1 # PLR6104
22 22 | flags = flags << 1 # PLR6104
23    |-flags = flags >> 1 # PLR6104
   23 |+flags >>= 1 # PLR6104
24 24 | mat1 = mat1 @ mat2 # PLR6104
25 25 | a_list[1] = a_list[1] + 1 # PLR6104
26 26 | 

binary_op_and_normal_assignment.py:24:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
22 | flags = flags << 1 # PLR6104
23 | flags = flags >> 1 # PLR6104
24 | mat1 = mat1 @ mat2 # PLR6104
   | ^^^^^^^^^^^^^^^^^^ PLR6104
25 | a_list[1] = a_list[1] + 1 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
21 21 | flags = flags ^ 0x1 # PLR6104
22 22 | flags = flags << 1 # PLR6104
23 23 | flags = flags >> 1 # PLR6104
24    |-mat1 = mat1 @ mat2 # PLR6104
   24 |+mat1 @= mat2 # PLR6104
25 25 | a_list[1] = a_list[1] + 1 # PLR6104
26 26 | 
27 27 | a_list[0:2] = a_list[0:2] * 3 # PLR6104

binary_op_and_normal_assignment.py:25:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
23 | flags = flags >> 1 # PLR6104
24 | mat1 = mat1 @ mat2 # PLR6104
25 | a_list[1] = a_list[1] + 1 # PLR6104
   | ^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6104
26 | 
27 | a_list[0:2] = a_list[0:2] * 3 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
22 22 | flags = flags << 1 # PLR6104
23 23 | flags = flags >> 1 # PLR6104
24 24 | mat1 = mat1 @ mat2 # PLR6104
25    |-a_list[1] = a_list[1] + 1 # PLR6104
   25 |+a_list[1] += 1 # PLR6104
26 26 | 
27 27 | a_list[0:2] = a_list[0:2] * 3 # PLR6104
28 28 | a_list[:2] = a_list[:2] * 3 # PLR6104

binary_op_and_normal_assignment.py:27:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
25 | a_list[1] = a_list[1] + 1 # PLR6104
26 | 
27 | a_list[0:2] = a_list[0:2] * 3 # PLR6104
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6104
28 | a_list[:2] = a_list[:2] * 3 # PLR6104
29 | a_list[1:] = a_list[1:] * 3 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
24 24 | mat1 = mat1 @ mat2 # PLR6104
25 25 | a_list[1] = a_list[1] + 1 # PLR6104
26 26 | 
27    |-a_list[0:2] = a_list[0:2] * 3 # PLR6104
   27 |+a_list[0:2] *= 3 # PLR6104
28 28 | a_list[:2] = a_list[:2] * 3 # PLR6104
29 29 | a_list[1:] = a_list[1:] * 3 # PLR6104
30 30 | a_list[:] = a_list[:] * 3 # PLR6104

binary_op_and_normal_assignment.py:28:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
27 | a_list[0:2] = a_list[0:2] * 3 # PLR6104
28 | a_list[:2] = a_list[:2] * 3 # PLR6104
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6104
29 | a_list[1:] = a_list[1:] * 3 # PLR6104
30 | a_list[:] = a_list[:] * 3 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
25 25 | a_list[1] = a_list[1] + 1 # PLR6104
26 26 | 
27 27 | a_list[0:2] = a_list[0:2] * 3 # PLR6104
28    |-a_list[:2] = a_list[:2] * 3 # PLR6104
   28 |+a_list[:2] *= 3 # PLR6104
29 29 | a_list[1:] = a_list[1:] * 3 # PLR6104
30 30 | a_list[:] = a_list[:] * 3 # PLR6104
31 31 | 

binary_op_and_normal_assignment.py:29:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
27 | a_list[0:2] = a_list[0:2] * 3 # PLR6104
28 | a_list[:2] = a_list[:2] * 3 # PLR6104
29 | a_list[1:] = a_list[1:] * 3 # PLR6104
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6104
30 | a_list[:] = a_list[:] * 3 # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
26 26 | 
27 27 | a_list[0:2] = a_list[0:2] * 3 # PLR6104
28 28 | a_list[:2] = a_list[:2] * 3 # PLR6104
29    |-a_list[1:] = a_list[1:] * 3 # PLR6104
   29 |+a_list[1:] *= 3 # PLR6104
30 30 | a_list[:] = a_list[:] * 3 # PLR6104
31 31 | 
32 32 | index = index * (index + 10)  # PLR6104

binary_op_and_normal_assignment.py:30:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
28 | a_list[:2] = a_list[:2] * 3 # PLR6104
29 | a_list[1:] = a_list[1:] * 3 # PLR6104
30 | a_list[:] = a_list[:] * 3 # PLR6104
   | ^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6104
31 | 
32 | index = index * (index + 10)  # PLR6104
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
27 27 | a_list[0:2] = a_list[0:2] * 3 # PLR6104
28 28 | a_list[:2] = a_list[:2] * 3 # PLR6104
29 29 | a_list[1:] = a_list[1:] * 3 # PLR6104
30    |-a_list[:] = a_list[:] * 3 # PLR6104
   30 |+a_list[:] *= 3 # PLR6104
31 31 | 
32 32 | index = index * (index + 10)  # PLR6104
33 33 | 

binary_op_and_normal_assignment.py:32:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
30 | a_list[:] = a_list[:] * 3 # PLR6104
31 | 
32 | index = index * (index + 10)  # PLR6104
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6104
33 | 
34 | class T:
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
29 29 | a_list[1:] = a_list[1:] * 3 # PLR6104
30 30 | a_list[:] = a_list[:] * 3 # PLR6104
31 31 | 
32    |-index = index * (index + 10)  # PLR6104
   32 |+index *= index + 10  # PLR6104
33 33 | 
34 34 | class T:
35 35 |     def t(self):

binary_op_and_normal_assignment.py:36:9: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
34 | class T:
35 |     def t(self):
36 |         self.a = self.a + 1 # PLR6104
   |         ^^^^^^^^^^^^^^^^^^^ PLR6104
37 | 
38 | obj = T()
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
33 33 | 
34 34 | class T:
35 35 |     def t(self):
36    |-        self.a = self.a + 1 # PLR6104
   36 |+        self.a += 1 # PLR6104
37 37 | 
38 38 | obj = T()
39 39 | obj.a = obj.a + 1 # PLR6104

binary_op_and_normal_assignment.py:39:1: PLR6104 [*] Normal assignment with left operand of binary operator being the same as the target.
   |
38 | obj = T()
39 | obj.a = obj.a + 1 # PLR6104
   | ^^^^^^^^^^^^^^^^^ PLR6104
40 | 
41 | a_list[0] = a_list[:] * 3 # OK
   |
   = help: Use augmented assignment instead.

ℹ Unsafe fix
36 36 |         self.a = self.a + 1 # PLR6104
37 37 | 
38 38 | obj = T()
39    |-obj.a = obj.a + 1 # PLR6104
   39 |+obj.a += 1 # PLR6104
40 40 | 
41 41 | a_list[0] = a_list[:] * 3 # OK
42 42 | index = a_number = a_number + 1 # OK



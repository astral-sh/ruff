---
source: crates/ruff_linter/src/rules/pylint/mod.rs
---
PLW0133 [*] Missing `raise` statement on exception
 --> useless_exception_statement.py:7:5
  |
5 | # Test case 1: Useless exception statement
6 | def func():
7 |     AssertionError("This is an assertion error")  # PLW0133
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
help: Add `raise` keyword
4  | 
5  | # Test case 1: Useless exception statement
6  | def func():
   -     AssertionError("This is an assertion error")  # PLW0133
7  +     raise AssertionError("This is an assertion error")  # PLW0133
8  | 
9  | 
10 | # Test case 2: Useless exception statement in try-except block
note: This is an unsafe fix and may remove comments or change runtime behavior

PLW0133 [*] Missing `raise` statement on exception
  --> useless_exception_statement.py:13:9
   |
11 | def func():
12 |     try:
13 |         Exception("This is an exception")  # PLW0133
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |     except Exception as err:
15 |         pass
   |
help: Add `raise` keyword
10 | # Test case 2: Useless exception statement in try-except block
11 | def func():
12 |     try:
   -         Exception("This is an exception")  # PLW0133
13 +         raise Exception("This is an exception")  # PLW0133
14 |     except Exception as err:
15 |         pass
16 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

PLW0133 [*] Missing `raise` statement on exception
  --> useless_exception_statement.py:21:9
   |
19 | def func():
20 |     if True:
21 |         RuntimeError("This is an exception")  # PLW0133
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Add `raise` keyword
18 | # Test case 3: Useless exception statement in if statement
19 | def func():
20 |     if True:
   -         RuntimeError("This is an exception")  # PLW0133
21 +         raise RuntimeError("This is an exception")  # PLW0133
22 | 
23 | 
24 | # Test case 4: Useless exception statement in class
note: This is an unsafe fix and may remove comments or change runtime behavior

PLW0133 [*] Missing `raise` statement on exception
  --> useless_exception_statement.py:28:13
   |
26 |     class Class:
27 |         def __init__(self):
28 |             TypeError("This is an exception")  # PLW0133
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Add `raise` keyword
25 | def func():
26 |     class Class:
27 |         def __init__(self):
   -             TypeError("This is an exception")  # PLW0133
28 +             raise TypeError("This is an exception")  # PLW0133
29 | 
30 | 
31 | # Test case 5: Useless exception statement in function
note: This is an unsafe fix and may remove comments or change runtime behavior

PLW0133 [*] Missing `raise` statement on exception
  --> useless_exception_statement.py:34:9
   |
32 | def func():
33 |     def inner():
34 |         IndexError("This is an exception")  # PLW0133
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
35 |
36 |     inner()
   |
help: Add `raise` keyword
31 | # Test case 5: Useless exception statement in function
32 | def func():
33 |     def inner():
   -         IndexError("This is an exception")  # PLW0133
34 +         raise IndexError("This is an exception")  # PLW0133
35 | 
36 |     inner()
37 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

PLW0133 [*] Missing `raise` statement on exception
  --> useless_exception_statement.py:42:9
   |
40 | def func():
41 |     while True:
42 |         KeyError("This is an exception")  # PLW0133
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Add `raise` keyword
39 | # Test case 6: Useless exception statement in while loop
40 | def func():
41 |     while True:
   -         KeyError("This is an exception")  # PLW0133
42 +         raise KeyError("This is an exception")  # PLW0133
43 | 
44 | 
45 | # Test case 7: Useless exception statement in abstract class
note: This is an unsafe fix and may remove comments or change runtime behavior

PLW0133 [*] Missing `raise` statement on exception
  --> useless_exception_statement.py:50:13
   |
48 |         @abstractmethod
49 |         def method(self):
50 |             NotImplementedError("This is an exception")  # PLW0133
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Add `raise` keyword
47 |     class Class(ABC):
48 |         @abstractmethod
49 |         def method(self):
   -             NotImplementedError("This is an exception")  # PLW0133
50 +             raise NotImplementedError("This is an exception")  # PLW0133
51 | 
52 | 
53 | # Test case 8: Useless exception statement inside context manager
note: This is an unsafe fix and may remove comments or change runtime behavior

PLW0133 [*] Missing `raise` statement on exception
  --> useless_exception_statement.py:56:9
   |
54 | def func():
55 |     with suppress(AttributeError):
56 |         AttributeError("This is an exception")  # PLW0133
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Add `raise` keyword
53 | # Test case 8: Useless exception statement inside context manager
54 | def func():
55 |     with suppress(AttributeError):
   -         AttributeError("This is an exception")  # PLW0133
56 +         raise AttributeError("This is an exception")  # PLW0133
57 | 
58 | 
59 | # Test case 9: Useless exception statement in parentheses
note: This is an unsafe fix and may remove comments or change runtime behavior

PLW0133 [*] Missing `raise` statement on exception
  --> useless_exception_statement.py:61:5
   |
59 | # Test case 9: Useless exception statement in parentheses
60 | def func():
61 |     (RuntimeError("This is an exception"))  # PLW0133
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Add `raise` keyword
58 | 
59 | # Test case 9: Useless exception statement in parentheses
60 | def func():
   -     (RuntimeError("This is an exception"))  # PLW0133
61 +     raise (RuntimeError("This is an exception"))  # PLW0133
62 | 
63 | 
64 | # Test case 10: Useless exception statement in continuation
note: This is an unsafe fix and may remove comments or change runtime behavior

PLW0133 [*] Missing `raise` statement on exception
  --> useless_exception_statement.py:66:12
   |
64 | # Test case 10: Useless exception statement in continuation
65 | def func():
66 |     x = 1; (RuntimeError("This is an exception")); y = 2  # PLW0133
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Add `raise` keyword
63 | 
64 | # Test case 10: Useless exception statement in continuation
65 | def func():
   -     x = 1; (RuntimeError("This is an exception")); y = 2  # PLW0133
66 +     x = 1; raise (RuntimeError("This is an exception")); y = 2  # PLW0133
67 | 
68 | 
69 | # Test case 11: Useless warning statement
note: This is an unsafe fix and may remove comments or change runtime behavior

PLW0133 [*] Missing `raise` statement on exception
  --> useless_exception_statement.py:71:5
   |
69 | # Test case 11: Useless warning statement
70 | def func():
71 |     UserWarning("This is an assertion error")  # PLW0133
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Add `raise` keyword
68 | 
69 | # Test case 11: Useless warning statement
70 | def func():
   -     UserWarning("This is an assertion error")  # PLW0133
71 +     raise UserWarning("This is an assertion error")  # PLW0133
72 | 
73 | 
74 | # Non-violation test cases: PLW0133
note: This is an unsafe fix and may remove comments or change runtime behavior

PLW0133 [*] Missing `raise` statement on exception
   --> useless_exception_statement.py:126:1
    |
124 | import builtins
125 |
126 | builtins.TypeError("still an exception even though it's an Attribute")
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
127 |
128 | PythonFinalizationError("Added in Python 3.13")
    |
help: Add `raise` keyword
123 | 
124 | import builtins
125 | 
    - builtins.TypeError("still an exception even though it's an Attribute")
126 + raise builtins.TypeError("still an exception even though it's an Attribute")
127 | 
128 | PythonFinalizationError("Added in Python 3.13")
note: This is an unsafe fix and may remove comments or change runtime behavior

PLW0133 [*] Missing `raise` statement on exception
   --> useless_exception_statement.py:128:1
    |
126 | builtins.TypeError("still an exception even though it's an Attribute")
127 |
128 | PythonFinalizationError("Added in Python 3.13")
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Add `raise` keyword
125 | 
126 | builtins.TypeError("still an exception even though it's an Attribute")
127 | 
    - PythonFinalizationError("Added in Python 3.13")
128 + raise PythonFinalizationError("Added in Python 3.13")
note: This is an unsafe fix and may remove comments or change runtime behavior

---
source: crates/ruff_linter/src/rules/ruff/mod.rs
---
RUF065 Binary operation `&` between a value and itself can be simplified to `y`
 --> RUF065.py:5:11
  |
3 | result1 = x | x
4 | y = 10
5 | result2 = y & y
  |           ^^^^^
6 | z = 15
7 | result3 = z ^ z
  |
help: Replace with `y`

RUF065 Binary operation `^` between a value and itself can be simplified to `0`
 --> RUF065.py:7:11
  |
5 | result2 = y & y
6 | z = 15
7 | result3 = z ^ z
  |           ^^^^^
8 | a = 20
9 | result4 = a - a
  |
help: Replace with `0`

RUF065 Binary operation `-` between a value and itself can be simplified to `0`
  --> RUF065.py:9:11
   |
 7 | result3 = z ^ z
 8 | a = 20
 9 | result4 = a - a
   |           ^^^^^
10 | b = 25
11 | result5 = b / b
   |
help: Replace with `0`

RUF065 Binary operation `/` between a value and itself can be simplified to `1`
  --> RUF065.py:11:11
   |
 9 | result4 = a - a
10 | b = 25
11 | result5 = b / b
   |           ^^^^^
12 | c = 30
13 | result6 = c // c
   |
help: Replace with `1`

RUF065 Binary operation `//` between a value and itself can be simplified to `1`
  --> RUF065.py:13:11
   |
11 | result5 = b / b
12 | c = 30
13 | result6 = c // c
   |           ^^^^^^
14 | d = 35
15 | result7 = d % d
   |
help: Replace with `1`

RUF065 Binary operation `&` between a value and itself can be simplified to `value`
  --> RUF065.py:20:9
   |
18 | value = 42
19 | test1 = value | value
20 | test2 = value & value
   |         ^^^^^^^^^^^^^
21 | test3 = value ^ value
22 | test4 = value - value
   |
help: Replace with `value`

RUF065 Binary operation `^` between a value and itself can be simplified to `0`
  --> RUF065.py:21:9
   |
19 | test1 = value | value
20 | test2 = value & value
21 | test3 = value ^ value
   |         ^^^^^^^^^^^^^
22 | test4 = value - value
23 | test5 = value / value
   |
help: Replace with `0`

RUF065 Binary operation `-` between a value and itself can be simplified to `0`
  --> RUF065.py:22:9
   |
20 | test2 = value & value
21 | test3 = value ^ value
22 | test4 = value - value
   |         ^^^^^^^^^^^^^
23 | test5 = value / value
24 | test6 = value // value
   |
help: Replace with `0`

RUF065 Binary operation `/` between a value and itself can be simplified to `1`
  --> RUF065.py:23:9
   |
21 | test3 = value ^ value
22 | test4 = value - value
23 | test5 = value / value
   |         ^^^^^^^^^^^^^
24 | test6 = value // value
25 | test7 = value % value
   |
help: Replace with `1`

RUF065 Binary operation `//` between a value and itself can be simplified to `1`
  --> RUF065.py:24:9
   |
22 | test4 = value - value
23 | test5 = value / value
24 | test6 = value // value
   |         ^^^^^^^^^^^^^^
25 | test7 = value % value
   |
help: Replace with `1`

RUF065 Binary operation `&` between a value and itself can be simplified to `y * 2`
  --> RUF065.py:29:15
   |
27 | # Complex expressions
28 | complex_expr = (x + 1) | (x + 1)
29 | complex_and = (y * 2) & (y * 2)
   |               ^^^^^^^^^^^^^^^^^
30 | complex_xor = (z - 3) ^ (z - 3)
31 | complex_sub = (a + b) - (a + b)
   |
help: Replace with `y * 2`

RUF065 Binary operation `^` between a value and itself can be simplified to `0`
  --> RUF065.py:30:15
   |
28 | complex_expr = (x + 1) | (x + 1)
29 | complex_and = (y * 2) & (y * 2)
30 | complex_xor = (z - 3) ^ (z - 3)
   |               ^^^^^^^^^^^^^^^^^
31 | complex_sub = (a + b) - (a + b)
32 | complex_div = (c * d) / (c * d)
   |
help: Replace with `0`

RUF065 Binary operation `-` between a value and itself can be simplified to `0`
  --> RUF065.py:31:15
   |
29 | complex_and = (y * 2) & (y * 2)
30 | complex_xor = (z - 3) ^ (z - 3)
31 | complex_sub = (a + b) - (a + b)
   |               ^^^^^^^^^^^^^^^^^
32 | complex_div = (c * d) / (c * d)
33 | complex_floor = (value + 1) // (value + 1)
   |
help: Replace with `0`

RUF065 Binary operation `/` between a value and itself can be simplified to `1`
  --> RUF065.py:32:15
   |
30 | complex_xor = (z - 3) ^ (z - 3)
31 | complex_sub = (a + b) - (a + b)
32 | complex_div = (c * d) / (c * d)
   |               ^^^^^^^^^^^^^^^^^
33 | complex_floor = (value + 1) // (value + 1)
34 | complex_mod = (x + y) % (x + y)
   |
help: Replace with `1`

RUF065 Binary operation `//` between a value and itself can be simplified to `1`
  --> RUF065.py:33:17
   |
31 | complex_sub = (a + b) - (a + b)
32 | complex_div = (c * d) / (c * d)
33 | complex_floor = (value + 1) // (value + 1)
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
34 | complex_mod = (x + y) % (x + y)
   |
help: Replace with `1`

RUF065 Binary operation `&` between a value and itself can be simplified to `10`
  --> RUF065.py:38:15
   |
36 | # Literals
37 | literal_or = 5 | 5
38 | literal_and = 10 & 10
   |               ^^^^^^^
39 | literal_xor = 15 ^ 15
40 | literal_sub = 20 - 20
   |
help: Replace with `10`

RUF065 Binary operation `^` between a value and itself can be simplified to `0`
  --> RUF065.py:39:15
   |
37 | literal_or = 5 | 5
38 | literal_and = 10 & 10
39 | literal_xor = 15 ^ 15
   |               ^^^^^^^
40 | literal_sub = 20 - 20
41 | literal_div = 25 / 25
   |
help: Replace with `0`

RUF065 Binary operation `-` between a value and itself can be simplified to `0`
  --> RUF065.py:40:15
   |
38 | literal_and = 10 & 10
39 | literal_xor = 15 ^ 15
40 | literal_sub = 20 - 20
   |               ^^^^^^^
41 | literal_div = 25 / 25
42 | literal_floor = 30 // 30
   |
help: Replace with `0`

RUF065 Binary operation `/` between a value and itself can be simplified to `1`
  --> RUF065.py:41:15
   |
39 | literal_xor = 15 ^ 15
40 | literal_sub = 20 - 20
41 | literal_div = 25 / 25
   |               ^^^^^^^
42 | literal_floor = 30 // 30
43 | literal_mod = 35 % 35
   |
help: Replace with `1`

RUF065 Binary operation `//` between a value and itself can be simplified to `1`
  --> RUF065.py:42:17
   |
40 | literal_sub = 20 - 20
41 | literal_div = 25 / 25
42 | literal_floor = 30 // 30
   |                 ^^^^^^^^
43 | literal_mod = 35 % 35
   |
help: Replace with `1`

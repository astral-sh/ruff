---
source: crates/ruff_linter/src/rules/ruff/mod.rs
---
RUF021.py:12:10: RUF021 [*] Parenthesize `a and b` expressions when chaining `and` and `or` together, to make the precedence clear
   |
11 | a, b, c = 1, 0, 2
12 | x = a or b and c  # RUF021: => `a or (b and c)`
   |          ^^^^^^^ RUF021
13 | x = a or b and c  # looooooooooooong comment but not long enough to prevent an autofix
14 | x = a or b and c  # looooooooong comment to prevent an autofix (line would be too long)
   |
   = help: Put parentheses around the `and` subexpression inside the `or` expression

ℹ Safe fix
9  9  | # as part of a chain.
10 10 | 
11 11 | a, b, c = 1, 0, 2
12    |-x = a or b and c  # RUF021: => `a or (b and c)`
   12 |+x = a or (b and c)  # RUF021: => `a or (b and c)`
13 13 | x = a or b and c  # looooooooooooong comment but not long enough to prevent an autofix
14 14 | x = a or b and c  # looooooooong comment to prevent an autofix (line would be too long)
15 15 | 

RUF021.py:13:10: RUF021 [*] Parenthesize `a and b` expressions when chaining `and` and `or` together, to make the precedence clear
   |
11 | a, b, c = 1, 0, 2
12 | x = a or b and c  # RUF021: => `a or (b and c)`
13 | x = a or b and c  # looooooooooooong comment but not long enough to prevent an autofix
   |          ^^^^^^^ RUF021
14 | x = a or b and c  # looooooooong comment to prevent an autofix (line would be too long)
   |
   = help: Put parentheses around the `and` subexpression inside the `or` expression

ℹ Safe fix
10 10 | 
11 11 | a, b, c = 1, 0, 2
12 12 | x = a or b and c  # RUF021: => `a or (b and c)`
13    |-x = a or b and c  # looooooooooooong comment but not long enough to prevent an autofix
   13 |+x = a or (b and c)  # looooooooooooong comment but not long enough to prevent an autofix
14 14 | x = a or b and c  # looooooooong comment to prevent an autofix (line would be too long)
15 15 | 
16 16 | a, b, c = 0, 1, 2

RUF021.py:14:10: RUF021 Parenthesize `a and b` expressions when chaining `and` and `or` together, to make the precedence clear
   |
12 | x = a or b and c  # RUF021: => `a or (b and c)`
13 | x = a or b and c  # looooooooooooong comment but not long enough to prevent an autofix
14 | x = a or b and c  # looooooooong comment to prevent an autofix (line would be too long)
   |          ^^^^^^^ RUF021
15 | 
16 | a, b, c = 0, 1, 2
   |
   = help: Put parentheses around the `and` subexpression inside the `or` expression

RUF021.py:17:5: RUF021 [*] Parenthesize `a and b` expressions when chaining `and` and `or` together, to make the precedence clear
   |
16 | a, b, c = 0, 1, 2
17 | y = a and b or c  # RUF021: => `(a and b) or c`
   |     ^^^^^^^ RUF021
18 | 
19 | a, b, c, d = 1, 2, 0, 3
   |
   = help: Put parentheses around the `and` subexpression inside the `or` expression

ℹ Safe fix
14 14 | x = a or b and c  # looooooooong comment to prevent an autofix (line would be too long)
15 15 | 
16 16 | a, b, c = 0, 1, 2
17    |-y = a and b or c  # RUF021: => `(a and b) or c`
   17 |+y = (a and b) or c  # RUF021: => `(a and b) or c`
18 18 | 
19 19 | a, b, c, d = 1, 2, 0, 3
20 20 | if a or b or c and d:  # RUF021: => `a or b or (c and d)`

RUF021.py:20:14: RUF021 [*] Parenthesize `a and b` expressions when chaining `and` and `or` together, to make the precedence clear
   |
19 | a, b, c, d = 1, 2, 0, 3
20 | if a or b or c and d:  # RUF021: => `a or b or (c and d)`
   |              ^^^^^^^ RUF021
21 |     pass
   |
   = help: Put parentheses around the `and` subexpression inside the `or` expression

ℹ Safe fix
17 17 | y = a and b or c  # RUF021: => `(a and b) or c`
18 18 | 
19 19 | a, b, c, d = 1, 2, 0, 3
20    |-if a or b or c and d:  # RUF021: => `a or b or (c and d)`
   20 |+if a or b or (c and d):  # RUF021: => `a or b or (c and d)`
21 21 |     pass
22 22 | 
23 23 | a, b, c, d = 0, 0, 2, 3

RUF021.py:27:11: RUF021 [*] Parenthesize `a and b` expressions when chaining `and` and `or` together, to make the precedence clear
   |
25 | if bool():
26 |     pass
27 | elif a or b and c or d:  # RUF021: => `a or (b and c) or d`
   |           ^^^^^^^ RUF021
28 |     pass
   |
   = help: Put parentheses around the `and` subexpression inside the `or` expression

ℹ Safe fix
24 24 | 
25 25 | if bool():
26 26 |     pass
27    |-elif a or b and c or d:  # RUF021: => `a or (b and c) or d`
   27 |+elif a or (b and c) or d:  # RUF021: => `a or (b and c) or d`
28 28 |     pass
29 29 | 
30 30 | a, b, c, d = 0, 1, 0, 2

RUF021.py:31:7: RUF021 [*] Parenthesize `a and b` expressions when chaining `and` and `or` together, to make the precedence clear
   |
30 | a, b, c, d = 0, 1, 0, 2
31 | while a and b or c and d:  # RUF021: => `(and b) or (c and d)`
   |       ^^^^^^^ RUF021
32 |     pass
   |
   = help: Put parentheses around the `and` subexpression inside the `or` expression

ℹ Safe fix
28 28 |     pass
29 29 | 
30 30 | a, b, c, d = 0, 1, 0, 2
31    |-while a and b or c and d:  # RUF021: => `(and b) or (c and d)`
   31 |+while (a and b) or c and d:  # RUF021: => `(and b) or (c and d)`
32 32 |     pass
33 33 | 
34 34 | b, c, d, e = 2, 3, 0, 4

RUF021.py:31:18: RUF021 [*] Parenthesize `a and b` expressions when chaining `and` and `or` together, to make the precedence clear
   |
30 | a, b, c, d = 0, 1, 0, 2
31 | while a and b or c and d:  # RUF021: => `(and b) or (c and d)`
   |                  ^^^^^^^ RUF021
32 |     pass
   |
   = help: Put parentheses around the `and` subexpression inside the `or` expression

ℹ Safe fix
28 28 |     pass
29 29 | 
30 30 | a, b, c, d = 0, 1, 0, 2
31    |-while a and b or c and d:  # RUF021: => `(and b) or (c and d)`
   31 |+while a and b or (c and d):  # RUF021: => `(and b) or (c and d)`
32 32 |     pass
33 33 | 
34 34 | b, c, d, e = 2, 3, 0, 4

RUF021.py:36:44: RUF021 [*] Parenthesize `a and b` expressions when chaining `and` and `or` together, to make the precedence clear
   |
34 | b, c, d, e = 2, 3, 0, 4
35 | # RUF021: => `a or b or c or (d and e)`:
36 | z = [a for a in range(5) if a or b or c or d and e]
   |                                            ^^^^^^^ RUF021
37 | 
38 | a, b, c, d = 0, 1, 3, 0
   |
   = help: Put parentheses around the `and` subexpression inside the `or` expression

ℹ Safe fix
33 33 | 
34 34 | b, c, d, e = 2, 3, 0, 4
35 35 | # RUF021: => `a or b or c or (d and e)`:
36    |-z = [a for a in range(5) if a or b or c or d and e]
   36 |+z = [a for a in range(5) if a or b or c or (d and e)]
37 37 | 
38 38 | a, b, c, d = 0, 1, 3, 0
39 39 | assert not a and b or c or d  # RUF021: => `(not a and b) or c or d`

RUF021.py:39:8: RUF021 [*] Parenthesize `a and b` expressions when chaining `and` and `or` together, to make the precedence clear
   |
38 | a, b, c, d = 0, 1, 3, 0
39 | assert not a and b or c or d  # RUF021: => `(not a and b) or c or d`
   |        ^^^^^^^^^^^ RUF021
40 | 
41 | if (not a) and b or c or d:  # RUF021: => `((not a) and b) or c or d`
   |
   = help: Put parentheses around the `and` subexpression inside the `or` expression

ℹ Safe fix
36 36 | z = [a for a in range(5) if a or b or c or d and e]
37 37 | 
38 38 | a, b, c, d = 0, 1, 3, 0
39    |-assert not a and b or c or d  # RUF021: => `(not a and b) or c or d`
   39 |+assert (not a and b) or c or d  # RUF021: => `(not a and b) or c or d`
40 40 | 
41 41 | if (not a) and b or c or d:  # RUF021: => `((not a) and b) or c or d`
42 42 |     if (not a and b) or c or d:  # OK

RUF021.py:41:4: RUF021 [*] Parenthesize `a and b` expressions when chaining `and` and `or` together, to make the precedence clear
   |
39 | assert not a and b or c or d  # RUF021: => `(not a and b) or c or d`
40 | 
41 | if (not a) and b or c or d:  # RUF021: => `((not a) and b) or c or d`
   |    ^^^^^^^^^^^^^ RUF021
42 |     if (not a and b) or c or d:  # OK
43 |         pass
   |
   = help: Put parentheses around the `and` subexpression inside the `or` expression

ℹ Safe fix
38 38 | a, b, c, d = 0, 1, 3, 0
39 39 | assert not a and b or c or d  # RUF021: => `(not a and b) or c or d`
40 40 | 
41    |-if (not a) and b or c or d:  # RUF021: => `((not a) and b) or c or d`
   41 |+if ((not a) and b) or c or d:  # RUF021: => `((not a) and b) or c or d`
42 42 |     if (not a and b) or c or d:  # OK
43 43 |         pass
44 44 | 



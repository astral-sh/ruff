---
source: crates/ruff_linter/src/rules/ruff/mod.rs
---
RUF039_concat.py:5:5: RUF039 [*] First argument to `re.compile()` is not raw string
  |
4 | re.compile(
5 |     'implicit'
  |     ^^^^^^^^^^ RUF039
6 |     'concatenation'
7 | )
  |
  = help: Replace with raw string

ℹ Safe fix
2 2 | 
3 3 | 
4 4 | re.compile(
5   |-    'implicit'
  5 |+    r'implicit'
6 6 |     'concatenation'
7 7 | )
8 8 | re.findall(

RUF039_concat.py:6:5: RUF039 [*] First argument to `re.compile()` is not raw string
  |
4 | re.compile(
5 |     'implicit'
6 |     'concatenation'
  |     ^^^^^^^^^^^^^^^ RUF039
7 | )
8 | re.findall(
  |
  = help: Replace with raw string

ℹ Safe fix
3 3 | 
4 4 | re.compile(
5 5 |     'implicit'
6   |-    'concatenation'
  6 |+    r'concatenation'
7 7 | )
8 8 | re.findall(
9 9 |     r'''

RUF039_concat.py:12:5: RUF039 [*] First argument to `re.findall()` is not raw string
   |
10 |       multiline
11 |       '''
12 | /     """
13 | |     concatenation
14 | |     """
   | |_______^ RUF039
15 |   )
16 |   re.finditer(
   |
   = help: Replace with raw string

ℹ Safe fix
9  9  |     r'''
10 10 |     multiline
11 11 |     '''
12    |-    """
   12 |+    r"""
13 13 |     concatenation
14 14 |     """
15 15 | )

RUF039_concat.py:26:5: RUF039 [*] First argument to `re.match()` is not raw bytes literal
   |
24 | )
25 | re.match(
26 |     b'reak'
   |     ^^^^^^^ RUF039
27 |     br'eak'
28 | )
   |
   = help: Replace with raw bytes literal

ℹ Safe fix
23 23 |     f'much?'
24 24 | )
25 25 | re.match(
26    |-    b'reak'
   26 |+    rb'reak'
27 27 |     br'eak'
28 28 | )
29 29 | re.search(

RUF039_concat.py:30:8: RUF039 First argument to `re.search()` is not raw string
   |
28 | )
29 | re.search(
30 |     r''u''
   |        ^^^ RUF039
31 |     '''okay?'''
32 | )
   |
   = help: Replace with raw string

RUF039_concat.py:31:5: RUF039 [*] First argument to `re.search()` is not raw string
   |
29 | re.search(
30 |     r''u''
31 |     '''okay?'''
   |     ^^^^^^^^^^^ RUF039
32 | )
33 | re.split(''U"""w"""U'')
   |
   = help: Replace with raw string

ℹ Safe fix
28 28 | )
29 29 | re.search(
30 30 |     r''u''
31    |-    '''okay?'''
   31 |+    r'''okay?'''
32 32 | )
33 33 | re.split(''U"""w"""U'')
34 34 | re.sub(

RUF039_concat.py:33:10: RUF039 [*] First argument to `re.split()` is not raw string
   |
31 |     '''okay?'''
32 | )
33 | re.split(''U"""w"""U'')
   |          ^^ RUF039
34 | re.sub(
35 |     "I''m o"
   |
   = help: Replace with raw string

ℹ Safe fix
30 30 |     r''u''
31 31 |     '''okay?'''
32 32 | )
33    |-re.split(''U"""w"""U'')
   33 |+re.split(r''U"""w"""U'')
34 34 | re.sub(
35 35 |     "I''m o"
36 36 |     'utta ideas'

RUF039_concat.py:33:12: RUF039 First argument to `re.split()` is not raw string
   |
31 |     '''okay?'''
32 | )
33 | re.split(''U"""w"""U'')
   |            ^^^^^^^^ RUF039
34 | re.sub(
35 |     "I''m o"
   |
   = help: Replace with raw string

RUF039_concat.py:33:20: RUF039 First argument to `re.split()` is not raw string
   |
31 |     '''okay?'''
32 | )
33 | re.split(''U"""w"""U'')
   |                    ^^^ RUF039
34 | re.sub(
35 |     "I''m o"
   |
   = help: Replace with raw string

RUF039_concat.py:35:5: RUF039 [*] First argument to `re.sub()` is not raw string
   |
33 | re.split(''U"""w"""U'')
34 | re.sub(
35 |     "I''m o"
   |     ^^^^^^^^ RUF039
36 |     'utta ideas'
37 | )
   |
   = help: Replace with raw string

ℹ Safe fix
32 32 | )
33 33 | re.split(''U"""w"""U'')
34 34 | re.sub(
35    |-    "I''m o"
   35 |+    r"I''m o"
36 36 |     'utta ideas'
37 37 | )
38 38 | re.subn("()"r' am I'"??")

RUF039_concat.py:36:5: RUF039 [*] First argument to `re.sub()` is not raw string
   |
34 | re.sub(
35 |     "I''m o"
36 |     'utta ideas'
   |     ^^^^^^^^^^^^ RUF039
37 | )
38 | re.subn("()"r' am I'"??")
   |
   = help: Replace with raw string

ℹ Safe fix
33 33 | re.split(''U"""w"""U'')
34 34 | re.sub(
35 35 |     "I''m o"
36    |-    'utta ideas'
   36 |+    r'utta ideas'
37 37 | )
38 38 | re.subn("()"r' am I'"??")
39 39 | 

RUF039_concat.py:38:9: RUF039 [*] First argument to `re.subn()` is not raw string
   |
36 |     'utta ideas'
37 | )
38 | re.subn("()"r' am I'"??")
   |         ^^^^ RUF039
   |
   = help: Replace with raw string

ℹ Safe fix
35 35 |     "I''m o"
36 36 |     'utta ideas'
37 37 | )
38    |-re.subn("()"r' am I'"??")
   38 |+re.subn(r"()"r' am I'"??")
39 39 | 
40 40 | 
41 41 | import regex

RUF039_concat.py:38:21: RUF039 [*] First argument to `re.subn()` is not raw string
   |
36 |     'utta ideas'
37 | )
38 | re.subn("()"r' am I'"??")
   |                     ^^^^ RUF039
   |
   = help: Replace with raw string

ℹ Safe fix
35 35 |     "I''m o"
36 36 |     'utta ideas'
37 37 | )
38    |-re.subn("()"r' am I'"??")
   38 |+re.subn("()"r' am I'r"??")
39 39 | 
40 40 | 
41 41 | import regex

RUF039_concat.py:45:5: RUF039 [*] First argument to `regex.compile()` is not raw string
   |
44 | regex.compile(
45 |     'implicit'
   |     ^^^^^^^^^^ RUF039
46 |     'concatenation'
47 | )
   |
   = help: Replace with raw string

ℹ Safe fix
42 42 | 
43 43 | 
44 44 | regex.compile(
45    |-    'implicit'
   45 |+    r'implicit'
46 46 |     'concatenation'
47 47 | )
48 48 | regex.findall(

RUF039_concat.py:46:5: RUF039 [*] First argument to `regex.compile()` is not raw string
   |
44 | regex.compile(
45 |     'implicit'
46 |     'concatenation'
   |     ^^^^^^^^^^^^^^^ RUF039
47 | )
48 | regex.findall(
   |
   = help: Replace with raw string

ℹ Safe fix
43 43 | 
44 44 | regex.compile(
45 45 |     'implicit'
46    |-    'concatenation'
   46 |+    r'concatenation'
47 47 | )
48 48 | regex.findall(
49 49 |     r'''

RUF039_concat.py:52:5: RUF039 [*] First argument to `regex.findall()` is not raw string
   |
50 |       multiline
51 |       '''
52 | /     """
53 | |     concatenation
54 | |     """
   | |_______^ RUF039
55 |   )
56 |   regex.finditer(
   |
   = help: Replace with raw string

ℹ Safe fix
49 49 |     r'''
50 50 |     multiline
51 51 |     '''
52    |-    """
   52 |+    r"""
53 53 |     concatenation
54 54 |     """
55 55 | )

RUF039_concat.py:66:5: RUF039 [*] First argument to `regex.match()` is not raw bytes literal
   |
64 | )
65 | regex.match(
66 |     b'reak'
   |     ^^^^^^^ RUF039
67 |     br'eak'
68 | )
   |
   = help: Replace with raw bytes literal

ℹ Safe fix
63 63 |     f'much?'
64 64 | )
65 65 | regex.match(
66    |-    b'reak'
   66 |+    rb'reak'
67 67 |     br'eak'
68 68 | )
69 69 | regex.search(

RUF039_concat.py:70:8: RUF039 First argument to `regex.search()` is not raw string
   |
68 | )
69 | regex.search(
70 |     r''u''
   |        ^^^ RUF039
71 |     '''okay?'''
72 | )
   |
   = help: Replace with raw string

RUF039_concat.py:71:5: RUF039 [*] First argument to `regex.search()` is not raw string
   |
69 | regex.search(
70 |     r''u''
71 |     '''okay?'''
   |     ^^^^^^^^^^^ RUF039
72 | )
73 | regex.split(''U"""w"""U'')
   |
   = help: Replace with raw string

ℹ Safe fix
68 68 | )
69 69 | regex.search(
70 70 |     r''u''
71    |-    '''okay?'''
   71 |+    r'''okay?'''
72 72 | )
73 73 | regex.split(''U"""w"""U'')
74 74 | regex.sub(

RUF039_concat.py:73:13: RUF039 [*] First argument to `regex.split()` is not raw string
   |
71 |     '''okay?'''
72 | )
73 | regex.split(''U"""w"""U'')
   |             ^^ RUF039
74 | regex.sub(
75 |     "I''m o"
   |
   = help: Replace with raw string

ℹ Safe fix
70 70 |     r''u''
71 71 |     '''okay?'''
72 72 | )
73    |-regex.split(''U"""w"""U'')
   73 |+regex.split(r''U"""w"""U'')
74 74 | regex.sub(
75 75 |     "I''m o"
76 76 |     'utta ideas'

RUF039_concat.py:73:15: RUF039 First argument to `regex.split()` is not raw string
   |
71 |     '''okay?'''
72 | )
73 | regex.split(''U"""w"""U'')
   |               ^^^^^^^^ RUF039
74 | regex.sub(
75 |     "I''m o"
   |
   = help: Replace with raw string

RUF039_concat.py:73:23: RUF039 First argument to `regex.split()` is not raw string
   |
71 |     '''okay?'''
72 | )
73 | regex.split(''U"""w"""U'')
   |                       ^^^ RUF039
74 | regex.sub(
75 |     "I''m o"
   |
   = help: Replace with raw string

RUF039_concat.py:75:5: RUF039 [*] First argument to `regex.sub()` is not raw string
   |
73 | regex.split(''U"""w"""U'')
74 | regex.sub(
75 |     "I''m o"
   |     ^^^^^^^^ RUF039
76 |     'utta ideas'
77 | )
   |
   = help: Replace with raw string

ℹ Safe fix
72 72 | )
73 73 | regex.split(''U"""w"""U'')
74 74 | regex.sub(
75    |-    "I''m o"
   75 |+    r"I''m o"
76 76 |     'utta ideas'
77 77 | )
78 78 | regex.subn("()"r' am I'"??")

RUF039_concat.py:76:5: RUF039 [*] First argument to `regex.sub()` is not raw string
   |
74 | regex.sub(
75 |     "I''m o"
76 |     'utta ideas'
   |     ^^^^^^^^^^^^ RUF039
77 | )
78 | regex.subn("()"r' am I'"??")
   |
   = help: Replace with raw string

ℹ Safe fix
73 73 | regex.split(''U"""w"""U'')
74 74 | regex.sub(
75 75 |     "I''m o"
76    |-    'utta ideas'
   76 |+    r'utta ideas'
77 77 | )
78 78 | regex.subn("()"r' am I'"??")
79 79 | 

RUF039_concat.py:78:12: RUF039 [*] First argument to `regex.subn()` is not raw string
   |
76 |     'utta ideas'
77 | )
78 | regex.subn("()"r' am I'"??")
   |            ^^^^ RUF039
   |
   = help: Replace with raw string

ℹ Safe fix
75 75 |     "I''m o"
76 76 |     'utta ideas'
77 77 | )
78    |-regex.subn("()"r' am I'"??")
   78 |+regex.subn(r"()"r' am I'"??")
79 79 | 
80 80 | 
81 81 | regex.template(

RUF039_concat.py:78:24: RUF039 [*] First argument to `regex.subn()` is not raw string
   |
76 |     'utta ideas'
77 | )
78 | regex.subn("()"r' am I'"??")
   |                        ^^^^ RUF039
   |
   = help: Replace with raw string

ℹ Safe fix
75 75 |     "I''m o"
76 76 |     'utta ideas'
77 77 | )
78    |-regex.subn("()"r' am I'"??")
   78 |+regex.subn("()"r' am I'r"??")
79 79 | 
80 80 | 
81 81 | regex.template(

RUF039_concat.py:98:5: RUF039 [*] First argument to `re.compile()` is not raw string
    |
 96 | # https://github.com/astral-sh/ruff/issues/16713
 97 | re.compile(
 98 |     "["
    |     ^^^ RUF039
 99 |     "\U0001F600-\U0001F64F"  # emoticons
100 |     "\U0001F300-\U0001F5FF"  # symbols & pictographs
    |
    = help: Replace with raw string

ℹ Safe fix
95 95 | 
96 96 | # https://github.com/astral-sh/ruff/issues/16713
97 97 | re.compile(
98    |-    "["
   98 |+    r"["
99 99 |     "\U0001F600-\U0001F64F"  # emoticons
100 100 |     "\U0001F300-\U0001F5FF"  # symbols & pictographs
101 101 |     "\U0001F680-\U0001F6FF"  # transport & map symbols

RUF039_concat.py:99:5: RUF039 [*] First argument to `re.compile()` is not raw string
    |
 97 | re.compile(
 98 |     "["
 99 |     "\U0001F600-\U0001F64F"  # emoticons
    |     ^^^^^^^^^^^^^^^^^^^^^^^ RUF039
100 |     "\U0001F300-\U0001F5FF"  # symbols & pictographs
101 |     "\U0001F680-\U0001F6FF"  # transport & map symbols
    |
    = help: Replace with raw string

ℹ Unsafe fix
96  96  | # https://github.com/astral-sh/ruff/issues/16713
97  97  | re.compile(
98  98  |     "["
99      |-    "\U0001F600-\U0001F64F"  # emoticons
    99  |+    r"\U0001F600-\U0001F64F"  # emoticons
100 100 |     "\U0001F300-\U0001F5FF"  # symbols & pictographs
101 101 |     "\U0001F680-\U0001F6FF"  # transport & map symbols
102 102 |     "\U0001F1E0-\U0001F1FF"  # flags (iOS)

RUF039_concat.py:100:5: RUF039 [*] First argument to `re.compile()` is not raw string
    |
 98 |     "["
 99 |     "\U0001F600-\U0001F64F"  # emoticons
100 |     "\U0001F300-\U0001F5FF"  # symbols & pictographs
    |     ^^^^^^^^^^^^^^^^^^^^^^^ RUF039
101 |     "\U0001F680-\U0001F6FF"  # transport & map symbols
102 |     "\U0001F1E0-\U0001F1FF"  # flags (iOS)
    |
    = help: Replace with raw string

ℹ Unsafe fix
97  97  | re.compile(
98  98  |     "["
99  99  |     "\U0001F600-\U0001F64F"  # emoticons
100     |-    "\U0001F300-\U0001F5FF"  # symbols & pictographs
    100 |+    r"\U0001F300-\U0001F5FF"  # symbols & pictographs
101 101 |     "\U0001F680-\U0001F6FF"  # transport & map symbols
102 102 |     "\U0001F1E0-\U0001F1FF"  # flags (iOS)
103 103 |     "\U00002702-\U000027B0"

RUF039_concat.py:101:5: RUF039 [*] First argument to `re.compile()` is not raw string
    |
 99 |     "\U0001F600-\U0001F64F"  # emoticons
100 |     "\U0001F300-\U0001F5FF"  # symbols & pictographs
101 |     "\U0001F680-\U0001F6FF"  # transport & map symbols
    |     ^^^^^^^^^^^^^^^^^^^^^^^ RUF039
102 |     "\U0001F1E0-\U0001F1FF"  # flags (iOS)
103 |     "\U00002702-\U000027B0"
    |
    = help: Replace with raw string

ℹ Unsafe fix
98  98  |     "["
99  99  |     "\U0001F600-\U0001F64F"  # emoticons
100 100 |     "\U0001F300-\U0001F5FF"  # symbols & pictographs
101     |-    "\U0001F680-\U0001F6FF"  # transport & map symbols
    101 |+    r"\U0001F680-\U0001F6FF"  # transport & map symbols
102 102 |     "\U0001F1E0-\U0001F1FF"  # flags (iOS)
103 103 |     "\U00002702-\U000027B0"
104 104 |     "\U000024C2-\U0001F251"

RUF039_concat.py:102:5: RUF039 [*] First argument to `re.compile()` is not raw string
    |
100 |     "\U0001F300-\U0001F5FF"  # symbols & pictographs
101 |     "\U0001F680-\U0001F6FF"  # transport & map symbols
102 |     "\U0001F1E0-\U0001F1FF"  # flags (iOS)
    |     ^^^^^^^^^^^^^^^^^^^^^^^ RUF039
103 |     "\U00002702-\U000027B0"
104 |     "\U000024C2-\U0001F251"
    |
    = help: Replace with raw string

ℹ Unsafe fix
99  99  |     "\U0001F600-\U0001F64F"  # emoticons
100 100 |     "\U0001F300-\U0001F5FF"  # symbols & pictographs
101 101 |     "\U0001F680-\U0001F6FF"  # transport & map symbols
102     |-    "\U0001F1E0-\U0001F1FF"  # flags (iOS)
    102 |+    r"\U0001F1E0-\U0001F1FF"  # flags (iOS)
103 103 |     "\U00002702-\U000027B0"
104 104 |     "\U000024C2-\U0001F251"
105 105 |     "\u200d"  # zero width joiner

RUF039_concat.py:103:5: RUF039 [*] First argument to `re.compile()` is not raw string
    |
101 |     "\U0001F680-\U0001F6FF"  # transport & map symbols
102 |     "\U0001F1E0-\U0001F1FF"  # flags (iOS)
103 |     "\U00002702-\U000027B0"
    |     ^^^^^^^^^^^^^^^^^^^^^^^ RUF039
104 |     "\U000024C2-\U0001F251"
105 |     "\u200d"  # zero width joiner
    |
    = help: Replace with raw string

ℹ Unsafe fix
100 100 |     "\U0001F300-\U0001F5FF"  # symbols & pictographs
101 101 |     "\U0001F680-\U0001F6FF"  # transport & map symbols
102 102 |     "\U0001F1E0-\U0001F1FF"  # flags (iOS)
103     |-    "\U00002702-\U000027B0"
    103 |+    r"\U00002702-\U000027B0"
104 104 |     "\U000024C2-\U0001F251"
105 105 |     "\u200d"  # zero width joiner
106 106 |     "\u200c"  # zero width non-joiner

RUF039_concat.py:104:5: RUF039 [*] First argument to `re.compile()` is not raw string
    |
102 |     "\U0001F1E0-\U0001F1FF"  # flags (iOS)
103 |     "\U00002702-\U000027B0"
104 |     "\U000024C2-\U0001F251"
    |     ^^^^^^^^^^^^^^^^^^^^^^^ RUF039
105 |     "\u200d"  # zero width joiner
106 |     "\u200c"  # zero width non-joiner
    |
    = help: Replace with raw string

ℹ Unsafe fix
101 101 |     "\U0001F680-\U0001F6FF"  # transport & map symbols
102 102 |     "\U0001F1E0-\U0001F1FF"  # flags (iOS)
103 103 |     "\U00002702-\U000027B0"
104     |-    "\U000024C2-\U0001F251"
    104 |+    r"\U000024C2-\U0001F251"
105 105 |     "\u200d"  # zero width joiner
106 106 |     "\u200c"  # zero width non-joiner
107 107 |     "\\u200c" # must not be escaped in a raw string

RUF039_concat.py:105:5: RUF039 [*] First argument to `re.compile()` is not raw string
    |
103 |     "\U00002702-\U000027B0"
104 |     "\U000024C2-\U0001F251"
105 |     "\u200d"  # zero width joiner
    |     ^^^^^^^^ RUF039
106 |     "\u200c"  # zero width non-joiner
107 |     "\\u200c" # must not be escaped in a raw string
    |
    = help: Replace with raw string

ℹ Unsafe fix
102 102 |     "\U0001F1E0-\U0001F1FF"  # flags (iOS)
103 103 |     "\U00002702-\U000027B0"
104 104 |     "\U000024C2-\U0001F251"
105     |-    "\u200d"  # zero width joiner
    105 |+    r"\u200d"  # zero width joiner
106 106 |     "\u200c"  # zero width non-joiner
107 107 |     "\\u200c" # must not be escaped in a raw string
108 108 |     "]+",

RUF039_concat.py:106:5: RUF039 [*] First argument to `re.compile()` is not raw string
    |
104 |     "\U000024C2-\U0001F251"
105 |     "\u200d"  # zero width joiner
106 |     "\u200c"  # zero width non-joiner
    |     ^^^^^^^^ RUF039
107 |     "\\u200c" # must not be escaped in a raw string
108 |     "]+",
    |
    = help: Replace with raw string

ℹ Unsafe fix
103 103 |     "\U00002702-\U000027B0"
104 104 |     "\U000024C2-\U0001F251"
105 105 |     "\u200d"  # zero width joiner
106     |-    "\u200c"  # zero width non-joiner
    106 |+    r"\u200c"  # zero width non-joiner
107 107 |     "\\u200c" # must not be escaped in a raw string
108 108 |     "]+",
109 109 |     flags=re.UNICODE,

RUF039_concat.py:107:5: RUF039 First argument to `re.compile()` is not raw string
    |
105 |     "\u200d"  # zero width joiner
106 |     "\u200c"  # zero width non-joiner
107 |     "\\u200c" # must not be escaped in a raw string
    |     ^^^^^^^^^ RUF039
108 |     "]+",
109 |     flags=re.UNICODE,
    |
    = help: Replace with raw string

RUF039_concat.py:108:5: RUF039 [*] First argument to `re.compile()` is not raw string
    |
106 |     "\u200c"  # zero width non-joiner
107 |     "\\u200c" # must not be escaped in a raw string
108 |     "]+",
    |     ^^^^ RUF039
109 |     flags=re.UNICODE,
110 | )
    |
    = help: Replace with raw string

ℹ Safe fix
105 105 |     "\u200d"  # zero width joiner
106 106 |     "\u200c"  # zero width non-joiner
107 107 |     "\\u200c" # must not be escaped in a raw string
108     |-    "]+",
    108 |+    r"]+",
109 109 |     flags=re.UNICODE,
110 110 | )

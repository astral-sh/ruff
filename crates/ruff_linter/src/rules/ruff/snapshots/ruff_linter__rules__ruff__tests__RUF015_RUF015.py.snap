---
source: crates/ruff_linter/src/rules/ruff/mod.rs
---
RUF015.py:4:1: RUF015 [*] Prefer `next(iter(x))` over single element slice
  |
3 | # RUF015
4 | list(x)[0]
  | ^^^^^^^^^^ RUF015
5 | tuple(x)[0]
6 | list(i for i in x)[0]
  |
  = help: Replace with `next(iter(x))`


RUF015.py:5:1: RUF015 [*] Prefer `next(iter(x))` over single element slice
  |
3 | # RUF015
4 | list(x)[0]
5 | tuple(x)[0]
  | ^^^^^^^^^^^ RUF015
6 | list(i for i in x)[0]
7 | [i for i in x][0]
  |
  = help: Replace with `next(iter(x))`


RUF015.py:6:1: RUF015 [*] Prefer `next(iter(x))` over single element slice
  |
4 | list(x)[0]
5 | tuple(x)[0]
6 | list(i for i in x)[0]
  | ^^^^^^^^^^^^^^^^^^^^^ RUF015
7 | [i for i in x][0]
  |
  = help: Replace with `next(iter(x))`


RUF015.py:7:1: RUF015 [*] Prefer `next(iter(x))` over single element slice
  |
5 | tuple(x)[0]
6 | list(i for i in x)[0]
7 | [i for i in x][0]
  | ^^^^^^^^^^^^^^^^^ RUF015
8 | 
9 | # OK (not indexing (solely) the first element)
  |
  = help: Replace with `next(iter(x))`


RUF015.py:29:1: RUF015 [*] Prefer `next(i + 1 for i in x)` over single element slice
   |
28 | # RUF015 (doesn't mirror the underlying list)
29 | [i + 1 for i in x][0]
   | ^^^^^^^^^^^^^^^^^^^^^ RUF015
30 | [i for i in x if i > 5][0]
31 | [(i, i + 1) for i in x][0]
   |
   = help: Replace with `next(i + 1 for i in x)`


RUF015.py:30:1: RUF015 [*] Prefer `next(i for i in x if i > 5)` over single element slice
   |
28 | # RUF015 (doesn't mirror the underlying list)
29 | [i + 1 for i in x][0]
30 | [i for i in x if i > 5][0]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF015
31 | [(i, i + 1) for i in x][0]
   |
   = help: Replace with `next(i for i in x if i > 5)`


RUF015.py:31:1: RUF015 [*] Prefer `next((i, i + 1) for i in x)` over single element slice
   |
29 | [i + 1 for i in x][0]
30 | [i for i in x if i > 5][0]
31 | [(i, i + 1) for i in x][0]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF015
32 | 
33 | # RUF015 (multiple generators)
   |
   = help: Replace with `next((i, i + 1) for i in x)`


RUF015.py:35:1: RUF015 [*] Prefer `next(i + j for i in x for j in y)` over single element slice
   |
33 | # RUF015 (multiple generators)
34 | y = range(10)
35 | [i + j for i in x for j in y][0]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF015
36 | 
37 | # RUF015
   |
   = help: Replace with `next(i + j for i in x for j in y)`


RUF015.py:38:1: RUF015 [*] Prefer `next(iter(range(10)))` over single element slice
   |
37 | # RUF015
38 | list(range(10))[0]
   | ^^^^^^^^^^^^^^^^^^ RUF015
39 | list(x.y)[0]
40 | list(x["y"])[0]
   |
   = help: Replace with `next(iter(range(10)))`


RUF015.py:39:1: RUF015 [*] Prefer `next(iter(x.y))` over single element slice
   |
37 | # RUF015
38 | list(range(10))[0]
39 | list(x.y)[0]
   | ^^^^^^^^^^^^ RUF015
40 | list(x["y"])[0]
41 | [*range(10)][0]
   |
   = help: Replace with `next(iter(x.y))`


RUF015.py:40:1: RUF015 [*] Prefer `next(iter(x["y"]))` over single element slice
   |
38 | list(range(10))[0]
39 | list(x.y)[0]
40 | list(x["y"])[0]
   | ^^^^^^^^^^^^^^^ RUF015
41 | [*range(10)][0]
42 | [*x["y"]][0]
   |
   = help: Replace with `next(iter(x["y"]))`


RUF015.py:41:1: RUF015 [*] Prefer `next(iter(range(10)))` over single element slice
   |
39 | list(x.y)[0]
40 | list(x["y"])[0]
41 | [*range(10)][0]
   | ^^^^^^^^^^^^^^^ RUF015
42 | [*x["y"]][0]
43 | [*x.y][0]
   |
   = help: Replace with `next(iter(range(10)))`


RUF015.py:42:1: RUF015 [*] Prefer `next(iter(x["y"]))` over single element slice
   |
40 | list(x["y"])[0]
41 | [*range(10)][0]
42 | [*x["y"]][0]
   | ^^^^^^^^^^^^ RUF015
43 | [*x.y][0]
44 | [* x.y][0]
   |
   = help: Replace with `next(iter(x["y"]))`


RUF015.py:43:1: RUF015 [*] Prefer `next(iter(x.y))` over single element slice
   |
41 | [*range(10)][0]
42 | [*x["y"]][0]
43 | [*x.y][0]
   | ^^^^^^^^^ RUF015
44 | [* x.y][0]
45 | [
   |
   = help: Replace with `next(iter(x.y))`


RUF015.py:44:1: RUF015 [*] Prefer `next(iter(x.y))` over single element slice
   |
42 | [*x["y"]][0]
43 | [*x.y][0]
44 | [* x.y][0]
   | ^^^^^^^^^^ RUF015
45 | [
46 |     *x.y
   |
   = help: Replace with `next(iter(x.y))`


RUF015.py:45:1: RUF015 [*] Prefer `next(iter(x.y))` over single element slice
   |
43 |   [*x.y][0]
44 |   [* x.y][0]
45 | / [
46 | |     *x.y
47 | | ][0]
   | |____^ RUF015
48 |   
49 |   # RUF015 (multi-line)
   |
   = help: Replace with `next(iter(x.y))`


RUF015.py:50:26: RUF015 [*] Prefer `next(...)` over single element slice
   |
49 |   # RUF015 (multi-line)
50 |   revision_heads_map_ast = [
   |  __________________________^
51 | |     a
52 | |     for a in revision_heads_map_ast_obj.body
53 | |     if isinstance(a, ast.Assign) and a.targets[0].id == "REVISION_HEADS_MAP"
54 | | ][0]
   | |____^ RUF015
55 |   
56 |   # RUF015 (zip)
   |
   = help: Replace with `next(...)`


RUF015.py:57:1: RUF015 [*] Prefer `next(zip(x, y))` over single element slice
   |
56 | # RUF015 (zip)
57 | list(zip(x, y))[0]
   | ^^^^^^^^^^^^^^^^^^ RUF015
58 | [*zip(x, y)][0]
   |
   = help: Replace with `next(zip(x, y))`


RUF015.py:58:1: RUF015 [*] Prefer `next(zip(x, y))` over single element slice
   |
56 | # RUF015 (zip)
57 | list(zip(x, y))[0]
58 | [*zip(x, y)][0]
   | ^^^^^^^^^^^^^^^ RUF015
59 | 
60 | # RUF015 (pop)
   |
   = help: Replace with `next(zip(x, y))`


RUF015.py:61:1: RUF015 [*] Prefer `next(iter(x))` over single element slice
   |
60 | # RUF015 (pop)
61 | list(x).pop(0)
   | ^^^^^^^^^^^^^^ RUF015
62 | [i for i in x].pop(0)
63 | list(i for i in x).pop(0)
   |
   = help: Replace with `next(iter(x))`


RUF015.py:62:1: RUF015 [*] Prefer `next(iter(x))` over single element slice
   |
60 | # RUF015 (pop)
61 | list(x).pop(0)
62 | [i for i in x].pop(0)
   | ^^^^^^^^^^^^^^^^^^^^^ RUF015
63 | list(i for i in x).pop(0)
   |
   = help: Replace with `next(iter(x))`


RUF015.py:63:1: RUF015 [*] Prefer `next(iter(x))` over single element slice
   |
61 | list(x).pop(0)
62 | [i for i in x].pop(0)
63 | list(i for i in x).pop(0)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^ RUF015
64 | 
65 | # OK
   |
   = help: Replace with `next(iter(x))`


RUF015.py:73:5: RUF015 [*] Prefer `next(iter(zip(x, y)))` over single element slice
   |
71 | def test():
72 |     zip = list  # Overwrite the builtin zip
73 |     list(zip(x, y))[0]
   |     ^^^^^^^^^^^^^^^^^^ RUF015
   |
   = help: Replace with `next(iter(zip(x, y)))`

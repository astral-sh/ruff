---
source: crates/ruff_linter/src/rules/ruff/mod.rs
---
RUF015.py:4:1: RUF015 [*] Prefer `next(iter(x))` over single element slice
  |
3 | # RUF015
4 | list(x)[0]
  | ^^^^^^^^^^ RUF015
5 | tuple(x)[0]
6 | list(i for i in x)[0]
  |
  = help: Replace with `next(iter(x))`

ℹ Suggested fix
1 1 | x = range(10)
2 2 | 
3 3 | # RUF015
4   |-list(x)[0]
  4 |+next(iter(x))
5 5 | tuple(x)[0]
6 6 | list(i for i in x)[0]
7 7 | [i for i in x][0]

RUF015.py:5:1: RUF015 [*] Prefer `next(iter(x))` over single element slice
  |
3 | # RUF015
4 | list(x)[0]
5 | tuple(x)[0]
  | ^^^^^^^^^^^ RUF015
6 | list(i for i in x)[0]
7 | [i for i in x][0]
  |
  = help: Replace with `next(iter(x))`

ℹ Suggested fix
2 2 | 
3 3 | # RUF015
4 4 | list(x)[0]
5   |-tuple(x)[0]
  5 |+next(iter(x))
6 6 | list(i for i in x)[0]
7 7 | [i for i in x][0]
8 8 | 

RUF015.py:6:1: RUF015 [*] Prefer `next(iter(x))` over single element slice
  |
4 | list(x)[0]
5 | tuple(x)[0]
6 | list(i for i in x)[0]
  | ^^^^^^^^^^^^^^^^^^^^^ RUF015
7 | [i for i in x][0]
  |
  = help: Replace with `next(iter(x))`

ℹ Suggested fix
3 3 | # RUF015
4 4 | list(x)[0]
5 5 | tuple(x)[0]
6   |-list(i for i in x)[0]
  6 |+next(iter(x))
7 7 | [i for i in x][0]
8 8 | 
9 9 | # OK (not indexing (solely) the first element)

RUF015.py:7:1: RUF015 [*] Prefer `next(iter(x))` over single element slice
  |
5 | tuple(x)[0]
6 | list(i for i in x)[0]
7 | [i for i in x][0]
  | ^^^^^^^^^^^^^^^^^ RUF015
8 | 
9 | # OK (not indexing (solely) the first element)
  |
  = help: Replace with `next(iter(x))`

ℹ Suggested fix
4 4 | list(x)[0]
5 5 | tuple(x)[0]
6 6 | list(i for i in x)[0]
7   |-[i for i in x][0]
  7 |+next(iter(x))
8 8 | 
9 9 | # OK (not indexing (solely) the first element)
10 10 | list(x)

RUF015.py:29:1: RUF015 [*] Prefer `next(i + 1 for i in x)` over single element slice
   |
28 | # RUF015 (doesn't mirror the underlying list)
29 | [i + 1 for i in x][0]
   | ^^^^^^^^^^^^^^^^^^^^^ RUF015
30 | [i for i in x if i > 5][0]
31 | [(i, i + 1) for i in x][0]
   |
   = help: Replace with `next(i + 1 for i in x)`

ℹ Suggested fix
26 26 | [i for i in x][::]
27 27 | 
28 28 | # RUF015 (doesn't mirror the underlying list)
29    |-[i + 1 for i in x][0]
   29 |+next(i + 1 for i in x)
30 30 | [i for i in x if i > 5][0]
31 31 | [(i, i + 1) for i in x][0]
32 32 | 

RUF015.py:30:1: RUF015 [*] Prefer `next(i for i in x if i > 5)` over single element slice
   |
28 | # RUF015 (doesn't mirror the underlying list)
29 | [i + 1 for i in x][0]
30 | [i for i in x if i > 5][0]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF015
31 | [(i, i + 1) for i in x][0]
   |
   = help: Replace with `next(i for i in x if i > 5)`

ℹ Suggested fix
27 27 | 
28 28 | # RUF015 (doesn't mirror the underlying list)
29 29 | [i + 1 for i in x][0]
30    |-[i for i in x if i > 5][0]
   30 |+next(i for i in x if i > 5)
31 31 | [(i, i + 1) for i in x][0]
32 32 | 
33 33 | # RUF015 (multiple generators)

RUF015.py:31:1: RUF015 [*] Prefer `next((i, i + 1) for i in x)` over single element slice
   |
29 | [i + 1 for i in x][0]
30 | [i for i in x if i > 5][0]
31 | [(i, i + 1) for i in x][0]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF015
32 | 
33 | # RUF015 (multiple generators)
   |
   = help: Replace with `next((i, i + 1) for i in x)`

ℹ Suggested fix
28 28 | # RUF015 (doesn't mirror the underlying list)
29 29 | [i + 1 for i in x][0]
30 30 | [i for i in x if i > 5][0]
31    |-[(i, i + 1) for i in x][0]
   31 |+next((i, i + 1) for i in x)
32 32 | 
33 33 | # RUF015 (multiple generators)
34 34 | y = range(10)

RUF015.py:35:1: RUF015 [*] Prefer `next(i + j for i in x for j in y)` over single element slice
   |
33 | # RUF015 (multiple generators)
34 | y = range(10)
35 | [i + j for i in x for j in y][0]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF015
36 | 
37 | # RUF015
   |
   = help: Replace with `next(i + j for i in x for j in y)`

ℹ Suggested fix
32 32 | 
33 33 | # RUF015 (multiple generators)
34 34 | y = range(10)
35    |-[i + j for i in x for j in y][0]
   35 |+next(i + j for i in x for j in y)
36 36 | 
37 37 | # RUF015
38 38 | list(range(10))[0]

RUF015.py:38:1: RUF015 [*] Prefer `next(range(10))` over single element slice
   |
37 | # RUF015
38 | list(range(10))[0]
   | ^^^^^^^^^^^^^^^^^^ RUF015
39 | list(x.y)[0]
40 | list(x["y"])[0]
   |
   = help: Replace with `next(range(10))`

ℹ Suggested fix
35 35 | [i + j for i in x for j in y][0]
36 36 | 
37 37 | # RUF015
38    |-list(range(10))[0]
   38 |+next(range(10))
39 39 | list(x.y)[0]
40 40 | list(x["y"])[0]
41 41 | [*range(10)][0]

RUF015.py:39:1: RUF015 [*] Prefer `next(iter(x.y))` over single element slice
   |
37 | # RUF015
38 | list(range(10))[0]
39 | list(x.y)[0]
   | ^^^^^^^^^^^^ RUF015
40 | list(x["y"])[0]
41 | [*range(10)][0]
   |
   = help: Replace with `next(iter(x.y))`

ℹ Suggested fix
36 36 | 
37 37 | # RUF015
38 38 | list(range(10))[0]
39    |-list(x.y)[0]
   39 |+next(iter(x.y))
40 40 | list(x["y"])[0]
41 41 | [*range(10)][0]
42 42 | [*x.y][0]

RUF015.py:40:1: RUF015 [*] Prefer `next(iter(x["y"]))` over single element slice
   |
38 | list(range(10))[0]
39 | list(x.y)[0]
40 | list(x["y"])[0]
   | ^^^^^^^^^^^^^^^ RUF015
41 | [*range(10)][0]
42 | [*x.y][0]
   |
   = help: Replace with `next(iter(x["y"]))`

ℹ Suggested fix
37 37 | # RUF015
38 38 | list(range(10))[0]
39 39 | list(x.y)[0]
40    |-list(x["y"])[0]
   40 |+next(iter(x["y"]))
41 41 | [*range(10)][0]
42 42 | [*x.y][0]
43 43 | [*x["y"]][0]

RUF015.py:41:1: RUF015 [*] Prefer `next(range(10))` over single element slice
   |
39 | list(x.y)[0]
40 | list(x["y"])[0]
41 | [*range(10)][0]
   | ^^^^^^^^^^^^^^^ RUF015
42 | [*x.y][0]
43 | [*x["y"]][0]
   |
   = help: Replace with `next(range(10))`

ℹ Suggested fix
38 38 | list(range(10))[0]
39 39 | list(x.y)[0]
40 40 | list(x["y"])[0]
41    |-[*range(10)][0]
   41 |+next(range(10))
42 42 | [*x.y][0]
43 43 | [*x["y"]][0]
44 44 | 

RUF015.py:42:1: RUF015 [*] Prefer `next(iter(x.y))` over single element slice
   |
40 | list(x["y"])[0]
41 | [*range(10)][0]
42 | [*x.y][0]
   | ^^^^^^^^^ RUF015
43 | [*x["y"]][0]
   |
   = help: Replace with `next(iter(x.y))`

ℹ Suggested fix
39 39 | list(x.y)[0]
40 40 | list(x["y"])[0]
41 41 | [*range(10)][0]
42    |-[*x.y][0]
   42 |+next(iter(x.y))
43 43 | [*x["y"]][0]
44 44 | 
45 45 | # RUF015 (multi-line)

RUF015.py:43:1: RUF015 [*] Prefer `next(iter(x["y"]))` over single element slice
   |
41 | [*range(10)][0]
42 | [*x.y][0]
43 | [*x["y"]][0]
   | ^^^^^^^^^^^^ RUF015
44 | 
45 | # RUF015 (multi-line)
   |
   = help: Replace with `next(iter(x["y"]))`

ℹ Suggested fix
40 40 | list(x["y"])[0]
41 41 | [*range(10)][0]
42 42 | [*x.y][0]
43    |-[*x["y"]][0]
   43 |+next(iter(x["y"]))
44 44 | 
45 45 | # RUF015 (multi-line)
46 46 | revision_heads_map_ast = [

RUF015.py:46:26: RUF015 [*] Prefer `next(...)` over single element slice
   |
45 |   # RUF015 (multi-line)
46 |   revision_heads_map_ast = [
   |  __________________________^
47 | |     a
48 | |     for a in revision_heads_map_ast_obj.body
49 | |     if isinstance(a, ast.Assign) and a.targets[0].id == "REVISION_HEADS_MAP"
50 | | ][0]
   | |____^ RUF015
51 |   
52 |   # RUF015 (zip)
   |
   = help: Replace with `next(...)`

ℹ Suggested fix
43 43 | [*x["y"]][0]
44 44 | 
45 45 | # RUF015 (multi-line)
46    |-revision_heads_map_ast = [
   46 |+revision_heads_map_ast = next(
47 47 |     a
48 48 |     for a in revision_heads_map_ast_obj.body
49 49 |     if isinstance(a, ast.Assign) and a.targets[0].id == "REVISION_HEADS_MAP"
50    |-][0]
   50 |+)
51 51 | 
52 52 | # RUF015 (zip)
53 53 | list(zip(x, y))[0]

RUF015.py:53:1: RUF015 [*] Prefer `next(zip(x, y))` over single element slice
   |
52 | # RUF015 (zip)
53 | list(zip(x, y))[0]
   | ^^^^^^^^^^^^^^^^^^ RUF015
54 | [*zip(x, y)][0]
   |
   = help: Replace with `next(zip(x, y))`

ℹ Suggested fix
50 50 | ][0]
51 51 | 
52 52 | # RUF015 (zip)
53    |-list(zip(x, y))[0]
   53 |+next(zip(x, y))
54 54 | [*zip(x, y)][0]
55 55 | 
56 56 | 

RUF015.py:54:1: RUF015 [*] Prefer `next(zip(x, y))` over single element slice
   |
52 | # RUF015 (zip)
53 | list(zip(x, y))[0]
54 | [*zip(x, y)][0]
   | ^^^^^^^^^^^^^^^ RUF015
   |
   = help: Replace with `next(zip(x, y))`

ℹ Suggested fix
51 51 | 
52 52 | # RUF015 (zip)
53 53 | list(zip(x, y))[0]
54    |-[*zip(x, y)][0]
   54 |+next(zip(x, y))
55 55 | 
56 56 | 
57 57 | def test():

RUF015.py:59:5: RUF015 [*] Prefer `next(iter(zip(x, y)))` over single element slice
   |
57 | def test():
58 |     zip = list  # Overwrite the builtin zip
59 |     list(zip(x, y))[0]
   |     ^^^^^^^^^^^^^^^^^^ RUF015
   |
   = help: Replace with `next(iter(zip(x, y)))`

ℹ Suggested fix
56 56 | 
57 57 | def test():
58 58 |     zip = list  # Overwrite the builtin zip
59    |-    list(zip(x, y))[0]
   59 |+    next(iter(zip(x, y)))



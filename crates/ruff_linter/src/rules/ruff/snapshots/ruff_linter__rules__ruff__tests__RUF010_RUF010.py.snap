---
source: crates/ruff_linter/src/rules/ruff/mod.rs
---
RUF010 [*] Use explicit conversion flag
  --> RUF010.py:9:4
   |
 9 | f"{str(bla)}, {repr(bla)}, {ascii(bla)}"  # RUF010
   |    ^^^^^^^^
10 |
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
   |
help: Replace with conversion flag
6  |     pass
7  | 
8  | 
   - f"{str(bla)}, {repr(bla)}, {ascii(bla)}"  # RUF010
9  + f"{bla!s}, {repr(bla)}, {ascii(bla)}"  # RUF010
10 | 
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
12 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:9:16
   |
 9 | f"{str(bla)}, {repr(bla)}, {ascii(bla)}"  # RUF010
   |                ^^^^^^^^^
10 |
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
   |
help: Replace with conversion flag
6  |     pass
7  | 
8  | 
   - f"{str(bla)}, {repr(bla)}, {ascii(bla)}"  # RUF010
9  + f"{str(bla)}, {bla!r}, {ascii(bla)}"  # RUF010
10 | 
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
12 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:9:29
   |
 9 | f"{str(bla)}, {repr(bla)}, {ascii(bla)}"  # RUF010
   |                             ^^^^^^^^^^
10 |
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
   |
help: Replace with conversion flag
6  |     pass
7  | 
8  | 
   - f"{str(bla)}, {repr(bla)}, {ascii(bla)}"  # RUF010
9  + f"{str(bla)}, {repr(bla)}, {bla!a}"  # RUF010
10 | 
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
12 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:11:4
   |
 9 | f"{str(bla)}, {repr(bla)}, {ascii(bla)}"  # RUF010
10 |
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
   |    ^^^^^^^^^^^
12 |
13 | f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
   |
help: Replace with conversion flag
8  | 
9  | f"{str(bla)}, {repr(bla)}, {ascii(bla)}"  # RUF010
10 | 
   - f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
11 + f"{d['a']!s}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
12 | 
13 | f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
14 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:11:19
   |
 9 | f"{str(bla)}, {repr(bla)}, {ascii(bla)}"  # RUF010
10 |
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
   |                   ^^^^^^^^^^^^
12 |
13 | f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
   |
help: Replace with conversion flag
8  | 
9  | f"{str(bla)}, {repr(bla)}, {ascii(bla)}"  # RUF010
10 | 
   - f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
11 + f"{str(d['a'])}, {d['b']!r}, {ascii(d['c'])}"  # RUF010
12 | 
13 | f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
14 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:11:35
   |
 9 | f"{str(bla)}, {repr(bla)}, {ascii(bla)}"  # RUF010
10 |
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
   |                                   ^^^^^^^^^^^^^
12 |
13 | f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
   |
help: Replace with conversion flag
8  | 
9  | f"{str(bla)}, {repr(bla)}, {ascii(bla)}"  # RUF010
10 | 
   - f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
11 + f"{str(d['a'])}, {repr(d['b'])}, {d['c']!a}"  # RUF010
12 | 
13 | f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
14 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:13:5
   |
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
12 |
13 | f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
   |     ^^^^^^^^
14 |
15 | f"{bla!s}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
   |
help: Replace with conversion flag
10 | 
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
12 | 
   - f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
13 + f"{bla!s}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
14 | 
15 | f"{bla!s}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
16 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:13:19
   |
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
12 |
13 | f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
   |                   ^^^^^^^^^
14 |
15 | f"{bla!s}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
   |
help: Replace with conversion flag
10 | 
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
12 | 
   - f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
13 + f"{(str(bla))}, {bla!r}, {(ascii(bla))}"  # RUF010
14 | 
15 | f"{bla!s}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
16 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:13:34
   |
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
12 |
13 | f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
   |                                  ^^^^^^^^^^
14 |
15 | f"{bla!s}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
   |
help: Replace with conversion flag
10 | 
11 | f"{str(d['a'])}, {repr(d['b'])}, {ascii(d['c'])}"  # RUF010
12 | 
   - f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
13 + f"{(str(bla))}, {(repr(bla))}, {bla!a}"  # RUF010
14 | 
15 | f"{bla!s}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
16 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:15:14
   |
13 | f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
14 |
15 | f"{bla!s}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
   |              ^^^^^^^^^
16 |
17 | f"{foo(bla)}"  # OK
   |
help: Replace with conversion flag
12 | 
13 | f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
14 | 
   - f"{bla!s}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
15 + f"{bla!s}, {bla!r}, {(ascii(bla))}"  # RUF010
16 | 
17 | f"{foo(bla)}"  # OK
18 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:15:29
   |
13 | f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
14 |
15 | f"{bla!s}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
   |                             ^^^^^^^^^^
16 |
17 | f"{foo(bla)}"  # OK
   |
help: Replace with conversion flag
12 | 
13 | f"{(str(bla))}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
14 | 
   - f"{bla!s}, {(repr(bla))}, {(ascii(bla))}"  # RUF010
15 + f"{bla!s}, {(repr(bla))}, {bla!a}"  # RUF010
16 | 
17 | f"{foo(bla)}"  # OK
18 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:35:20
   |
33 |     f"Member of tuple mismatches type at index {i}. Expected {of_shape_i}. Got "
34 |     " intermediary content "
35 |     f" that flows {repr(obj)} of type {type(obj)}.{additional_message}"  # RUF010
   |                    ^^^^^^^^^
36 | )
   |
help: Replace with conversion flag
32 | (
33 |     f"Member of tuple mismatches type at index {i}. Expected {of_shape_i}. Got "
34 |     " intermediary content "
   -     f" that flows {repr(obj)} of type {type(obj)}.{additional_message}"  # RUF010
35 +     f" that flows {obj!r} of type {type(obj)}.{additional_message}"  # RUF010
36 | )
37 | 
38 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:40:4
   |
39 | # https://github.com/astral-sh/ruff/issues/16325
40 | f"{str({})}"
   |    ^^^^^^^
41 |
42 | f"{str({} | {})}"
   |
help: Replace with conversion flag
37 | 
38 | 
39 | # https://github.com/astral-sh/ruff/issues/16325
   - f"{str({})}"
40 + f"{ {}!s}"
41 | 
42 | f"{str({} | {})}"
43 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:42:4
   |
40 | f"{str({})}"
41 |
42 | f"{str({} | {})}"
   |    ^^^^^^^^^^^^
43 |
44 | import builtins
   |
help: Replace with conversion flag
39 | # https://github.com/astral-sh/ruff/issues/16325
40 | f"{str({})}"
41 | 
   - f"{str({} | {})}"
42 + f"{ {} | {}!s}"
43 | 
44 | import builtins
45 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:46:4
   |
44 | import builtins
45 |
46 | f"{builtins.repr(1)}"
   |    ^^^^^^^^^^^^^^^^
47 |
48 | f"{repr(1)=}"
   |
help: Replace with conversion flag
43 | 
44 | import builtins
45 | 
   - f"{builtins.repr(1)}"
46 + f"{1!r}"
47 | 
48 | f"{repr(1)=}"
49 | 

RUF010 Use explicit conversion flag
  --> RUF010.py:48:4
   |
46 | f"{builtins.repr(1)}"
47 |
48 | f"{repr(1)=}"
   |    ^^^^^^^
49 |
50 | f"{repr(lambda: 1)}"
   |
help: Replace with conversion flag

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:50:4
   |
48 | f"{repr(1)=}"
49 |
50 | f"{repr(lambda: 1)}"
   |    ^^^^^^^^^^^^^^^
51 |
52 | f"{repr(x := 2)}"
   |
help: Replace with conversion flag
47 | 
48 | f"{repr(1)=}"
49 | 
   - f"{repr(lambda: 1)}"
50 + f"{(lambda: 1)!r}"
51 | 
52 | f"{repr(x := 2)}"
53 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:52:4
   |
50 | f"{repr(lambda: 1)}"
51 |
52 | f"{repr(x := 2)}"
   |    ^^^^^^^^^^^^
53 |
54 | f"{str(object=3)}"
   |
help: Replace with conversion flag
49 | 
50 | f"{repr(lambda: 1)}"
51 | 
   - f"{repr(x := 2)}"
52 + f"{(x := 2)!r}"
53 | 
54 | f"{str(object=3)}"
55 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:54:4
   |
52 | f"{repr(x := 2)}"
53 |
54 | f"{str(object=3)}"
   |    ^^^^^^^^^^^^^
55 |
56 | f"{str(x for x in [])}"
   |
help: Replace with conversion flag
51 | 
52 | f"{repr(x := 2)}"
53 | 
   - f"{str(object=3)}"
54 + f"{3!s}"
55 | 
56 | f"{str(x for x in [])}"
57 | 

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:56:4
   |
54 | f"{str(object=3)}"
55 |
56 | f"{str(x for x in [])}"
   |    ^^^^^^^^^^^^^^^^^^
57 |
58 | f"{str((x for x in []))}"
   |
help: Replace with conversion flag
53 | 
54 | f"{str(object=3)}"
55 | 
   - f"{str(x for x in [])}"
56 + f"{(x for x in [])!s}"
57 | 
58 | f"{str((x for x in []))}"

RUF010 [*] Use explicit conversion flag
  --> RUF010.py:58:4
   |
56 | f"{str(x for x in [])}"
57 |
58 | f"{str((x for x in []))}"
   |    ^^^^^^^^^^^^^^^^^^^^
   |
help: Replace with conversion flag
55 | 
56 | f"{str(x for x in [])}"
57 | 
   - f"{str((x for x in []))}"
58 + f"{(x for x in [])!s}"

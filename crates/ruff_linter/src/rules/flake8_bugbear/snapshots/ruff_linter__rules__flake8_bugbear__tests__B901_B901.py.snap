---
source: crates/ruff_linter/src/rules/flake8_bugbear/mod.rs
snapshot_kind: text
---
B901.py:9:9: B901 Using `yield` and `return {value}` in a generator function can lead to confusing behavior
   |
 7 | def broken():
 8 |     if True:
 9 |         return [1, 2, 3]
   |         ^^^^^^^^^^^^^^^^ B901
10 | 
11 |     yield 3
   |

B901.py:17:5: B901 Using `yield` and `return {value}` in a generator function can lead to confusing behavior
   |
16 | def broken2():
17 |     return [3, 2, 1]
   |     ^^^^^^^^^^^^^^^^ B901
18 | 
19 |     yield from not_broken()
   |

B901.py:25:5: B901 Using `yield` and `return {value}` in a generator function can lead to confusing behavior
   |
23 |     x = yield
24 |     print(x)
25 |     return 42
   |     ^^^^^^^^^ B901
   |

B901.py:30:5: B901 Using `yield` and `return {value}` in a generator function can lead to confusing behavior
   |
28 | def broken4():
29 |     (yield from range(5))
30 |     return 10
   |     ^^^^^^^^^ B901
   |

B901.py:35:5: B901 Using `yield` and `return {value}` in a generator function can lead to confusing behavior
   |
33 | def broken5():
34 |     x, y = ((yield from []), 7)
35 |     return y
   |     ^^^^^^^^ B901
   |

B901.py:42:5: B901 Using `yield` and `return {value}` in a generator function can lead to confusing behavior
   |
40 |     w, z = ("a", 10)
41 |     x
42 |     return z
   |     ^^^^^^^^ B901
   |

B901.py:48:5: B901 Using `yield` and `return {value}` in a generator function can lead to confusing behavior
   |
46 |     x = yield from []
47 |     x = 5
48 |     return x
   |     ^^^^^^^^ B901
   |

B901.py:53:5: B901 Using `yield` and `return {value}` in a generator function can lead to confusing behavior
   |
51 | def broken8():
52 |     ((x, y), z) = ((a, b), c) = (((yield 2), 3), 4)
53 |     return b
   |     ^^^^^^^^ B901
   |

---
source: crates/ruff_linter/src/rules/pycodestyle/mod.rs
---
E703 [*] Statement ends with an unnecessary semicolon
  --> E70.py:10:13
   |
 8 | import bdist_egg; bdist_egg.write_safety_flag(cmd.egg_info, safe)
 9 | #: E703:1:13
10 | import shlex;
   |             ^
11 | #: E702:1:9 E703:1:23
12 | del a[:]; a.append(42);
   |
help: Remove unnecessary semicolon
7  | #: E702:1:17
8  | import bdist_egg; bdist_egg.write_safety_flag(cmd.egg_info, safe)
9  | #: E703:1:13
   - import shlex;
10 + import shlex
11 | #: E702:1:9 E703:1:23
12 | del a[:]; a.append(42);
13 | #: E704:1:1

E703 [*] Statement ends with an unnecessary semicolon
  --> E70.py:12:23
   |
10 | import shlex;
11 | #: E702:1:9 E703:1:23
12 | del a[:]; a.append(42);
   |                       ^
13 | #: E704:1:1
14 | def f(x): return 2
   |
help: Remove unnecessary semicolon
9  | #: E703:1:13
10 | import shlex;
11 | #: E702:1:9 E703:1:23
   - del a[:]; a.append(42);
12 + del a[:]; a.append(42)
13 | #: E704:1:1
14 | def f(x): return 2
15 | #: E704:1:1

E703 [*] Statement ends with an unnecessary semicolon
  --> E70.py:25:14
   |
23 |     def f(x): return 2*x
24 | #: E704:1:8 E702:1:11 E703:1:14
25 | if True: x; y;
   |              ^
26 | #: E701:1:8
27 | if True: lambda a: b
   |
help: Remove unnecessary semicolon
22 | while all is round:
23 |     def f(x): return 2*x
24 | #: E704:1:8 E702:1:11 E703:1:14
   - if True: x; y;
25 + if True: x; y
26 | #: E701:1:8
27 | if True: lambda a: b
28 | #: E701:1:10

E703 [*] Statement ends with an unnecessary semicolon
  --> E70.py:68:1
   |
66 | #: E703:2:1
67 | 0\
68 | ;
   | ^
69 | #: E701:2:3
70 | a = \
   |
help: Remove unnecessary semicolon
64 | while 1:
65 |   1;...
66 | #: E703:2:1
   - 0\
   - ;
67 + 0
68 | #: E701:2:3
69 | a = \
70 |   5;

E703 [*] Statement ends with an unnecessary semicolon
  --> E70.py:71:4
   |
69 | #: E701:2:3
70 | a = \
71 |   5;
   |    ^
72 | #:
73 | with x(y) as z: ...
   |
help: Remove unnecessary semicolon
68 | ;
69 | #: E701:2:3
70 | a = \
   -   5;
71 +   5
72 | #:
73 | with x(y) as z: ...

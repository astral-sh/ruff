---
source: crates/ruff_linter/src/rules/flynt/mod.rs
---
FLY002 [*] Consider `f"{a}  World"` instead of string join
 --> FLY002.py:5:7
  |
4 | a = "Hello"
5 | ok1 = " ".join([a, " World"])  # OK
  |       ^^^^^^^^^^^^^^^^^^^^^^^
6 | ok2 = "".join(["Finally, ", a, " World"])  # OK
7 | ok3 = "x".join(("1", "2", "3"))  # OK
  |
help: Replace with `f"{a}  World"`
2 | from random import random, choice
3 | 
4 | a = "Hello"
  - ok1 = " ".join([a, " World"])  # OK
5 + ok1 = f"{a}  World"  # OK
6 | ok2 = "".join(["Finally, ", a, " World"])  # OK
7 | ok3 = "x".join(("1", "2", "3"))  # OK
8 | ok4 = "y".join([1, 2, 3])  # Technically OK, though would've been an error originally
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `f"Finally, {a} World"` instead of string join
 --> FLY002.py:6:7
  |
4 | a = "Hello"
5 | ok1 = " ".join([a, " World"])  # OK
6 | ok2 = "".join(["Finally, ", a, " World"])  # OK
  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 | ok3 = "x".join(("1", "2", "3"))  # OK
8 | ok4 = "y".join([1, 2, 3])  # Technically OK, though would've been an error originally
  |
help: Replace with `f"Finally, {a} World"`
3 | 
4 | a = "Hello"
5 | ok1 = " ".join([a, " World"])  # OK
  - ok2 = "".join(["Finally, ", a, " World"])  # OK
6 + ok2 = f"Finally, {a} World"  # OK
7 | ok3 = "x".join(("1", "2", "3"))  # OK
8 | ok4 = "y".join([1, 2, 3])  # Technically OK, though would've been an error originally
9 | ok5 = "a".join([random(), random()])  # OK (simple calls)
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `"1x2x3"` instead of string join
 --> FLY002.py:7:7
  |
5 | ok1 = " ".join([a, " World"])  # OK
6 | ok2 = "".join(["Finally, ", a, " World"])  # OK
7 | ok3 = "x".join(("1", "2", "3"))  # OK
  |       ^^^^^^^^^^^^^^^^^^^^^^^^^
8 | ok4 = "y".join([1, 2, 3])  # Technically OK, though would've been an error originally
9 | ok5 = "a".join([random(), random()])  # OK (simple calls)
  |
help: Replace with `"1x2x3"`
4  | a = "Hello"
5  | ok1 = " ".join([a, " World"])  # OK
6  | ok2 = "".join(["Finally, ", a, " World"])  # OK
   - ok3 = "x".join(("1", "2", "3"))  # OK
7  + ok3 = "1x2x3"  # OK
8  | ok4 = "y".join([1, 2, 3])  # Technically OK, though would've been an error originally
9  | ok5 = "a".join([random(), random()])  # OK (simple calls)
10 | ok6 = "a".join([secrets.token_urlsafe(), secrets.token_hex()])  # OK (attr calls)
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `f"{1}y{2}y{3}"` instead of string join
  --> FLY002.py:8:7
   |
 6 | ok2 = "".join(["Finally, ", a, " World"])  # OK
 7 | ok3 = "x".join(("1", "2", "3"))  # OK
 8 | ok4 = "y".join([1, 2, 3])  # Technically OK, though would've been an error originally
   |       ^^^^^^^^^^^^^^^^^^^
 9 | ok5 = "a".join([random(), random()])  # OK (simple calls)
10 | ok6 = "a".join([secrets.token_urlsafe(), secrets.token_hex()])  # OK (attr calls)
   |
help: Replace with `f"{1}y{2}y{3}"`
5  | ok1 = " ".join([a, " World"])  # OK
6  | ok2 = "".join(["Finally, ", a, " World"])  # OK
7  | ok3 = "x".join(("1", "2", "3"))  # OK
   - ok4 = "y".join([1, 2, 3])  # Technically OK, though would've been an error originally
8  + ok4 = f"{1}y{2}y{3}"  # Technically OK, though would've been an error originally
9  | ok5 = "a".join([random(), random()])  # OK (simple calls)
10 | ok6 = "a".join([secrets.token_urlsafe(), secrets.token_hex()])  # OK (attr calls)
11 | 
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `f"{random()}a{random()}"` instead of string join
  --> FLY002.py:9:7
   |
 7 | ok3 = "x".join(("1", "2", "3"))  # OK
 8 | ok4 = "y".join([1, 2, 3])  # Technically OK, though would've been an error originally
 9 | ok5 = "a".join([random(), random()])  # OK (simple calls)
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 | ok6 = "a".join([secrets.token_urlsafe(), secrets.token_hex()])  # OK (attr calls)
   |
help: Replace with `f"{random()}a{random()}"`
6  | ok2 = "".join(["Finally, ", a, " World"])  # OK
7  | ok3 = "x".join(("1", "2", "3"))  # OK
8  | ok4 = "y".join([1, 2, 3])  # Technically OK, though would've been an error originally
   - ok5 = "a".join([random(), random()])  # OK (simple calls)
9  + ok5 = f"{random()}a{random()}"  # OK (simple calls)
10 | ok6 = "a".join([secrets.token_urlsafe(), secrets.token_hex()])  # OK (attr calls)
11 | 
12 | nok1 = "x".join({"4", "5", "yee"})  # Not OK (set)
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `f"{secrets.token_urlsafe()}a{secrets.token_hex()}"` instead of string join
  --> FLY002.py:10:7
   |
 8 | ok4 = "y".join([1, 2, 3])  # Technically OK, though would've been an error originally
 9 | ok5 = "a".join([random(), random()])  # OK (simple calls)
10 | ok6 = "a".join([secrets.token_urlsafe(), secrets.token_hex()])  # OK (attr calls)
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | nok1 = "x".join({"4", "5", "yee"})  # Not OK (set)
   |
help: Replace with `f"{secrets.token_urlsafe()}a{secrets.token_hex()}"`
7  | ok3 = "x".join(("1", "2", "3"))  # OK
8  | ok4 = "y".join([1, 2, 3])  # Technically OK, though would've been an error originally
9  | ok5 = "a".join([random(), random()])  # OK (simple calls)
   - ok6 = "a".join([secrets.token_urlsafe(), secrets.token_hex()])  # OK (attr calls)
10 + ok6 = f"{secrets.token_urlsafe()}a{secrets.token_hex()}"  # OK (attr calls)
11 | 
12 | nok1 = "x".join({"4", "5", "yee"})  # Not OK (set)
13 | nok2 = a.join(["1", "2", "3"])  # Not OK (not a static joiner)
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider f-string instead of string join
  --> FLY002.py:20:8
   |
18 | nok7 = "a".join([f"foo{8}", "bar"])  # Not OK (contains an f-string)
19 | # https://github.com/astral-sh/ruff/issues/19887
20 | nok8 = '\n'.join([r'line1','line2'])
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 | nok9 = '\n'.join([r"raw string", '<""">', "<'''>"])  # Not OK (both triple-quote delimiters appear; should bail)
   |
help: Replace with f-string
17 | nok6 = "a".join(x for x in "feefoofum")  # Not OK (generator)
18 | nok7 = "a".join([f"foo{8}", "bar"])  # Not OK (contains an f-string)
19 | # https://github.com/astral-sh/ruff/issues/19887
   - nok8 = '\n'.join([r'line1','line2'])
20 + nok8 = r'''line1
21 + line2'''
22 | nok9 = '\n'.join([r"raw string", '<""">', "<'''>"])  # Not OK (both triple-quote delimiters appear; should bail)
23 | 
24 | # Regression test for: https://github.com/astral-sh/ruff/issues/7197
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `"raw string\n<\"\"\">\n<'''>"` instead of string join
  --> FLY002.py:21:8
   |
19 | # https://github.com/astral-sh/ruff/issues/19887
20 | nok8 = '\n'.join([r'line1','line2'])
21 | nok9 = '\n'.join([r"raw string", '<""">', "<'''>"])  # Not OK (both triple-quote delimiters appear; should bail)
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
22 |
23 | # Regression test for: https://github.com/astral-sh/ruff/issues/7197
   |
help: Replace with `"raw string\n<\"\"\">\n<'''>"`
18 | nok7 = "a".join([f"foo{8}", "bar"])  # Not OK (contains an f-string)
19 | # https://github.com/astral-sh/ruff/issues/19887
20 | nok8 = '\n'.join([r'line1','line2'])
   - nok9 = '\n'.join([r"raw string", '<""">', "<'''>"])  # Not OK (both triple-quote delimiters appear; should bail)
21 + nok9 = "raw string\n<\"\"\">\n<'''>"  # Not OK (both triple-quote delimiters appear; should bail)
22 | 
23 | # Regression test for: https://github.com/astral-sh/ruff/issues/7197
24 | def create_file_public_url(url, filename):
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `f"{url}{filename}"` instead of string join
  --> FLY002.py:25:11
   |
23 | # Regression test for: https://github.com/astral-sh/ruff/issues/7197
24 | def create_file_public_url(url, filename):
25 |     return''.join([url, filename])
   |           ^^^^^^^^^^^^^^^^^^^^^^^^
26 |
27 | # Regression test for: https://github.com/astral-sh/ruff/issues/19837
   |
help: Replace with `f"{url}{filename}"`
22 | 
23 | # Regression test for: https://github.com/astral-sh/ruff/issues/7197
24 | def create_file_public_url(url, filename):
   -     return''.join([url, filename])
25 +     return f"{url}{filename}"
26 | 
27 | # Regression test for: https://github.com/astral-sh/ruff/issues/19837
28 | nok10 = "".join((foo, '"'))
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `f'{foo}"'` instead of string join
  --> FLY002.py:28:9
   |
27 | # Regression test for: https://github.com/astral-sh/ruff/issues/19837
28 | nok10 = "".join((foo, '"'))
   |         ^^^^^^^^^^^^^^^^^^^
29 | nok11 = ''.join((foo, "'"))
30 | nok12 = ''.join([foo, "'", '"'])
   |
help: Replace with `f'{foo}"'`
25 |     return''.join([url, filename])
26 | 
27 | # Regression test for: https://github.com/astral-sh/ruff/issues/19837
   - nok10 = "".join((foo, '"'))
28 + nok10 = f'{foo}"'
29 | nok11 = ''.join((foo, "'"))
30 | nok12 = ''.join([foo, "'", '"'])
31 | nok13 = "".join([foo, "'", '"'])
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `f"{foo}'"` instead of string join
  --> FLY002.py:29:9
   |
27 | # Regression test for: https://github.com/astral-sh/ruff/issues/19837
28 | nok10 = "".join((foo, '"'))
29 | nok11 = ''.join((foo, "'"))
   |         ^^^^^^^^^^^^^^^^^^^
30 | nok12 = ''.join([foo, "'", '"'])
31 | nok13 = "".join([foo, "'", '"'])
   |
help: Replace with `f"{foo}'"`
26 | 
27 | # Regression test for: https://github.com/astral-sh/ruff/issues/19837
28 | nok10 = "".join((foo, '"'))
   - nok11 = ''.join((foo, "'"))
29 + nok11 = f"{foo}'"
30 | nok12 = ''.join([foo, "'", '"'])
31 | nok13 = "".join([foo, "'", '"'])
32 | 
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `'"'` instead of string join
  --> FLY002.py:35:9
   |
33 | # Regression test for: https://github.com/astral-sh/ruff/issues/21082
34 | # Mixing raw and non-raw strings can cause syntax errors or behavior changes
35 | nok14 = "".join((r"", '"'))  # First is raw, second is not - would break syntax
   |         ^^^^^^^^^^^^^^^^^^^
36 | nok15 = "".join((r"", "\\"))  # First is raw, second has backslash - would break syntax
37 | nok16 = "".join((r"", "\0"))  # First is raw, second has null byte - would introduce null bytes
   |
help: Replace with `'"'`
32 | 
33 | # Regression test for: https://github.com/astral-sh/ruff/issues/21082
34 | # Mixing raw and non-raw strings can cause syntax errors or behavior changes
   - nok14 = "".join((r"", '"'))  # First is raw, second is not - would break syntax
35 + nok14 = '"'  # First is raw, second is not - would break syntax
36 | nok15 = "".join((r"", "\\"))  # First is raw, second has backslash - would break syntax
37 | nok16 = "".join((r"", "\0"))  # First is raw, second has null byte - would introduce null bytes
38 | nok17 = "".join((r"", "\r"))  # First is raw, second has carriage return - would change behavior
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `"\\"` instead of string join
  --> FLY002.py:36:9
   |
34 | # Mixing raw and non-raw strings can cause syntax errors or behavior changes
35 | nok14 = "".join((r"", '"'))  # First is raw, second is not - would break syntax
36 | nok15 = "".join((r"", "\\"))  # First is raw, second has backslash - would break syntax
   |         ^^^^^^^^^^^^^^^^^^^^
37 | nok16 = "".join((r"", "\0"))  # First is raw, second has null byte - would introduce null bytes
38 | nok17 = "".join((r"", "\r"))  # First is raw, second has carriage return - would change behavior
   |
help: Replace with `"\\"`
33 | # Regression test for: https://github.com/astral-sh/ruff/issues/21082
34 | # Mixing raw and non-raw strings can cause syntax errors or behavior changes
35 | nok14 = "".join((r"", '"'))  # First is raw, second is not - would break syntax
   - nok15 = "".join((r"", "\\"))  # First is raw, second has backslash - would break syntax
36 + nok15 = "\\"  # First is raw, second has backslash - would break syntax
37 | nok16 = "".join((r"", "\0"))  # First is raw, second has null byte - would introduce null bytes
38 | nok17 = "".join((r"", "\r"))  # First is raw, second has carriage return - would change behavior
39 | nok18 = "".join((r"", "\\r"))  # First is raw, second has backslash followed by literal r - OK (no special handling needed)
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `"\x00"` instead of string join
  --> FLY002.py:37:9
   |
35 | nok14 = "".join((r"", '"'))  # First is raw, second is not - would break syntax
36 | nok15 = "".join((r"", "\\"))  # First is raw, second has backslash - would break syntax
37 | nok16 = "".join((r"", "\0"))  # First is raw, second has null byte - would introduce null bytes
   |         ^^^^^^^^^^^^^^^^^^^^
38 | nok17 = "".join((r"", "\r"))  # First is raw, second has carriage return - would change behavior
39 | nok18 = "".join((r"", "\\r"))  # First is raw, second has backslash followed by literal r - OK (no special handling needed)
   |
help: Replace with `"\x00"`
34 | # Mixing raw and non-raw strings can cause syntax errors or behavior changes
35 | nok14 = "".join((r"", '"'))  # First is raw, second is not - would break syntax
36 | nok15 = "".join((r"", "\\"))  # First is raw, second has backslash - would break syntax
   - nok16 = "".join((r"", "\0"))  # First is raw, second has null byte - would introduce null bytes
37 + nok16 = "\x00"  # First is raw, second has null byte - would introduce null bytes
38 | nok17 = "".join((r"", "\r"))  # First is raw, second has carriage return - would change behavior
39 | nok18 = "".join((r"", "\\r"))  # First is raw, second has backslash followed by literal r - OK (no special handling needed)
40 | 
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `"\r"` instead of string join
  --> FLY002.py:38:9
   |
36 | nok15 = "".join((r"", "\\"))  # First is raw, second has backslash - would break syntax
37 | nok16 = "".join((r"", "\0"))  # First is raw, second has null byte - would introduce null bytes
38 | nok17 = "".join((r"", "\r"))  # First is raw, second has carriage return - would change behavior
   |         ^^^^^^^^^^^^^^^^^^^^
39 | nok18 = "".join((r"", "\\r"))  # First is raw, second has backslash followed by literal r - OK (no special handling needed)
   |
help: Replace with `"\r"`
35 | nok14 = "".join((r"", '"'))  # First is raw, second is not - would break syntax
36 | nok15 = "".join((r"", "\\"))  # First is raw, second has backslash - would break syntax
37 | nok16 = "".join((r"", "\0"))  # First is raw, second has null byte - would introduce null bytes
   - nok17 = "".join((r"", "\r"))  # First is raw, second has carriage return - would change behavior
38 + nok17 = "\r"  # First is raw, second has carriage return - would change behavior
39 | nok18 = "".join((r"", "\\r"))  # First is raw, second has backslash followed by literal r - OK (no special handling needed)
40 | 
41 | # Test that all-raw strings still work (should be OK)
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `r"\r"` instead of string join
  --> FLY002.py:39:9
   |
37 | nok16 = "".join((r"", "\0"))  # First is raw, second has null byte - would introduce null bytes
38 | nok17 = "".join((r"", "\r"))  # First is raw, second has carriage return - would change behavior
39 | nok18 = "".join((r"", "\\r"))  # First is raw, second has backslash followed by literal r - OK (no special handling needed)
   |         ^^^^^^^^^^^^^^^^^^^^^
40 |
41 | # Test that all-raw strings still work (should be OK)
   |
help: Replace with `r"\r"`
36 | nok15 = "".join((r"", "\\"))  # First is raw, second has backslash - would break syntax
37 | nok16 = "".join((r"", "\0"))  # First is raw, second has null byte - would introduce null bytes
38 | nok17 = "".join((r"", "\r"))  # First is raw, second has carriage return - would change behavior
   - nok18 = "".join((r"", "\\r"))  # First is raw, second has backslash followed by literal r - OK (no special handling needed)
39 + nok18 = r"\r"  # First is raw, second has backslash followed by literal r - OK (no special handling needed)
40 | 
41 | # Test that all-raw strings still work (should be OK)
42 | ok7 = "".join((r"", r"something"))  # Both are raw - OK
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `r"something"` instead of string join
  --> FLY002.py:42:7
   |
41 | # Test that all-raw strings still work (should be OK)
42 | ok7 = "".join((r"", r"something"))  # Both are raw - OK
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
43 | ok8 = "\n".join((r"line1", r'line2'))  # Both are raw - OK
   |
help: Replace with `r"something"`
39 | nok18 = "".join((r"", "\\r"))  # First is raw, second has backslash followed by literal r - OK (no special handling needed)
40 | 
41 | # Test that all-raw strings still work (should be OK)
   - ok7 = "".join((r"", r"something"))  # Both are raw - OK
42 + ok7 = r"something"  # Both are raw - OK
43 | ok8 = "\n".join((r"line1", r'line2'))  # Both are raw - OK
44 | 
45 | # Test that all-non-raw strings still work (should be OK)
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider f-string instead of string join
  --> FLY002.py:43:7
   |
41 | # Test that all-raw strings still work (should be OK)
42 | ok7 = "".join((r"", r"something"))  # Both are raw - OK
43 | ok8 = "\n".join((r"line1", r'line2'))  # Both are raw - OK
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 |
45 | # Test that all-non-raw strings still work (should be OK)
   |
help: Replace with f-string
40 | 
41 | # Test that all-raw strings still work (should be OK)
42 | ok7 = "".join((r"", r"something"))  # Both are raw - OK
   - ok8 = "\n".join((r"line1", r'line2'))  # Both are raw - OK
43 + ok8 = r"""line1
44 + line2"""  # Both are raw - OK
45 | 
46 | # Test that all-non-raw strings still work (should be OK)
47 | ok9 = "".join(("", '"'))  # Both are non-raw - OK
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `'"'` instead of string join
  --> FLY002.py:46:7
   |
45 | # Test that all-non-raw strings still work (should be OK)
46 | ok9 = "".join(("", '"'))  # Both are non-raw - OK
   |       ^^^^^^^^^^^^^^^^^^
47 | ok10 = "\n".join(("line1", "line2"))  # Both are non-raw - OK
   |
help: Replace with `'"'`
43 | ok8 = "\n".join((r"line1", r'line2'))  # Both are raw - OK
44 | 
45 | # Test that all-non-raw strings still work (should be OK)
   - ok9 = "".join(("", '"'))  # Both are non-raw - OK
46 + ok9 = '"'  # Both are non-raw - OK
47 | ok10 = "\n".join(("line1", "line2"))  # Both are non-raw - OK
note: This is an unsafe fix and may change runtime behavior

FLY002 [*] Consider `"line1\nline2"` instead of string join
  --> FLY002.py:47:8
   |
45 | # Test that all-non-raw strings still work (should be OK)
46 | ok9 = "".join(("", '"'))  # Both are non-raw - OK
47 | ok10 = "\n".join(("line1", "line2"))  # Both are non-raw - OK
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Replace with `"line1\nline2"`
44 | 
45 | # Test that all-non-raw strings still work (should be OK)
46 | ok9 = "".join(("", '"'))  # Both are non-raw - OK
   - ok10 = "\n".join(("line1", "line2"))  # Both are non-raw - OK
47 + ok10 = "line1\nline2"  # Both are non-raw - OK
note: This is an unsafe fix and may change runtime behavior

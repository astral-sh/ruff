---
source: crates/ruff_linter/src/rules/flake8_pyi/mod.rs
---
PYI019_0.py:7:16: PYI019 Use `Self` instead of custom TypeVar `_S`
  |
6 | class BadClass:
7 |     def __new__(cls: type[_S], *args: str, **kwargs: int) -> _S: ...  # PYI019
  |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
  |
  = help: Replace TypeVar `_S` with `Self`

PYI019_0.py:10:28: PYI019 Use `Self` instead of custom TypeVar `_S`
   |
10 |     def bad_instance_method(self: _S, arg: bytes) -> _S: ...  # PYI019
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
   |
   = help: Replace TypeVar `_S` with `Self`

PYI019_0.py:14:25: PYI019 Use `Self` instead of custom TypeVar `_S`
   |
13 |     @classmethod
14 |     def bad_class_method(cls: type[_S], arg: int) -> _S: ...  # PYI019
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
   |
   = help: Replace TypeVar `_S` with `Self`

PYI019_0.py:18:33: PYI019 Use `Self` instead of custom TypeVar `_S`
   |
17 |     @classmethod
18 |     def bad_posonly_class_method(cls: type[_S], /) -> _S: ...  # PYI019
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
   |
   = help: Replace TypeVar `_S` with `Self`

PYI019_0.py:39:14: PYI019 Use `Self` instead of custom TypeVar `S`
   |
37 | # Python > 3.12
38 | class PEP695BadDunderNew[T]:
39 |   def __new__[S](cls: type[S], *args: Any, ** kwargs: Any) -> S: ...  # PYI019
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:42:30: PYI019 Use `Self` instead of custom TypeVar `S`
   |
42 |   def generic_instance_method[S](self: S) -> S: ...  # PYI019
   |                              ^^^^^^^^^^^^^^^^^ PYI019
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:54:11: PYI019 Use `Self` instead of custom TypeVar `S`
   |
52 |    # in the settings for this test:
53 |    @foo_classmethod
54 |    def foo[S](cls: type[S]) -> S: ...  # PYI019
   |           ^^^^^^^^^^^^^^^^^^^^^^ PYI019
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:61:16: PYI019 Use `Self` instead of custom TypeVar `S`
   |
59 | # Only .pyi gets fixes, no fixes for .py
60 | class PEP695Fix:
61 |     def __new__[S: PEP695Fix](cls: type[S]) -> S: ...
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
62 |
63 |     def __init_subclass__[S](cls: type[S]) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:63:26: PYI019 Use `Self` instead of custom TypeVar `S`
   |
61 |     def __new__[S: PEP695Fix](cls: type[S]) -> S: ...
62 |
63 |     def __init_subclass__[S](cls: type[S]) -> S: ...
   |                          ^^^^^^^^^^^^^^^^^^^^^^ PYI019
64 |
65 |     def __neg__[S: PEP695Fix](self: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:65:16: PYI019 Use `Self` instead of custom TypeVar `S`
   |
63 |     def __init_subclass__[S](cls: type[S]) -> S: ...
64 |
65 |     def __neg__[S: PEP695Fix](self: S) -> S: ...
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
66 |
67 |     def __pos__[S](self: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:67:16: PYI019 Use `Self` instead of custom TypeVar `S`
   |
65 |     def __neg__[S: PEP695Fix](self: S) -> S: ...
66 |
67 |     def __pos__[S](self: S) -> S: ...
   |                ^^^^^^^^^^^^^^^^^ PYI019
68 |
69 |     def __add__[S: PEP695Fix](self: S, other: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:69:16: PYI019 Use `Self` instead of custom TypeVar `S`
   |
67 |     def __pos__[S](self: S) -> S: ...
68 |
69 |     def __add__[S: PEP695Fix](self: S, other: S) -> S: ...
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
70 |
71 |     def __sub__[S](self: S, other: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:71:16: PYI019 Use `Self` instead of custom TypeVar `S`
   |
69 |     def __add__[S: PEP695Fix](self: S, other: S) -> S: ...
70 |
71 |     def __sub__[S](self: S, other: S) -> S: ...
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
72 |
73 |     @classmethod
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:74:27: PYI019 Use `Self` instead of custom TypeVar `S`
   |
73 |     @classmethod
74 |     def class_method_bound[S: PEP695Fix](cls: type[S]) -> S: ...
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
75 |
76 |     @classmethod
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:77:29: PYI019 Use `Self` instead of custom TypeVar `S`
   |
76 |     @classmethod
77 |     def class_method_unbound[S](cls: type[S]) -> S: ...
   |                             ^^^^^^^^^^^^^^^^^^^^^^ PYI019
78 |
79 |     def instance_method_bound[S: PEP695Fix](self: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:79:30: PYI019 Use `Self` instead of custom TypeVar `S`
   |
77 |     def class_method_unbound[S](cls: type[S]) -> S: ...
78 |
79 |     def instance_method_bound[S: PEP695Fix](self: S) -> S: ...
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
80 |
81 |     def instance_method_unbound[S](self: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:81:32: PYI019 Use `Self` instead of custom TypeVar `S`
   |
79 |     def instance_method_bound[S: PEP695Fix](self: S) -> S: ...
80 |
81 |     def instance_method_unbound[S](self: S) -> S: ...
   |                                ^^^^^^^^^^^^^^^^^ PYI019
82 |
83 |     def instance_method_bound_with_another_parameter[S: PEP695Fix](self: S, other: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:83:53: PYI019 Use `Self` instead of custom TypeVar `S`
   |
81 |     def instance_method_unbound[S](self: S) -> S: ...
82 |
83 |     def instance_method_bound_with_another_parameter[S: PEP695Fix](self: S, other: S) -> S: ...
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
84 |
85 |     def instance_method_unbound_with_another_parameter[S](self: S, other: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:85:55: PYI019 Use `Self` instead of custom TypeVar `S`
   |
83 |     def instance_method_bound_with_another_parameter[S: PEP695Fix](self: S, other: S) -> S: ...
84 |
85 |     def instance_method_unbound_with_another_parameter[S](self: S, other: S) -> S: ...
   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
86 |
87 |     def multiple_type_vars[S, *Ts, T](self: S, other: S, /, *args: *Ts, a: T, b: list[T]) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:87:27: PYI019 Use `Self` instead of custom TypeVar `S`
   |
85 |     def instance_method_unbound_with_another_parameter[S](self: S, other: S) -> S: ...
86 |
87 |     def multiple_type_vars[S, *Ts, T](self: S, other: S, /, *args: *Ts, a: T, b: list[T]) -> S: ...
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
88 |
89 |     def mixing_old_and_new_style_type_vars[T](self: _S695, a: T, b: T) -> _S695: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:89:43: PYI019 Use `Self` instead of custom TypeVar `_S695`
   |
87 |     def multiple_type_vars[S, *Ts, T](self: S, other: S, /, *args: *Ts, a: T, b: list[T]) -> S: ...
88 |
89 |     def mixing_old_and_new_style_type_vars[T](self: _S695, a: T, b: T) -> _S695: ...
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
   |
   = help: Replace TypeVar `_S695` with `Self`

PYI019_0.py:94:10: PYI019 Use `Self` instead of custom TypeVar `S`
   |
92 | class InvalidButWeDoNotPanic:
93 |     @classmethod
94 |     def m[S](cls: type[S], /) -> S[int]: ...
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
95 |     def n(self: S) -> S[int]: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.py:114:10: PYI019 Use `Self` instead of custom TypeVar `S`
    |
112 | class SubscriptReturnType:
113 |     @classmethod
114 |     def m[S](cls: type[S]) -> type[S]: ...  # PYI019
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
    |
    = help: Replace TypeVar `S` with `Self`

PYI019_0.py:118:10: PYI019 Use `Self` instead of custom TypeVar `S`
    |
117 | class SelfNotUsedInReturnAnnotation:
118 |     def m[S](self: S, other: S) -> int: ...
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
119 |     @classmethod
120 |     def n[S](cls: type[S], other: S) -> int: ...
    |
    = help: Replace TypeVar `S` with `Self`

PYI019_0.py:120:10: PYI019 Use `Self` instead of custom TypeVar `S`
    |
118 |     def m[S](self: S, other: S) -> int: ...
119 |     @classmethod
120 |     def n[S](cls: type[S], other: S) -> int: ...
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
    |
    = help: Replace TypeVar `S` with `Self`

PYI019_0.py:135:10: PYI019 Use `Self` instead of custom TypeVar `S`
    |
134 | class NoReturnAnnotations:
135 |     def m[S](self: S, other: S): ...
    |          ^^^^^^^^^^^^^^^^^^^^^^ PYI019
136 |     @classmethod
137 |     def n[S](cls: type[S], other: S): ...
    |
    = help: Replace TypeVar `S` with `Self`

PYI019_0.py:137:10: PYI019 Use `Self` instead of custom TypeVar `S`
    |
135 |     def m[S](self: S, other: S): ...
136 |     @classmethod
137 |     def n[S](cls: type[S], other: S): ...
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI019
    |
    = help: Replace TypeVar `S` with `Self`

---
source: crates/ruff_linter/src/rules/flake8_pyi/mod.rs
snapshot_kind: text
---
PYI055.py:31:8: PYI055 [*] Multiple `type` members in a union. Combine them into one, e.g., `type[requests_mock.Mocker | httpretty | str]`.
   |
29 | def func():
30 |     # PYI055
31 |     x: type[requests_mock.Mocker] | type[httpretty] | type[str] = requests_mock.Mocker
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI055
32 |     y: Union[type[requests_mock.Mocker], type[httpretty], type[str]] = requests_mock.Mocker
33 |     z: Union[  # comment
   |
   = help: Combine multiple `type` members

ℹ Safe fix
28 28 | 
29 29 | def func():
30 30 |     # PYI055
31    |-    x: type[requests_mock.Mocker] | type[httpretty] | type[str] = requests_mock.Mocker
   31 |+    x: type[requests_mock.Mocker | httpretty | str] = requests_mock.Mocker
32 32 |     y: Union[type[requests_mock.Mocker], type[httpretty], type[str]] = requests_mock.Mocker
33 33 |     z: Union[  # comment
34 34 |         type[requests_mock.Mocker], # another comment

PYI055.py:32:8: PYI055 [*] Multiple `type` members in a union. Combine them into one, e.g., `type[Union[requests_mock.Mocker, httpretty, str]]`.
   |
30 |     # PYI055
31 |     x: type[requests_mock.Mocker] | type[httpretty] | type[str] = requests_mock.Mocker
32 |     y: Union[type[requests_mock.Mocker], type[httpretty], type[str]] = requests_mock.Mocker
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI055
33 |     z: Union[  # comment
34 |         type[requests_mock.Mocker], # another comment
   |
   = help: Combine multiple `type` members

ℹ Safe fix
29 29 | def func():
30 30 |     # PYI055
31 31 |     x: type[requests_mock.Mocker] | type[httpretty] | type[str] = requests_mock.Mocker
32    |-    y: Union[type[requests_mock.Mocker], type[httpretty], type[str]] = requests_mock.Mocker
   32 |+    y: type[Union[requests_mock.Mocker, httpretty, str]] = requests_mock.Mocker
33 33 |     z: Union[  # comment
34 34 |         type[requests_mock.Mocker], # another comment
35 35 |         type[httpretty], type[str]] = requests_mock.Mocker

PYI055.py:33:8: PYI055 [*] Multiple `type` members in a union. Combine them into one, e.g., `type[Union[requests_mock.Mocker, httpretty, str]]`.
   |
31 |       x: type[requests_mock.Mocker] | type[httpretty] | type[str] = requests_mock.Mocker
32 |       y: Union[type[requests_mock.Mocker], type[httpretty], type[str]] = requests_mock.Mocker
33 |       z: Union[  # comment
   |  ________^
34 | |         type[requests_mock.Mocker], # another comment
35 | |         type[httpretty], type[str]] = requests_mock.Mocker
   | |___________________________________^ PYI055
   |
   = help: Combine multiple `type` members

ℹ Unsafe fix
30 30 |     # PYI055
31 31 |     x: type[requests_mock.Mocker] | type[httpretty] | type[str] = requests_mock.Mocker
32 32 |     y: Union[type[requests_mock.Mocker], type[httpretty], type[str]] = requests_mock.Mocker
33    |-    z: Union[  # comment
34    |-        type[requests_mock.Mocker], # another comment
35    |-        type[httpretty], type[str]] = requests_mock.Mocker
   33 |+    z: type[Union[requests_mock.Mocker, httpretty, str]] = requests_mock.Mocker
36 34 | 
37 35 | 
38 36 | def func():

PYI055.py:42:8: PYI055 [*] Multiple `type` members in a union. Combine them into one, e.g., `type[Union[requests_mock.Mocker, httpretty, str]]`.
   |
41 |     # PYI055
42 |     x: Union[type[requests_mock.Mocker], type[httpretty], type[str]] = requests_mock.Mocker
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI055
   |
   = help: Combine multiple `type` members

ℹ Safe fix
39 39 |     from typing import Union as U
40 40 | 
41 41 |     # PYI055
42    |-    x: Union[type[requests_mock.Mocker], type[httpretty], type[str]] = requests_mock.Mocker
   42 |+    x: type[Union[requests_mock.Mocker, httpretty, str]] = requests_mock.Mocker
43 43 | 
44 44 | 
45 45 | def convert_union(union: UnionType) -> _T | None:

PYI055.py:47:9: PYI055 [*] Multiple `type` members in a union. Combine them into one, e.g., `type[_T | Converter[_T]]`.
   |
45 | def convert_union(union: UnionType) -> _T | None:
46 |     converters: tuple[
47 |         type[_T] | type[Converter[_T]] | Converter[_T] | Callable[[str], _T], ...  # PYI055
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI055
48 |     ] = union.__args__
49 |     ...
   |
   = help: Combine multiple `type` members

ℹ Safe fix
44 44 | 
45 45 | def convert_union(union: UnionType) -> _T | None:
46 46 |     converters: tuple[
47    |-        type[_T] | type[Converter[_T]] | Converter[_T] | Callable[[str], _T], ...  # PYI055
   47 |+        type[_T | Converter[_T]] | Converter[_T] | Callable[[str], _T], ...  # PYI055
48 48 |     ] = union.__args__
49 49 |     ...
50 50 | 

PYI055.py:53:15: PYI055 [*] Multiple `type` members in a union. Combine them into one, e.g., `type[_T | Converter[_T]]`.
   |
51 | def convert_union(union: UnionType) -> _T | None:
52 |     converters: tuple[
53 |         Union[type[_T] | type[Converter[_T]] | Converter[_T] | Callable[[str], _T]], ...  # PYI055
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI055
54 |     ] = union.__args__
55 |     ...
   |
   = help: Combine multiple `type` members

ℹ Safe fix
50 50 | 
51 51 | def convert_union(union: UnionType) -> _T | None:
52 52 |     converters: tuple[
53    |-        Union[type[_T] | type[Converter[_T]] | Converter[_T] | Callable[[str], _T]], ...  # PYI055
   53 |+        Union[type[_T | Converter[_T]] | Converter[_T] | Callable[[str], _T]], ...  # PYI055
54 54 |     ] = union.__args__
55 55 |     ...
56 56 | 

PYI055.py:59:15: PYI055 [*] Multiple `type` members in a union. Combine them into one, e.g., `type[_T | Converter[_T]]`.
   |
57 | def convert_union(union: UnionType) -> _T | None:
58 |     converters: tuple[
59 |         Union[type[_T] | type[Converter[_T]]] | Converter[_T] | Callable[[str], _T], ...  # PYI055
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI055
60 |     ] = union.__args__
61 |     ...
   |
   = help: Combine multiple `type` members

ℹ Safe fix
56 56 | 
57 57 | def convert_union(union: UnionType) -> _T | None:
58 58 |     converters: tuple[
59    |-        Union[type[_T] | type[Converter[_T]]] | Converter[_T] | Callable[[str], _T], ...  # PYI055
   59 |+        Union[type[_T | Converter[_T]]] | Converter[_T] | Callable[[str], _T], ...  # PYI055
60 60 |     ] = union.__args__
61 61 |     ...
62 62 | 

PYI055.py:65:15: PYI055 [*] Multiple `type` members in a union. Combine them into one, e.g., `type[_T | Converter[_T]]`.
   |
63 | def convert_union(union: UnionType) -> _T | None:
64 |     converters: tuple[
65 |         Union[type[_T] | type[Converter[_T]] | str] | Converter[_T] | Callable[[str], _T], ...  # PYI055
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PYI055
66 |     ] = union.__args__
67 |     ...
   |
   = help: Combine multiple `type` members

ℹ Safe fix
62 62 | 
63 63 | def convert_union(union: UnionType) -> _T | None:
64 64 |     converters: tuple[
65    |-        Union[type[_T] | type[Converter[_T]] | str] | Converter[_T] | Callable[[str], _T], ...  # PYI055
   65 |+        Union[type[_T | Converter[_T]] | str] | Converter[_T] | Callable[[str], _T], ...  # PYI055
66 66 |     ] = union.__args__
67 67 |     ...

---
source: crates/ruff_linter/src/rules/flake8_pyi/mod.rs
---
PYI061 [*] Use `None` rather than `Literal[None]`
 --> PYI061.py:4:25
  |
4 | def func1(arg1: Literal[None]):
  |                         ^^^^
5 |     ...
  |
help: Replace with `None`
1 | from typing import Literal, Union
2 | 
3 | 
  - def func1(arg1: Literal[None]):
4 + def func1(arg1: None):
5 |     ...
6 | 
7 | 

PYI061 [*] Use `None` rather than `Literal[None]`
 --> PYI061.py:8:25
  |
8 | def func2(arg1: Literal[None] | int):
  |                         ^^^^
9 |     ...
  |
help: Replace with `None`
5  |     ...
6  | 
7  | 
   - def func2(arg1: Literal[None] | int):
8  + def func2(arg1: None | int):
9  |     ...
10 | 
11 | 

PYI061 [*] Use `None` rather than `Literal[None]`
  --> PYI061.py:12:24
   |
12 | def func3() -> Literal[None]:
   |                        ^^^^
13 |     ...
   |
help: Replace with `None`
9  |     ...
10 | 
11 | 
   - def func3() -> Literal[None]:
12 + def func3() -> None:
13 |     ...
14 | 
15 | 

PYI061 [*] Use `Literal[...] | None` rather than `Literal[None, ...]` 
  --> PYI061.py:16:30
   |
16 | def func4(arg1: Literal[int, None, float]):
   |                              ^^^^
17 |     ...
   |
help: Replace with `Literal[...] | None`
13 |     ...
14 | 
15 | 
   - def func4(arg1: Literal[int, None, float]):
16 + def func4(arg1: Literal[int, float] | None):
17 |     ...
18 | 
19 | 

PYI061 [*] Use `None` rather than `Literal[None]`
  --> PYI061.py:20:25
   |
20 | def func5(arg1: Literal[None, None]):
   |                         ^^^^
21 |     ...
   |
help: Replace with `None`
17 |     ...
18 | 
19 | 
   - def func5(arg1: Literal[None, None]):
20 + def func5(arg1: None):
21 |     ...
22 | 
23 | 

PYI061 [*] Use `None` rather than `Literal[None]`
  --> PYI061.py:20:31
   |
20 | def func5(arg1: Literal[None, None]):
   |                               ^^^^
21 |     ...
   |
help: Replace with `None`
17 |     ...
18 | 
19 | 
   - def func5(arg1: Literal[None, None]):
20 + def func5(arg1: None):
21 |     ...
22 | 
23 | 

PYI061 [*] Use `Literal[...] | None` rather than `Literal[None, ...]` 
  --> PYI061.py:26:5
   |
24 | def func6(arg1: Literal[
25 |     "hello",
26 |     None  # Comment 1
   |     ^^^^
27 |     , "world"
28 |     ]):
   |
help: Replace with `Literal[...] | None`
21 |     ...
22 | 
23 | 
   - def func6(arg1: Literal[
   -     "hello",
   -     None  # Comment 1
   -     , "world"
   -     ]):
24 + def func6(arg1: Literal["hello", "world"] | None):
25 |     ...
26 | 
27 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

PYI061 [*] Use `None` rather than `Literal[None]`
  --> PYI061.py:33:5
   |
32 | def func7(arg1: Literal[
33 |     None  # Comment 1
   |     ^^^^
34 |     ]):
35 |     ...
   |
help: Replace with `None`
29 |     ...
30 | 
31 | 
   - def func7(arg1: Literal[
   -     None  # Comment 1
   -     ]):
32 + def func7(arg1: None):
33 |     ...
34 | 
35 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

PYI061 Use `None` rather than `Literal[None]`
  --> PYI061.py:38:25
   |
38 | def func8(arg1: Literal[None] | None):
   |                         ^^^^
39 |     ...
   |
help: Replace with `None`

PYI061 [*] Use `None` rather than `Literal[None]`
  --> PYI061.py:42:31
   |
42 | def func9(arg1: Union[Literal[None], None]):
   |                               ^^^^
43 |     ...
   |
help: Replace with `None`
39 |     ...
40 | 
41 | 
   - def func9(arg1: Union[Literal[None], None]):
42 + def func9(arg1: Union[None, None]):
43 |     ...
44 | 
45 | 

PYI061 [*] Use `None` rather than `Literal[None]`
  --> PYI061.py:52:9
   |
51 | # From flake8-pyi
52 | Literal[None]  # Y061 None inside "Literal[]" expression. Replace with "None"
   |         ^^^^
53 | Literal[True, None]  # Y061 None inside "Literal[]" expression. Replace with "Literal[True] | None"
   |
help: Replace with `None`
49 | 
50 | 
51 | # From flake8-pyi
   - Literal[None]  # Y061 None inside "Literal[]" expression. Replace with "None"
52 + None  # Y061 None inside "Literal[]" expression. Replace with "None"
53 | Literal[True, None]  # Y061 None inside "Literal[]" expression. Replace with "Literal[True] | None"
54 | 
55 | ###

PYI061 [*] Use `Literal[...] | None` rather than `Literal[None, ...]` 
  --> PYI061.py:53:15
   |
51 | # From flake8-pyi
52 | Literal[None]  # Y061 None inside "Literal[]" expression. Replace with "None"
53 | Literal[True, None]  # Y061 None inside "Literal[]" expression. Replace with "Literal[True] | None"
   |               ^^^^
54 |
55 | ###
   |
help: Replace with `Literal[...] | None`
50 | 
51 | # From flake8-pyi
52 | Literal[None]  # Y061 None inside "Literal[]" expression. Replace with "None"
   - Literal[True, None]  # Y061 None inside "Literal[]" expression. Replace with "Literal[True] | None"
53 + Literal[True] | None  # Y061 None inside "Literal[]" expression. Replace with "Literal[True] | None"
54 | 
55 | ###
56 | # The following rules here are slightly subtle,

PYI061 [*] Use `None` rather than `Literal[None]`
  --> PYI061.py:62:9
   |
60 | # If Y061 and Y062 both apply, but all the duplicate members are None,
61 | # only emit Y061...
62 | Literal[None, None]  # Y061 None inside "Literal[]" expression. Replace with "None"
   |         ^^^^
63 | Literal[1, None, "foo", None]  # Y061 None inside "Literal[]" expression. Replace with "Literal[1, 'foo'] | None"
   |
help: Replace with `None`
59 | 
60 | # If Y061 and Y062 both apply, but all the duplicate members are None,
61 | # only emit Y061...
   - Literal[None, None]  # Y061 None inside "Literal[]" expression. Replace with "None"
62 + None  # Y061 None inside "Literal[]" expression. Replace with "None"
63 | Literal[1, None, "foo", None]  # Y061 None inside "Literal[]" expression. Replace with "Literal[1, 'foo'] | None"
64 | 
65 | # ... but if Y061 and Y062 both apply

PYI061 [*] Use `None` rather than `Literal[None]`
  --> PYI061.py:62:15
   |
60 | # If Y061 and Y062 both apply, but all the duplicate members are None,
61 | # only emit Y061...
62 | Literal[None, None]  # Y061 None inside "Literal[]" expression. Replace with "None"
   |               ^^^^
63 | Literal[1, None, "foo", None]  # Y061 None inside "Literal[]" expression. Replace with "Literal[1, 'foo'] | None"
   |
help: Replace with `None`
59 | 
60 | # If Y061 and Y062 both apply, but all the duplicate members are None,
61 | # only emit Y061...
   - Literal[None, None]  # Y061 None inside "Literal[]" expression. Replace with "None"
62 + None  # Y061 None inside "Literal[]" expression. Replace with "None"
63 | Literal[1, None, "foo", None]  # Y061 None inside "Literal[]" expression. Replace with "Literal[1, 'foo'] | None"
64 | 
65 | # ... but if Y061 and Y062 both apply

PYI061 [*] Use `Literal[...] | None` rather than `Literal[None, ...]` 
  --> PYI061.py:63:12
   |
61 | # only emit Y061...
62 | Literal[None, None]  # Y061 None inside "Literal[]" expression. Replace with "None"
63 | Literal[1, None, "foo", None]  # Y061 None inside "Literal[]" expression. Replace with "Literal[1, 'foo'] | None"
   |            ^^^^
64 |
65 | # ... but if Y061 and Y062 both apply
   |
help: Replace with `Literal[...] | None`
60 | # If Y061 and Y062 both apply, but all the duplicate members are None,
61 | # only emit Y061...
62 | Literal[None, None]  # Y061 None inside "Literal[]" expression. Replace with "None"
   - Literal[1, None, "foo", None]  # Y061 None inside "Literal[]" expression. Replace with "Literal[1, 'foo'] | None"
63 + Literal[1, "foo"] | None  # Y061 None inside "Literal[]" expression. Replace with "Literal[1, 'foo'] | None"
64 | 
65 | # ... but if Y061 and Y062 both apply
66 | # and there are no None members in the Literal[] slice,

PYI061 [*] Use `Literal[...] | None` rather than `Literal[None, ...]` 
  --> PYI061.py:63:25
   |
61 | # only emit Y061...
62 | Literal[None, None]  # Y061 None inside "Literal[]" expression. Replace with "None"
63 | Literal[1, None, "foo", None]  # Y061 None inside "Literal[]" expression. Replace with "Literal[1, 'foo'] | None"
   |                         ^^^^
64 |
65 | # ... but if Y061 and Y062 both apply
   |
help: Replace with `Literal[...] | None`
60 | # If Y061 and Y062 both apply, but all the duplicate members are None,
61 | # only emit Y061...
62 | Literal[None, None]  # Y061 None inside "Literal[]" expression. Replace with "None"
   - Literal[1, None, "foo", None]  # Y061 None inside "Literal[]" expression. Replace with "Literal[1, 'foo'] | None"
63 + Literal[1, "foo"] | None  # Y061 None inside "Literal[]" expression. Replace with "Literal[1, 'foo'] | None"
64 | 
65 | # ... but if Y061 and Y062 both apply
66 | # and there are no None members in the Literal[] slice,

PYI061 [*] Use `Literal[...] | None` rather than `Literal[None, ...]` 
  --> PYI061.py:68:9
   |
66 | # and there are no None members in the Literal[] slice,
67 | # only emit Y062:
68 | Literal[None, True, None, True]  # Y062 Duplicate "Literal[]" member "True"
   |         ^^^^
   |
help: Replace with `Literal[...] | None`
65 | # ... but if Y061 and Y062 both apply
66 | # and there are no None members in the Literal[] slice,
67 | # only emit Y062:
   - Literal[None, True, None, True]  # Y062 Duplicate "Literal[]" member "True"
68 + Literal[True, True] | None  # Y062 Duplicate "Literal[]" member "True"
69 | 
70 | 
71 | # Regression tests for https://github.com/astral-sh/ruff/issues/14567

PYI061 [*] Use `Literal[...] | None` rather than `Literal[None, ...]` 
  --> PYI061.py:68:21
   |
66 | # and there are no None members in the Literal[] slice,
67 | # only emit Y062:
68 | Literal[None, True, None, True]  # Y062 Duplicate "Literal[]" member "True"
   |                     ^^^^
   |
help: Replace with `Literal[...] | None`
65 | # ... but if Y061 and Y062 both apply
66 | # and there are no None members in the Literal[] slice,
67 | # only emit Y062:
   - Literal[None, True, None, True]  # Y062 Duplicate "Literal[]" member "True"
68 + Literal[True, True] | None  # Y062 Duplicate "Literal[]" member "True"
69 | 
70 | 
71 | # Regression tests for https://github.com/astral-sh/ruff/issues/14567

PYI061 Use `None` rather than `Literal[None]`
  --> PYI061.py:72:12
   |
71 | # Regression tests for https://github.com/astral-sh/ruff/issues/14567
72 | x: Literal[None] | None
   |            ^^^^
73 | y: None | Literal[None]
74 | z: Union[Literal[None], None]
   |
help: Replace with `None`

PYI061 Use `None` rather than `Literal[None]`
  --> PYI061.py:73:19
   |
71 | # Regression tests for https://github.com/astral-sh/ruff/issues/14567
72 | x: Literal[None] | None
73 | y: None | Literal[None]
   |                   ^^^^
74 | z: Union[Literal[None], None]
   |
help: Replace with `None`

PYI061 [*] Use `None` rather than `Literal[None]`
  --> PYI061.py:74:18
   |
72 | x: Literal[None] | None
73 | y: None | Literal[None]
74 | z: Union[Literal[None], None]
   |                  ^^^^
75 |
76 | a: int | Literal[None] | None
   |
help: Replace with `None`
71 | # Regression tests for https://github.com/astral-sh/ruff/issues/14567
72 | x: Literal[None] | None
73 | y: None | Literal[None]
   - z: Union[Literal[None], None]
74 + z: Union[None, None]
75 | 
76 | a: int | Literal[None] | None
77 | b: None | Literal[None] | None

PYI061 Use `None` rather than `Literal[None]`
  --> PYI061.py:76:18
   |
74 | z: Union[Literal[None], None]
75 |
76 | a: int | Literal[None] | None
   |                  ^^^^
77 | b: None | Literal[None] | None
78 | c: (None | Literal[None]) | None
   |
help: Replace with `None`

PYI061 Use `None` rather than `Literal[None]`
  --> PYI061.py:77:19
   |
76 | a: int | Literal[None] | None
77 | b: None | Literal[None] | None
   |                   ^^^^
78 | c: (None | Literal[None]) | None
79 | d: None | (Literal[None] | None)
   |
help: Replace with `None`

PYI061 Use `None` rather than `Literal[None]`
  --> PYI061.py:78:20
   |
76 | a: int | Literal[None] | None
77 | b: None | Literal[None] | None
78 | c: (None | Literal[None]) | None
   |                    ^^^^
79 | d: None | (Literal[None] | None)
80 | e: None | ((None | Literal[None]) | None) | None
   |
help: Replace with `None`

PYI061 Use `None` rather than `Literal[None]`
  --> PYI061.py:79:20
   |
77 | b: None | Literal[None] | None
78 | c: (None | Literal[None]) | None
79 | d: None | (Literal[None] | None)
   |                    ^^^^
80 | e: None | ((None | Literal[None]) | None) | None
   |
help: Replace with `None`

PYI061 Use `None` rather than `Literal[None]`
  --> PYI061.py:80:28
   |
78 | c: (None | Literal[None]) | None
79 | d: None | (Literal[None] | None)
80 | e: None | ((None | Literal[None]) | None) | None
   |                            ^^^^
   |
help: Replace with `None`

---
source: crates/ruff_linter/src/rules/flake8_pyi/mod.rs
---
PYI034.py:19:9: PYI034 `__new__` methods in classes like `Bad` usually return `self` at runtime
   |
17 |     object
18 | ):  # Y040 Do not inherit from "object" explicitly, as it is redundant in Python 3
19 |     def __new__(cls, *args: Any, **kwargs: Any) -> Bad:
   |         ^^^^^^^ PYI034
20 |         ...  # Y034 "__new__" methods usually return "self" at runtime. Consider using "typing_extensions.Self" in "Bad.__new__", e.g. "def __new__(cls, *args: Any, **kwargs: Any) -> Self: ..."
   |
   = help: Consider using `typing_extensions.Self` as return type

PYI034.py:34:9: PYI034 `__enter__` methods in classes like `Bad` usually return `self` at runtime
   |
32 |         ...  # Y032 Prefer "object" to "Any" for the second parameter in "__ne__" methods
33 | 
34 |     def __enter__(self) -> Bad:
   |         ^^^^^^^^^ PYI034
35 |         ...  # Y034 "__enter__" methods in classes like "Bad" usually return "self" at runtime. Consider using "typing_extensions.Self" in "Bad.__enter__", e.g. "def __enter__(self) -> Self: ..."
   |
   = help: Consider using `typing_extensions.Self` as return type

PYI034.py:37:15: PYI034 `__aenter__` methods in classes like `Bad` usually return `self` at runtime
   |
35 |         ...  # Y034 "__enter__" methods in classes like "Bad" usually return "self" at runtime. Consider using "typing_extensions.Self" in "Bad.__enter__", e.g. "def __enter__(self) -> Self: ..."
36 | 
37 |     async def __aenter__(self) -> Bad:
   |               ^^^^^^^^^^ PYI034
38 |         ...  # Y034 "__aenter__" methods in classes like "Bad" usually return "self" at runtime. Consider using "typing_extensions.Self" in "Bad.__aenter__", e.g. "async def __aenter__(self) -> Self: ..."
   |
   = help: Consider using `typing_extensions.Self` as return type

PYI034.py:40:9: PYI034 `__iadd__` methods in classes like `Bad` usually return `self` at runtime
   |
38 |         ...  # Y034 "__aenter__" methods in classes like "Bad" usually return "self" at runtime. Consider using "typing_extensions.Self" in "Bad.__aenter__", e.g. "async def __aenter__(self) -> Self: ..."
39 | 
40 |     def __iadd__(self, other: Bad) -> Bad:
   |         ^^^^^^^^ PYI034
41 |         ...  # Y034 "__iadd__" methods in classes like "Bad" usually return "self" at runtime. Consider using "typing_extensions.Self" in "Bad.__iadd__", e.g. "def __iadd__(self, other: Bad) -> Self: ..."
   |
   = help: Consider using `typing_extensions.Self` as return type

PYI034.py:163:9: PYI034 `__iter__` methods in classes like `BadIterator1` usually return `self` at runtime
    |
162 | class BadIterator1(Iterator[int]):
163 |     def __iter__(self) -> Iterator[int]:
    |         ^^^^^^^^ PYI034
164 |         ...  # Y034 "__iter__" methods in classes like "BadIterator1" usually return "self" at runtime. Consider using "typing_extensions.Self" in "BadIterator1.__iter__", e.g. "def __iter__(self) -> Self: ..."
    |
    = help: Consider using `typing_extensions.Self` as return type

PYI034.py:170:9: PYI034 `__iter__` methods in classes like `BadIterator2` usually return `self` at runtime
    |
168 |     typing.Iterator[int]
169 | ):  # Y022 Use "collections.abc.Iterator[T]" instead of "typing.Iterator[T]" (PEP 585 syntax)
170 |     def __iter__(self) -> Iterator[int]:
    |         ^^^^^^^^ PYI034
171 |         ...  # Y034 "__iter__" methods in classes like "BadIterator2" usually return "self" at runtime. Consider using "typing_extensions.Self" in "BadIterator2.__iter__", e.g. "def __iter__(self) -> Self: ..."
    |
    = help: Consider using `typing_extensions.Self` as return type

PYI034.py:177:9: PYI034 `__iter__` methods in classes like `BadIterator3` usually return `self` at runtime
    |
175 |     typing.Iterator[int]
176 | ):  # Y022 Use "collections.abc.Iterator[T]" instead of "typing.Iterator[T]" (PEP 585 syntax)
177 |     def __iter__(self) -> collections.abc.Iterator[int]:
    |         ^^^^^^^^ PYI034
178 |         ...  # Y034 "__iter__" methods in classes like "BadIterator3" usually return "self" at runtime. Consider using "typing_extensions.Self" in "BadIterator3.__iter__", e.g. "def __iter__(self) -> Self: ..."
    |
    = help: Consider using `typing_extensions.Self` as return type

PYI034.py:183:9: PYI034 `__iter__` methods in classes like `BadIterator4` usually return `self` at runtime
    |
181 | class BadIterator4(Iterator[int]):
182 |     # Note: *Iterable*, not *Iterator*, returned!
183 |     def __iter__(self) -> Iterable[int]:
    |         ^^^^^^^^ PYI034
184 |         ...  # Y034 "__iter__" methods in classes like "BadIterator4" usually return "self" at runtime. Consider using "typing_extensions.Self" in "BadIterator4.__iter__", e.g. "def __iter__(self) -> Self: ..."
    |
    = help: Consider using `typing_extensions.Self` as return type

PYI034.py:193:9: PYI034 `__aiter__` methods in classes like `BadAsyncIterator` usually return `self` at runtime
    |
192 | class BadAsyncIterator(collections.abc.AsyncIterator[str]):
193 |     def __aiter__(self) -> typing.AsyncIterator[str]:
    |         ^^^^^^^^^ PYI034
194 |         ...  # Y034 "__aiter__" methods in classes like "BadAsyncIterator" usually return "self" at runtime. Consider using "typing_extensions.Self" in "BadAsyncIterator.__aiter__", e.g. "def __aiter__(self) -> Self: ..."  # Y022 Use "collections.abc.AsyncIterator[T]" instead of "typing.AsyncIterator[T]" (PEP 585 syntax)
    |
    = help: Consider using `typing_extensions.Self` as return type



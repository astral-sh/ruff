---
source: crates/ruff_linter/src/rules/flake8_pyi/mod.rs
snapshot_kind: text
---
PYI019.py:7:62: PYI019 Methods like `__new__` should return `Self` instead of a custom `TypeVar`
  |
6 | class BadClass:
7 |     def __new__(cls: type[_S], *args: str, **kwargs: int) -> _S: ...  # PYI019
  |                                                              ^^ PYI019
  |

PYI019.py:10:54: PYI019 Methods like `bad_instance_method` should return `Self` instead of a custom `TypeVar`
   |
10 |     def bad_instance_method(self: _S, arg: bytes) -> _S: ...  # PYI019
   |                                                      ^^ PYI019
   |

PYI019.py:14:54: PYI019 Methods like `bad_class_method` should return `Self` instead of a custom `TypeVar`
   |
13 |     @classmethod
14 |     def bad_class_method(cls: type[_S], arg: int) -> _S: ...  # PYI019
   |                                                      ^^ PYI019
   |

PYI019.py:18:55: PYI019 Methods like `bad_posonly_class_method` should return `Self` instead of a custom `TypeVar`
   |
17 |     @classmethod
18 |     def bad_posonly_class_method(cls: type[_S], /) -> _S: ...  # PYI019
   |                                                       ^^ PYI019
   |

PYI019.py:39:63: PYI019 Methods like `__new__` should return `Self` instead of a custom `TypeVar`
   |
37 | # Python > 3.12
38 | class PEP695BadDunderNew[T]:
39 |   def __new__[S](cls: type[S], *args: Any, ** kwargs: Any) -> S: ...  # PYI019
   |                                                               ^ PYI019
   |

PYI019.py:42:46: PYI019 Methods like `generic_instance_method` should return `Self` instead of a custom `TypeVar`
   |
42 |   def generic_instance_method[S](self: S) -> S: ...  # PYI019
   |                                              ^ PYI019
   |

PYI019.py:54:32: PYI019 Methods like `foo` should return `Self` instead of a custom `TypeVar`
   |
52 |    # in the settings for this test:
53 |    @foo_classmethod
54 |    def foo[S](cls: type[S]) -> S: ...  # PYI019
   |                                ^ PYI019
   |

PYI019.py:61:48: PYI019 Methods like `__new__` should return `Self` instead of a custom `TypeVar`
   |
59 | # Only .pyi gets fixes, no fixes for .py
60 | class PEP695Fix:
61 |     def __new__[S: PEP695Fix](cls: type[S]) -> S: ...
   |                                                ^ PYI019
62 | 
63 |     def __init_subclass__[S](cls: type[S]) -> S: ...
   |

PYI019.py:63:47: PYI019 Methods like `__init_subclass__` should return `Self` instead of a custom `TypeVar`
   |
61 |     def __new__[S: PEP695Fix](cls: type[S]) -> S: ...
62 | 
63 |     def __init_subclass__[S](cls: type[S]) -> S: ...
   |                                               ^ PYI019
64 | 
65 |     def __neg__[S: PEP695Fix](self: S) -> S: ...
   |

PYI019.py:65:43: PYI019 Methods like `__neg__` should return `Self` instead of a custom `TypeVar`
   |
63 |     def __init_subclass__[S](cls: type[S]) -> S: ...
64 | 
65 |     def __neg__[S: PEP695Fix](self: S) -> S: ...
   |                                           ^ PYI019
66 | 
67 |     def __pos__[S](self: S) -> S: ...
   |

PYI019.py:67:32: PYI019 Methods like `__pos__` should return `Self` instead of a custom `TypeVar`
   |
65 |     def __neg__[S: PEP695Fix](self: S) -> S: ...
66 | 
67 |     def __pos__[S](self: S) -> S: ...
   |                                ^ PYI019
68 | 
69 |     def __add__[S: PEP695Fix](self: S, other: S) -> S: ...
   |

PYI019.py:69:53: PYI019 Methods like `__add__` should return `Self` instead of a custom `TypeVar`
   |
67 |     def __pos__[S](self: S) -> S: ...
68 | 
69 |     def __add__[S: PEP695Fix](self: S, other: S) -> S: ...
   |                                                     ^ PYI019
70 | 
71 |     def __sub__[S](self: S, other: S) -> S: ...
   |

PYI019.py:71:42: PYI019 Methods like `__sub__` should return `Self` instead of a custom `TypeVar`
   |
69 |     def __add__[S: PEP695Fix](self: S, other: S) -> S: ...
70 | 
71 |     def __sub__[S](self: S, other: S) -> S: ...
   |                                          ^ PYI019
72 | 
73 |     @classmethod
   |

PYI019.py:74:59: PYI019 Methods like `class_method_bound` should return `Self` instead of a custom `TypeVar`
   |
73 |     @classmethod
74 |     def class_method_bound[S: PEP695Fix](cls: type[S]) -> S: ...
   |                                                           ^ PYI019
75 | 
76 |     @classmethod
   |

PYI019.py:77:50: PYI019 Methods like `class_method_unbound` should return `Self` instead of a custom `TypeVar`
   |
76 |     @classmethod
77 |     def class_method_unbound[S](cls: type[S]) -> S: ...
   |                                                  ^ PYI019
78 | 
79 |     def instance_method_bound[S: PEP695Fix](self: S) -> S: ...
   |

PYI019.py:79:57: PYI019 Methods like `instance_method_bound` should return `Self` instead of a custom `TypeVar`
   |
77 |     def class_method_unbound[S](cls: type[S]) -> S: ...
78 | 
79 |     def instance_method_bound[S: PEP695Fix](self: S) -> S: ...
   |                                                         ^ PYI019
80 | 
81 |     def instance_method_unbound[S](self: S) -> S: ...
   |

PYI019.py:81:48: PYI019 Methods like `instance_method_unbound` should return `Self` instead of a custom `TypeVar`
   |
79 |     def instance_method_bound[S: PEP695Fix](self: S) -> S: ...
80 | 
81 |     def instance_method_unbound[S](self: S) -> S: ...
   |                                                ^ PYI019
82 | 
83 |     def instance_method_bound_with_another_parameter[S: PEP695Fix](self: S, other: S) -> S: ...
   |

PYI019.py:83:90: PYI019 Methods like `instance_method_bound_with_another_parameter` should return `Self` instead of a custom `TypeVar`
   |
81 |     def instance_method_unbound[S](self: S) -> S: ...
82 | 
83 |     def instance_method_bound_with_another_parameter[S: PEP695Fix](self: S, other: S) -> S: ...
   |                                                                                          ^ PYI019
84 | 
85 |     def instance_method_unbound_with_another_parameter[S](self: S, other: S) -> S: ...
   |

PYI019.py:85:81: PYI019 Methods like `instance_method_unbound_with_another_parameter` should return `Self` instead of a custom `TypeVar`
   |
83 |     def instance_method_bound_with_another_parameter[S: PEP695Fix](self: S, other: S) -> S: ...
84 | 
85 |     def instance_method_unbound_with_another_parameter[S](self: S, other: S) -> S: ...
   |                                                                                 ^ PYI019
86 | 
87 |     def multiple_type_vars[S, *Ts, T](self: S, other: S, /, *args: *Ts, a: T, b: list[T]) -> S: ...
   |

PYI019.py:87:94: PYI019 Methods like `multiple_type_vars` should return `Self` instead of a custom `TypeVar`
   |
85 |     def instance_method_unbound_with_another_parameter[S](self: S, other: S) -> S: ...
86 | 
87 |     def multiple_type_vars[S, *Ts, T](self: S, other: S, /, *args: *Ts, a: T, b: list[T]) -> S: ...
   |                                                                                              ^ PYI019
88 | 
89 |     def mixing_old_and_new_style_type_vars[T](self: _S695, a: T, b: T) -> _S695: ...
   |

PYI019.py:89:75: PYI019 Methods like `mixing_old_and_new_style_type_vars` should return `Self` instead of a custom `TypeVar`
   |
87 |     def multiple_type_vars[S, *Ts, T](self: S, other: S, /, *args: *Ts, a: T, b: list[T]) -> S: ...
88 | 
89 |     def mixing_old_and_new_style_type_vars[T](self: _S695, a: T, b: T) -> _S695: ...
   |                                                                           ^^^^^ PYI019
   |

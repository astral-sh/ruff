---
source: crates/ruff_linter/src/rules/flake8_pyi/mod.rs
---
PYI019_0.pyi:7:62: PYI019 Use `Self` instead of custom TypeVar `_S`
  |
6 | class BadClass:
7 |     def __new__(cls: type[_S], *args: str, **kwargs: int) -> _S: ...  # PYI019
  |                                                              ^^ PYI019
  |
  = help: Replace TypeVar `_S` with `Self`

PYI019_0.pyi:10:54: PYI019 Use `Self` instead of custom TypeVar `_S`
   |
10 |     def bad_instance_method(self: _S, arg: bytes) -> _S: ...  # PYI019
   |                                                      ^^ PYI019
   |
   = help: Replace TypeVar `_S` with `Self`

PYI019_0.pyi:14:54: PYI019 Use `Self` instead of custom TypeVar `_S`
   |
13 |     @classmethod
14 |     def bad_class_method(cls: type[_S], arg: int) -> _S: ...  # PYI019
   |                                                      ^^ PYI019
   |
   = help: Replace TypeVar `_S` with `Self`

PYI019_0.pyi:18:55: PYI019 Use `Self` instead of custom TypeVar `_S`
   |
17 |     @classmethod
18 |     def bad_posonly_class_method(cls: type[_S], /) -> _S: ...  # PYI019
   |                                                       ^^ PYI019
   |
   = help: Replace TypeVar `_S` with `Self`

PYI019_0.pyi:39:63: PYI019 Use `Self` instead of custom TypeVar `S`
   |
37 | # Python > 3.12
38 | class PEP695BadDunderNew[T]:
39 |   def __new__[S](cls: type[S], *args: Any, ** kwargs: Any) -> S: ...  # PYI019
   |                                                               ^ PYI019
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:42:46: PYI019 Use `Self` instead of custom TypeVar `S`
   |
42 |   def generic_instance_method[S](self: S) -> S: ...  # PYI019
   |                                              ^ PYI019
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:54:32: PYI019 Use `Self` instead of custom TypeVar `S`
   |
52 |    # in the settings for this test:
53 |    @foo_classmethod
54 |    def foo[S](cls: type[S]) -> S: ...  # PYI019
   |                                ^ PYI019
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:61:48: PYI019 Use `Self` instead of custom TypeVar `S`
   |
59 | # Only .pyi gets fixes, no fixes for .py
60 | class PEP695Fix:
61 |     def __new__[S: PEP695Fix](cls: type[S]) -> S: ...
   |                                                ^ PYI019
62 |
63 |     def __init_subclass__[S](cls: type[S]) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:63:47: PYI019 Use `Self` instead of custom TypeVar `S`
   |
61 |     def __new__[S: PEP695Fix](cls: type[S]) -> S: ...
62 |
63 |     def __init_subclass__[S](cls: type[S]) -> S: ...
   |                                               ^ PYI019
64 |
65 |     def __neg__[S: PEP695Fix](self: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:65:43: PYI019 Use `Self` instead of custom TypeVar `S`
   |
63 |     def __init_subclass__[S](cls: type[S]) -> S: ...
64 |
65 |     def __neg__[S: PEP695Fix](self: S) -> S: ...
   |                                           ^ PYI019
66 |
67 |     def __pos__[S](self: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:67:32: PYI019 Use `Self` instead of custom TypeVar `S`
   |
65 |     def __neg__[S: PEP695Fix](self: S) -> S: ...
66 |
67 |     def __pos__[S](self: S) -> S: ...
   |                                ^ PYI019
68 |
69 |     def __add__[S: PEP695Fix](self: S, other: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:69:53: PYI019 Use `Self` instead of custom TypeVar `S`
   |
67 |     def __pos__[S](self: S) -> S: ...
68 |
69 |     def __add__[S: PEP695Fix](self: S, other: S) -> S: ...
   |                                                     ^ PYI019
70 |
71 |     def __sub__[S](self: S, other: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:71:42: PYI019 Use `Self` instead of custom TypeVar `S`
   |
69 |     def __add__[S: PEP695Fix](self: S, other: S) -> S: ...
70 |
71 |     def __sub__[S](self: S, other: S) -> S: ...
   |                                          ^ PYI019
72 |
73 |     @classmethod
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:74:59: PYI019 Use `Self` instead of custom TypeVar `S`
   |
73 |     @classmethod
74 |     def class_method_bound[S: PEP695Fix](cls: type[S]) -> S: ...
   |                                                           ^ PYI019
75 |
76 |     @classmethod
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:77:50: PYI019 Use `Self` instead of custom TypeVar `S`
   |
76 |     @classmethod
77 |     def class_method_unbound[S](cls: type[S]) -> S: ...
   |                                                  ^ PYI019
78 |
79 |     def instance_method_bound[S: PEP695Fix](self: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:79:57: PYI019 Use `Self` instead of custom TypeVar `S`
   |
77 |     def class_method_unbound[S](cls: type[S]) -> S: ...
78 |
79 |     def instance_method_bound[S: PEP695Fix](self: S) -> S: ...
   |                                                         ^ PYI019
80 |
81 |     def instance_method_unbound[S](self: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:81:48: PYI019 Use `Self` instead of custom TypeVar `S`
   |
79 |     def instance_method_bound[S: PEP695Fix](self: S) -> S: ...
80 |
81 |     def instance_method_unbound[S](self: S) -> S: ...
   |                                                ^ PYI019
82 |
83 |     def instance_method_bound_with_another_parameter[S: PEP695Fix](self: S, other: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:83:90: PYI019 Use `Self` instead of custom TypeVar `S`
   |
81 |     def instance_method_unbound[S](self: S) -> S: ...
82 |
83 |     def instance_method_bound_with_another_parameter[S: PEP695Fix](self: S, other: S) -> S: ...
   |                                                                                          ^ PYI019
84 |
85 |     def instance_method_unbound_with_another_parameter[S](self: S, other: S) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:85:81: PYI019 Use `Self` instead of custom TypeVar `S`
   |
83 |     def instance_method_bound_with_another_parameter[S: PEP695Fix](self: S, other: S) -> S: ...
84 |
85 |     def instance_method_unbound_with_another_parameter[S](self: S, other: S) -> S: ...
   |                                                                                 ^ PYI019
86 |
87 |     def multiple_type_vars[S, *Ts, T](self: S, other: S, /, *args: *Ts, a: T, b: list[T]) -> S: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:87:94: PYI019 Use `Self` instead of custom TypeVar `S`
   |
85 |     def instance_method_unbound_with_another_parameter[S](self: S, other: S) -> S: ...
86 |
87 |     def multiple_type_vars[S, *Ts, T](self: S, other: S, /, *args: *Ts, a: T, b: list[T]) -> S: ...
   |                                                                                              ^ PYI019
88 |
89 |     def mixing_old_and_new_style_type_vars[T](self: _S695, a: T, b: T) -> _S695: ...
   |
   = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:89:75: PYI019 Use `Self` instead of custom TypeVar `_S695`
   |
87 |     def multiple_type_vars[S, *Ts, T](self: S, other: S, /, *args: *Ts, a: T, b: list[T]) -> S: ...
88 |
89 |     def mixing_old_and_new_style_type_vars[T](self: _S695, a: T, b: T) -> _S695: ...
   |                                                                           ^^^^^ PYI019
   |
   = help: Replace TypeVar `_S695` with `Self`

PYI019_0.pyi:114:31: PYI019 Use `Self` instead of custom TypeVar `S`
    |
112 | class SubscriptReturnType:
113 |     @classmethod
114 |     def m[S](cls: type[S]) -> type[S]: ...  # PYI019
    |                               ^^^^^^^ PYI019
    |
    = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:118:29: PYI019 Use `Self` instead of custom TypeVar `S`
    |
117 | class PEP695TypeParameterAtTheVeryEndOfTheList:
118 |     def f[T, S](self: S) -> S: ...
    |                             ^ PYI019
    |
    = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:122:100: PYI019 Use `Self` instead of custom TypeVar `_S695`
    |
121 | class PEP695Again:
122 |     def mixing_and_nested[T](self: _S695, a: list[_S695], b: dict[_S695, str | T | set[_S695]]) -> _S695: ...
    |                                                                                                    ^^^^^ PYI019
123 |     def also_uses_s695_but_should_not_be_edited(self, v: set[tuple[_S695]]) -> _S695: ...
    |
    = help: Replace TypeVar `_S695` with `Self`

PYI019_0.pyi:132:10: PYI019 Use `Self` instead of custom TypeVar `S`
    |
130 |         a: T,
131 |         b: tuple[S, T]
132 |     ) -> S: ...
    |          ^ PYI019
133 |
134 |     def comment_outside_fix_range[T, S](
    |
    = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:141:10: PYI019 Use `Self` instead of custom TypeVar `S`
    |
139 |             S, T
140 |         ]
141 |     ) -> S: ...
    |          ^ PYI019
    |
    = help: Replace TypeVar `S` with `Self`

PYI019_0.pyi:156:34: PYI019 Use `Self` instead of custom TypeVar `_NotATypeVar`
    |
154 | # but our preview-mode logic is smarter about this.
155 | class Foo:
156 |     def x(self: _NotATypeVar) -> _NotATypeVar: ...
    |                                  ^^^^^^^^^^^^ PYI019
157 |     @classmethod
158 |     def y(self: type[_NotATypeVar]) -> _NotATypeVar: ...
    |
    = help: Replace TypeVar `_NotATypeVar` with `Self`

PYI019_0.pyi:158:40: PYI019 Use `Self` instead of custom TypeVar `_NotATypeVar`
    |
156 |     def x(self: _NotATypeVar) -> _NotATypeVar: ...
157 |     @classmethod
158 |     def y(self: type[_NotATypeVar]) -> _NotATypeVar: ...
    |                                        ^^^^^^^^^^^^ PYI019
159 |
160 | class NoReturnAnnotations:
    |
    = help: Replace TypeVar `_NotATypeVar` with `Self`

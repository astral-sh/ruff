---
source: crates/ruff_linter/src/rules/flake8_type_checking/mod.rs
---
TC002 [*] Move third-party import `django.contrib.auth.models.AbstractBaseUser` into a type-checking block
 --> quote3.py:4:44
  |
2 |     from typing import Literal, Union
3 |
4 |     from django.contrib.auth.models import AbstractBaseUser
  |                                            ^^^^^^^^^^^^^^^^
5 |
6 |     def test_union_literal_mixed_quotes(user: AbstractBaseUser[Union[Literal['active', "inactive"], str]]):
  |
help: Move into type-checking block
1  + from typing import TYPE_CHECKING
2  + 
3  + if TYPE_CHECKING:
4  +     from django.contrib.auth.models import AbstractBaseUser
5  | def f():
6  |     from typing import Literal, Union
7  | 
   -     from django.contrib.auth.models import AbstractBaseUser
8  | 
   -     def test_union_literal_mixed_quotes(user: AbstractBaseUser[Union[Literal['active', "inactive"], str]]):
9  +     def test_union_literal_mixed_quotes(user: 'AbstractBaseUser[Union[Literal["active", "inactive"], str]]'):
10 |         pass
11 | 
12 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

TC002 [*] Move third-party import `django.contrib.auth.models.AbstractBaseUser` into a type-checking block
  --> quote3.py:13:44
   |
11 |     from typing import Callable, Literal
12 |
13 |     from django.contrib.auth.models import AbstractBaseUser
   |                                            ^^^^^^^^^^^^^^^^
14 |
15 |     def test_callable_literal_mixed_quotes(callable_fn: AbstractBaseUser[Callable[["int", Literal['admin', "user"]], 'bool']]):
   |
help: Move into type-checking block
1  + from typing import TYPE_CHECKING
2  + 
3  + if TYPE_CHECKING:
4  +     from django.contrib.auth.models import AbstractBaseUser
5  | def f():
6  |     from typing import Literal, Union
7  | 
--------------------------------------------------------------------------------
14 | def f():
15 |     from typing import Callable, Literal
16 | 
   -     from django.contrib.auth.models import AbstractBaseUser
17 | 
   -     def test_callable_literal_mixed_quotes(callable_fn: AbstractBaseUser[Callable[["int", Literal['admin', "user"]], 'bool']]):
18 +     def test_callable_literal_mixed_quotes(callable_fn: 'AbstractBaseUser[Callable[[int, Literal["admin", "user"]], bool]]'):
19 |         pass
20 | 
21 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

TC002 [*] Move third-party import `django.contrib.auth.models.AbstractBaseUser` into a type-checking block
  --> quote3.py:22:44
   |
20 |     from typing import Annotated, Callable, Literal
21 |
22 |     from django.contrib.auth.models import AbstractBaseUser
   |                                            ^^^^^^^^^^^^^^^^
23 |
24 |     def test_callable_annotated_literal(callable_fn: AbstractBaseUser[Callable[[int, Annotated[str, Literal['active', "inactive"]]], bâ€¦
   |
help: Move into type-checking block
1  + from typing import TYPE_CHECKING
2  + 
3  + if TYPE_CHECKING:
4  +     from django.contrib.auth.models import AbstractBaseUser
5  | def f():
6  |     from typing import Literal, Union
7  | 
--------------------------------------------------------------------------------
23 | def f():
24 |     from typing import Annotated, Callable, Literal
25 | 
   -     from django.contrib.auth.models import AbstractBaseUser
26 | 
   -     def test_callable_annotated_literal(callable_fn: AbstractBaseUser[Callable[[int, Annotated[str, Literal['active', "inactive"]]], bool]]):
27 +     def test_callable_annotated_literal(callable_fn: 'AbstractBaseUser[Callable[[int, Annotated[str, Literal["active", "inactive"]]], bool]]'):
28 |         pass
29 | 
30 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

TC002 [*] Move third-party import `django.contrib.auth.models` into a type-checking block
  --> quote3.py:31:37
   |
29 |     from typing import literal
30 |
31 |     from django.contrib.auth import models
   |                                     ^^^^^^
32 |
33 |     def test_attribute(arg: models.AbstractBaseUser["int"]):
   |
help: Move into type-checking block
1  + from typing import TYPE_CHECKING
2  + 
3  + if TYPE_CHECKING:
4  +     from django.contrib.auth import models
5  | def f():
6  |     from typing import Literal, Union
7  | 
--------------------------------------------------------------------------------
32 | def f():
33 |     from typing import literal
34 | 
   -     from django.contrib.auth import models
35 | 
   -     def test_attribute(arg: models.AbstractBaseUser["int"]):
36 +     def test_attribute(arg: 'models.AbstractBaseUser[int]'):
37 |         pass
38 | 
39 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

TC002 [*] Move third-party import `django.contrib.auth.models` into a type-checking block
  --> quote3.py:40:37
   |
38 |     from typing import Literal
39 |
40 |     from django.contrib.auth import models
   |                                     ^^^^^^
41 |
42 |     def test_attribute_typing_literal(arg: models.AbstractBaseUser[Literal["admin"]]):
   |
help: Move into type-checking block
1  + from typing import TYPE_CHECKING
2  + 
3  + if TYPE_CHECKING:
4  +     from django.contrib.auth import models
5  | def f():
6  |     from typing import Literal, Union
7  | 
--------------------------------------------------------------------------------
41 | def f():
42 |     from typing import Literal
43 | 
   -     from django.contrib.auth import models
44 | 
   -     def test_attribute_typing_literal(arg: models.AbstractBaseUser[Literal["admin"]]):
45 +     def test_attribute_typing_literal(arg: 'models.AbstractBaseUser[Literal["admin"]]'):
46 |         pass
47 | 
48 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

TC002 [*] Move third-party import `third_party.Type` into a type-checking block
  --> quote3.py:59:29
   |
57 | def f():
58 |     from typing import Literal
59 |     from third_party import Type
   |                             ^^^^
60 |
61 |     def test_string_contains_opposite_quote(self, type1: Type[Literal["'"]], type2: Type[Literal["\'"]]):
   |
help: Move into type-checking block
1  + from typing import TYPE_CHECKING
2  + 
3  + if TYPE_CHECKING:
4  +     from third_party import Type
5  | def f():
6  |     from typing import Literal, Union
7  | 
--------------------------------------------------------------------------------
60 | 
61 | def f():
62 |     from typing import Literal
   -     from third_party import Type
63 | 
   -     def test_string_contains_opposite_quote(self, type1: Type[Literal["'"]], type2: Type[Literal["\'"]]):
64 +     def test_string_contains_opposite_quote(self, type1: 'Type[Literal["\'"]]', type2: 'Type[Literal["\'"]]'):
65 |         pass
66 | 
67 | 
note: This is an unsafe fix and may remove comments or change runtime behavior

TC002 [*] Move third-party import `third_party.Type` into a type-checking block
  --> quote3.py:67:29
   |
65 | def f():
66 |     from typing import Literal
67 |     from third_party import Type
   |                             ^^^^
68 |
69 |     def test_quote_contains_backslash(self, type1: Type[Literal["\n"]], type2: Type[Literal["\""]]):
   |
help: Move into type-checking block
1  + from typing import TYPE_CHECKING
2  + 
3  + if TYPE_CHECKING:
4  +     from third_party import Type
5  | def f():
6  |     from typing import Literal, Union
7  | 
--------------------------------------------------------------------------------
68 | 
69 | def f():
70 |     from typing import Literal
   -     from third_party import Type
71 | 
   -     def test_quote_contains_backslash(self, type1: Type[Literal["\n"]], type2: Type[Literal["\""]]):
72 +     def test_quote_contains_backslash(self, type1: 'Type[Literal["\\n"]]', type2: 'Type[Literal[\'"\']]'):
73 |         pass
note: This is an unsafe fix and may remove comments or change runtime behavior

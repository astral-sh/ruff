---
source: crates/ruff_linter/src/rules/flake8_errmsg/mod.rs
---
EM.py:5:24: EM101 [*] Exception must not use a string literal, assign to variable first
  |
4 | def f_a():
5 |     raise RuntimeError("This is an example exception")
  |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
  |
  = help: Assign to variable; remove string literal


EM.py:9:24: EM101 [*] Exception must not use a string literal, assign to variable first
  |
8 | def f_a_short():
9 |     raise RuntimeError("Error")
  |                        ^^^^^^^ EM101
  |
  = help: Assign to variable; remove string literal


EM.py:13:24: EM101 [*] Exception must not use a string literal, assign to variable first
   |
12 | def f_a_empty():
13 |     raise RuntimeError("")
   |                        ^^ EM101
   |
   = help: Assign to variable; remove string literal


EM.py:18:24: EM102 [*] Exception must not use an f-string literal, assign to variable first
   |
16 | def f_b():
17 |     example = "example"
18 |     raise RuntimeError(f"This is an {example} exception")
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
   |
   = help: Assign to variable; remove f-string literal


EM.py:22:24: EM103 [*] Exception must not use a `.format()` string directly, assign to variable first
   |
21 | def f_c():
22 |     raise RuntimeError("This is an {example} exception".format(example="example"))
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM103
   |
   = help: Assign to variable; remove `.format()` string


EM.py:32:24: EM101 [*] Exception must not use a string literal, assign to variable first
   |
30 | def f_msg_defined():
31 |     msg = "hello"
32 |     raise RuntimeError("This is an example exception")
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
   |
   = help: Assign to variable; remove string literal


EM.py:39:24: EM101 [*] Exception must not use a string literal, assign to variable first
   |
37 |         msg = "hello"
38 | 
39 |     raise RuntimeError("This is an example exception")
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
   |
   = help: Assign to variable; remove string literal


EM.py:46:28: EM101 [*] Exception must not use a string literal, assign to variable first
   |
45 |     def nested():
46 |         raise RuntimeError("This is an example exception")
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
   |
   = help: Assign to variable; remove string literal


EM.py:51:28: EM101 [*] Exception must not use a string literal, assign to variable first
   |
49 | def f_fix_indentation_check(foo):
50 |     if foo:
51 |         raise RuntimeError("This is an example exception")
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
52 |     else:
53 |         if foo == "foo":
   |
   = help: Assign to variable; remove string literal


EM.py:54:32: EM102 [*] Exception must not use an f-string literal, assign to variable first
   |
52 |     else:
53 |         if foo == "foo":
54 |             raise RuntimeError(f"This is an exception: {foo}")
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
55 |     raise RuntimeError("This is an exception: {}".format(foo))
   |
   = help: Assign to variable; remove f-string literal


EM.py:55:24: EM103 [*] Exception must not use a `.format()` string directly, assign to variable first
   |
53 |         if foo == "foo":
54 |             raise RuntimeError(f"This is an exception: {foo}")
55 |     raise RuntimeError("This is an exception: {}".format(foo))
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM103
   |
   = help: Assign to variable; remove `.format()` string


EM.py:59:28: EM101 Exception must not use a string literal, assign to variable first
   |
58 | # Report these, but don't fix them
59 | if foo: raise RuntimeError("This is an example exception")
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
60 | if foo: x = 1; raise RuntimeError("This is an example exception")
   |
   = help: Assign to variable; remove string literal

EM.py:60:35: EM101 Exception must not use a string literal, assign to variable first
   |
58 | # Report these, but don't fix them
59 | if foo: raise RuntimeError("This is an example exception")
60 | if foo: x = 1; raise RuntimeError("This is an example exception")
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
   |
   = help: Assign to variable; remove string literal

EM.py:64:24: EM102 [*] Exception must not use an f-string literal, assign to variable first
   |
63 | def f_triple_quoted_string():
64 |     raise RuntimeError(f"""This is an {"example"} exception""")
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
   |
   = help: Assign to variable; remove f-string literal


EM.py:69:9: EM101 [*] Exception must not use a string literal, assign to variable first
   |
67 |   def f_multi_line_string():
68 |       raise RuntimeError(
69 |           "first"
   |  _________^
70 | |         "second"
   | |________________^ EM101
71 |       )
   |
   = help: Assign to variable; remove string literal


EM.py:76:9: EM103 [*] Exception must not use a `.format()` string directly, assign to variable first
   |
74 |   def f_multi_line_string2():
75 |       raise RuntimeError(
76 |           "This is an {example} exception".format(
   |  _________^
77 | |             example="example"
78 | |         )
   | |_________^ EM103
79 |       )
   |
   = help: Assign to variable; remove `.format()` string


EM.py:84:9: EM103 [*] Exception must not use a `.format()` string directly, assign to variable first
   |
82 |   def f_multi_line_string2():
83 |       raise RuntimeError(
84 |           (
   |  _________^
85 | |             "This is an "
86 | |             "{example} exception"
87 | |         ).format(
88 | |             example="example"
89 | |         )
   | |_________^ EM103
90 |       )
   |
   = help: Assign to variable; remove `.format()` string

---
source: crates/ruff_linter/src/rules/flake8_use_pathlib/mod.rs
---
PTH100 [*] `os.path.abspath()` should be replaced by `Path.resolve()`
 --> full_name.py:7:5
  |
5 | q = "bar"
6 |
7 | a = os.path.abspath(p)
  |     ^^^^^^^^^^^^^^^
8 | aa = os.chmod(p)
9 | aaa = os.mkdir(p)
  |
help: Replace with `Path(...).resolve()`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
7  | 
   - a = os.path.abspath(p)
8  + a = pathlib.Path(p).resolve()
9  | aa = os.chmod(p)
10 | aaa = os.mkdir(p)
11 | os.makedirs(p)
note: This is an unsafe fix and may change runtime behavior

PTH101 `os.chmod()` should be replaced by `Path.chmod()`
  --> full_name.py:8:6
   |
 7 | a = os.path.abspath(p)
 8 | aa = os.chmod(p)
   |      ^^^^^^^^
 9 | aaa = os.mkdir(p)
10 | os.makedirs(p)
   |
help: Replace with `Path(...).chmod(...)`

PTH102 [*] `os.mkdir()` should be replaced by `Path.mkdir()`
  --> full_name.py:9:7
   |
 7 | a = os.path.abspath(p)
 8 | aa = os.chmod(p)
 9 | aaa = os.mkdir(p)
   |       ^^^^^^^^
10 | os.makedirs(p)
11 | os.rename(p)
   |
help: Replace with `Path(...).mkdir()`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
7  | 
8  | a = os.path.abspath(p)
9  | aa = os.chmod(p)
   - aaa = os.mkdir(p)
10 + aaa = pathlib.Path(p).mkdir()
11 | os.makedirs(p)
12 | os.rename(p)
13 | os.replace(p)

PTH103 [*] `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
  --> full_name.py:10:1
   |
 8 | aa = os.chmod(p)
 9 | aaa = os.mkdir(p)
10 | os.makedirs(p)
   | ^^^^^^^^^^^
11 | os.rename(p)
12 | os.replace(p)
   |
help: Replace with `Path(...).mkdir(parents=True)`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
--------------------------------------------------------------------------------
8  | a = os.path.abspath(p)
9  | aa = os.chmod(p)
10 | aaa = os.mkdir(p)
   - os.makedirs(p)
11 + pathlib.Path(p).mkdir(parents=True)
12 | os.rename(p)
13 | os.replace(p)
14 | os.rmdir(p)

PTH104 `os.rename()` should be replaced by `Path.rename()`
  --> full_name.py:11:1
   |
 9 | aaa = os.mkdir(p)
10 | os.makedirs(p)
11 | os.rename(p)
   | ^^^^^^^^^
12 | os.replace(p)
13 | os.rmdir(p)
   |
help: Replace with `Path(...).rename(...)`

PTH105 `os.replace()` should be replaced by `Path.replace()`
  --> full_name.py:12:1
   |
10 | os.makedirs(p)
11 | os.rename(p)
12 | os.replace(p)
   | ^^^^^^^^^^
13 | os.rmdir(p)
14 | os.remove(p)
   |
help: Replace with `Path(...).replace(...)`

PTH106 [*] `os.rmdir()` should be replaced by `Path.rmdir()`
  --> full_name.py:13:1
   |
11 | os.rename(p)
12 | os.replace(p)
13 | os.rmdir(p)
   | ^^^^^^^^
14 | os.remove(p)
15 | os.unlink(p)
   |
help: Replace with `Path(...).rmdir()`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
--------------------------------------------------------------------------------
11 | os.makedirs(p)
12 | os.rename(p)
13 | os.replace(p)
   - os.rmdir(p)
14 + pathlib.Path(p).rmdir()
15 | os.remove(p)
16 | os.unlink(p)
17 | os.getcwd(p)

PTH107 [*] `os.remove()` should be replaced by `Path.unlink()`
  --> full_name.py:14:1
   |
12 | os.replace(p)
13 | os.rmdir(p)
14 | os.remove(p)
   | ^^^^^^^^^
15 | os.unlink(p)
16 | os.getcwd(p)
   |
help: Replace with `Path(...).unlink()`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
--------------------------------------------------------------------------------
12 | os.rename(p)
13 | os.replace(p)
14 | os.rmdir(p)
   - os.remove(p)
15 + pathlib.Path(p).unlink()
16 | os.unlink(p)
17 | os.getcwd(p)
18 | b = os.path.exists(p)

PTH108 [*] `os.unlink()` should be replaced by `Path.unlink()`
  --> full_name.py:15:1
   |
13 | os.rmdir(p)
14 | os.remove(p)
15 | os.unlink(p)
   | ^^^^^^^^^
16 | os.getcwd(p)
17 | b = os.path.exists(p)
   |
help: Replace with `Path(...).unlink()`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
--------------------------------------------------------------------------------
13 | os.replace(p)
14 | os.rmdir(p)
15 | os.remove(p)
   - os.unlink(p)
16 + pathlib.Path(p).unlink()
17 | os.getcwd(p)
18 | b = os.path.exists(p)
19 | bb = os.path.expanduser(p)

PTH109 `os.getcwd()` should be replaced by `Path.cwd()`
  --> full_name.py:16:1
   |
14 | os.remove(p)
15 | os.unlink(p)
16 | os.getcwd(p)
   | ^^^^^^^^^
17 | b = os.path.exists(p)
18 | bb = os.path.expanduser(p)
   |
help: Replace with `Path.cwd()`

PTH110 [*] `os.path.exists()` should be replaced by `Path.exists()`
  --> full_name.py:17:5
   |
15 | os.unlink(p)
16 | os.getcwd(p)
17 | b = os.path.exists(p)
   |     ^^^^^^^^^^^^^^
18 | bb = os.path.expanduser(p)
19 | bbb = os.path.isdir(p)
   |
help: Replace with `Path(...).exists()`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
--------------------------------------------------------------------------------
15 | os.remove(p)
16 | os.unlink(p)
17 | os.getcwd(p)
   - b = os.path.exists(p)
18 + b = pathlib.Path(p).exists()
19 | bb = os.path.expanduser(p)
20 | bbb = os.path.isdir(p)
21 | bbbb = os.path.isfile(p)

PTH111 [*] `os.path.expanduser()` should be replaced by `Path.expanduser()`
  --> full_name.py:18:6
   |
16 | os.getcwd(p)
17 | b = os.path.exists(p)
18 | bb = os.path.expanduser(p)
   |      ^^^^^^^^^^^^^^^^^^
19 | bbb = os.path.isdir(p)
20 | bbbb = os.path.isfile(p)
   |
help: Replace with `Path(...).expanduser()`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
--------------------------------------------------------------------------------
16 | os.unlink(p)
17 | os.getcwd(p)
18 | b = os.path.exists(p)
   - bb = os.path.expanduser(p)
19 + bb = pathlib.Path(p).expanduser()
20 | bbb = os.path.isdir(p)
21 | bbbb = os.path.isfile(p)
22 | bbbbb = os.path.islink(p)

PTH112 [*] `os.path.isdir()` should be replaced by `Path.is_dir()`
  --> full_name.py:19:7
   |
17 | b = os.path.exists(p)
18 | bb = os.path.expanduser(p)
19 | bbb = os.path.isdir(p)
   |       ^^^^^^^^^^^^^
20 | bbbb = os.path.isfile(p)
21 | bbbbb = os.path.islink(p)
   |
help: Replace with `Path(...).is_dir()`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
--------------------------------------------------------------------------------
17 | os.getcwd(p)
18 | b = os.path.exists(p)
19 | bb = os.path.expanduser(p)
   - bbb = os.path.isdir(p)
20 + bbb = pathlib.Path(p).is_dir()
21 | bbbb = os.path.isfile(p)
22 | bbbbb = os.path.islink(p)
23 | os.readlink(p)

PTH113 [*] `os.path.isfile()` should be replaced by `Path.is_file()`
  --> full_name.py:20:8
   |
18 | bb = os.path.expanduser(p)
19 | bbb = os.path.isdir(p)
20 | bbbb = os.path.isfile(p)
   |        ^^^^^^^^^^^^^^
21 | bbbbb = os.path.islink(p)
22 | os.readlink(p)
   |
help: Replace with `Path(...).is_file()`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
--------------------------------------------------------------------------------
18 | b = os.path.exists(p)
19 | bb = os.path.expanduser(p)
20 | bbb = os.path.isdir(p)
   - bbbb = os.path.isfile(p)
21 + bbbb = pathlib.Path(p).is_file()
22 | bbbbb = os.path.islink(p)
23 | os.readlink(p)
24 | os.stat(p)

PTH114 [*] `os.path.islink()` should be replaced by `Path.is_symlink()`
  --> full_name.py:21:9
   |
19 | bbb = os.path.isdir(p)
20 | bbbb = os.path.isfile(p)
21 | bbbbb = os.path.islink(p)
   |         ^^^^^^^^^^^^^^
22 | os.readlink(p)
23 | os.stat(p)
   |
help: Replace with `Path(...).is_symlink()`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
--------------------------------------------------------------------------------
19 | bb = os.path.expanduser(p)
20 | bbb = os.path.isdir(p)
21 | bbbb = os.path.isfile(p)
   - bbbbb = os.path.islink(p)
22 + bbbbb = pathlib.Path(p).is_symlink()
23 | os.readlink(p)
24 | os.stat(p)
25 | os.path.isabs(p)

PTH115 [*] `os.readlink()` should be replaced by `Path.readlink()`
  --> full_name.py:22:1
   |
20 | bbbb = os.path.isfile(p)
21 | bbbbb = os.path.islink(p)
22 | os.readlink(p)
   | ^^^^^^^^^^^
23 | os.stat(p)
24 | os.path.isabs(p)
   |
help: Replace with `Path(...).readlink()`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
--------------------------------------------------------------------------------
20 | bbb = os.path.isdir(p)
21 | bbbb = os.path.isfile(p)
22 | bbbbb = os.path.islink(p)
   - os.readlink(p)
23 + pathlib.Path(p).readlink()
24 | os.stat(p)
25 | os.path.isabs(p)
26 | os.path.join(p, q)

PTH116 `os.stat()` should be replaced by `Path.stat()`, `Path.owner()`, or `Path.group()`
  --> full_name.py:23:1
   |
21 | bbbbb = os.path.islink(p)
22 | os.readlink(p)
23 | os.stat(p)
   | ^^^^^^^
24 | os.path.isabs(p)
25 | os.path.join(p, q)
   |

PTH117 [*] `os.path.isabs()` should be replaced by `Path.is_absolute()`
  --> full_name.py:24:1
   |
22 | os.readlink(p)
23 | os.stat(p)
24 | os.path.isabs(p)
   | ^^^^^^^^^^^^^
25 | os.path.join(p, q)
26 | os.sep.join([p, q])
   |
help: Replace with `Path(...).is_absolute()`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
--------------------------------------------------------------------------------
22 | bbbbb = os.path.islink(p)
23 | os.readlink(p)
24 | os.stat(p)
   - os.path.isabs(p)
25 + pathlib.Path(p).is_absolute()
26 | os.path.join(p, q)
27 | os.sep.join([p, q])
28 | os.sep.join((p, q))

PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
  --> full_name.py:25:1
   |
23 | os.stat(p)
24 | os.path.isabs(p)
25 | os.path.join(p, q)
   | ^^^^^^^^^^^^
26 | os.sep.join([p, q])
27 | os.sep.join((p, q))
   |

PTH118 `os.sep.join()` should be replaced by `Path` with `/` operator
  --> full_name.py:26:1
   |
24 | os.path.isabs(p)
25 | os.path.join(p, q)
26 | os.sep.join([p, q])
   | ^^^^^^^^^^^
27 | os.sep.join((p, q))
28 | os.path.basename(p)
   |

PTH118 `os.sep.join()` should be replaced by `Path` with `/` operator
  --> full_name.py:27:1
   |
25 | os.path.join(p, q)
26 | os.sep.join([p, q])
27 | os.sep.join((p, q))
   | ^^^^^^^^^^^
28 | os.path.basename(p)
29 | os.path.dirname(p)
   |

PTH119 [*] `os.path.basename()` should be replaced by `Path.name`
  --> full_name.py:28:1
   |
26 | os.sep.join([p, q])
27 | os.sep.join((p, q))
28 | os.path.basename(p)
   | ^^^^^^^^^^^^^^^^
29 | os.path.dirname(p)
30 | os.path.samefile(p)
   |
help: Replace with `Path(...).name`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
--------------------------------------------------------------------------------
26 | os.path.join(p, q)
27 | os.sep.join([p, q])
28 | os.sep.join((p, q))
   - os.path.basename(p)
29 + pathlib.Path(p).name
30 | os.path.dirname(p)
31 | os.path.samefile(p)
32 | os.path.splitext(p)
note: This is an unsafe fix and may change runtime behavior

PTH120 [*] `os.path.dirname()` should be replaced by `Path.parent`
  --> full_name.py:29:1
   |
27 | os.sep.join((p, q))
28 | os.path.basename(p)
29 | os.path.dirname(p)
   | ^^^^^^^^^^^^^^^
30 | os.path.samefile(p)
31 | os.path.splitext(p)
   |
help: Replace with `Path(...).parent`
1  | import os
2  | import os.path
3  + import pathlib
4  | 
5  | p = "/foo"
6  | q = "bar"
--------------------------------------------------------------------------------
27 | os.sep.join([p, q])
28 | os.sep.join((p, q))
29 | os.path.basename(p)
   - os.path.dirname(p)
30 + pathlib.Path(p).parent
31 | os.path.samefile(p)
32 | os.path.splitext(p)
33 | with open(p) as fp:
note: This is an unsafe fix and may change runtime behavior

PTH121 `os.path.samefile()` should be replaced by `Path.samefile()`
  --> full_name.py:30:1
   |
28 | os.path.basename(p)
29 | os.path.dirname(p)
30 | os.path.samefile(p)
   | ^^^^^^^^^^^^^^^^
31 | os.path.splitext(p)
32 | with open(p) as fp:
   |
help: Replace with `Path(...).samefile()`

PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
  --> full_name.py:31:1
   |
29 | os.path.dirname(p)
30 | os.path.samefile(p)
31 | os.path.splitext(p)
   | ^^^^^^^^^^^^^^^^
32 | with open(p) as fp:
33 |     fp.read()
   |

PTH123 `open()` should be replaced by `Path.open()`
  --> full_name.py:32:6
   |
30 | os.path.samefile(p)
31 | os.path.splitext(p)
32 | with open(p) as fp:
   |      ^^^^
33 |     fp.read()
34 | open(p).close()
   |

PTH123 `open()` should be replaced by `Path.open()`
  --> full_name.py:34:1
   |
32 | with open(p) as fp:
33 |     fp.read()
34 | open(p).close()
   | ^^^^
35 | os.getcwdb(p)
36 | os.path.join(p, *q)
   |

PTH109 `os.getcwd()` should be replaced by `Path.cwd()`
  --> full_name.py:35:1
   |
33 |     fp.read()
34 | open(p).close()
35 | os.getcwdb(p)
   | ^^^^^^^^^^
36 | os.path.join(p, *q)
37 | os.sep.join(p, *q)
   |
help: Replace with `Path.cwd()`

PTH118 `os.path.join()` should be replaced by `Path.joinpath()`
  --> full_name.py:36:1
   |
34 | open(p).close()
35 | os.getcwdb(p)
36 | os.path.join(p, *q)
   | ^^^^^^^^^^^^
37 | os.sep.join(p, *q)
   |

PTH118 `os.sep.join()` should be replaced by `Path.joinpath()`
  --> full_name.py:37:1
   |
35 | os.getcwdb(p)
36 | os.path.join(p, *q)
37 | os.sep.join(p, *q)
   | ^^^^^^^^^^^
38 |
39 | # https://github.com/astral-sh/ruff/issues/7620
   |

PTH123 `open()` should be replaced by `Path.open()`
  --> full_name.py:46:1
   |
44 | open(p, closefd=False)
45 | open(p, opener=opener)
46 | open(p, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
   | ^^^^
47 | open(p, 'r', - 1, None, None, None, True, None)
48 | open(p, 'r', - 1, None, None, None, False, opener)
   |

PTH123 `open()` should be replaced by `Path.open()`
  --> full_name.py:47:1
   |
45 | open(p, opener=opener)
46 | open(p, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
47 | open(p, 'r', - 1, None, None, None, True, None)
   | ^^^^
48 | open(p, 'r', - 1, None, None, None, False, opener)
   |

PTH123 `open()` should be replaced by `Path.open()`
  --> full_name.py:65:1
   |
63 | open(f())
64 |
65 | open(b"foo")
   | ^^^^
66 | byte_str = b"bar"
67 | open(byte_str)
   |

PTH123 `open()` should be replaced by `Path.open()`
  --> full_name.py:67:1
   |
65 | open(b"foo")
66 | byte_str = b"bar"
67 | open(byte_str)
   | ^^^^
68 |
69 | def bytes_str_func() -> bytes:
   |

PTH123 `open()` should be replaced by `Path.open()`
  --> full_name.py:71:1
   |
69 | def bytes_str_func() -> bytes:
70 |     return b"foo"
71 | open(bytes_str_func())
   | ^^^^
72 |
73 | # https://github.com/astral-sh/ruff/issues/17693
   |

PTH109 [*] `os.getcwd()` should be replaced by `Path.cwd()`
   --> full_name.py:108:1
    |
106 | os.replace("src", "dst", dst_dir_fd=2)
107 |
108 | os.getcwd()
    | ^^^^^^^^^
109 | os.getcwdb()
    |
help: Replace with `Path.cwd()`
1   | import os
2   | import os.path
3   + import pathlib
4   | 
5   | p = "/foo"
6   | q = "bar"
--------------------------------------------------------------------------------
106 | os.replace("src", "dst", src_dir_fd=1)
107 | os.replace("src", "dst", dst_dir_fd=2)
108 | 
    - os.getcwd()
109 + pathlib.Path.cwd()
110 | os.getcwdb()
111 | 
112 | os.mkdir(path="directory")

PTH109 [*] `os.getcwd()` should be replaced by `Path.cwd()`
   --> full_name.py:109:1
    |
108 | os.getcwd()
109 | os.getcwdb()
    | ^^^^^^^^^^
110 |
111 | os.mkdir(path="directory")
    |
help: Replace with `Path.cwd()`
1   | import os
2   | import os.path
3   + import pathlib
4   | 
5   | p = "/foo"
6   | q = "bar"
--------------------------------------------------------------------------------
107 | os.replace("src", "dst", dst_dir_fd=2)
108 | 
109 | os.getcwd()
    - os.getcwdb()
110 + pathlib.Path.cwd()
111 | 
112 | os.mkdir(path="directory")
113 | 

PTH102 [*] `os.mkdir()` should be replaced by `Path.mkdir()`
   --> full_name.py:111:1
    |
109 | os.getcwdb()
110 |
111 | os.mkdir(path="directory")
    | ^^^^^^^^
112 |
113 | os.mkdir(
    |
help: Replace with `Path(...).mkdir()`
1   | import os
2   | import os.path
3   + import pathlib
4   | 
5   | p = "/foo"
6   | q = "bar"
--------------------------------------------------------------------------------
109 | os.getcwd()
110 | os.getcwdb()
111 | 
    - os.mkdir(path="directory")
112 + pathlib.Path("directory").mkdir()
113 | 
114 | os.mkdir(
115 |     # comment 1

PTH102 [*] `os.mkdir()` should be replaced by `Path.mkdir()`
   --> full_name.py:113:1
    |
111 | os.mkdir(path="directory")
112 |
113 | os.mkdir(
    | ^^^^^^^^
114 |     # comment 1
115 |     "directory",
    |
help: Replace with `Path(...).mkdir()`
1   | import os
2   | import os.path
3   + import pathlib
4   | 
5   | p = "/foo"
6   | q = "bar"
--------------------------------------------------------------------------------
111 | 
112 | os.mkdir(path="directory")
113 | 
    - os.mkdir(
    -     # comment 1
    -     "directory",
    -     mode=0o777
    - )
114 + pathlib.Path("directory").mkdir(mode=0o777)
115 | 
116 | os.mkdir("directory", mode=0o777, dir_fd=1)
117 | 
note: This is an unsafe fix and may change runtime behavior

PTH103 [*] `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   --> full_name.py:121:1
    |
119 | os.mkdir("directory", mode=0o777, dir_fd=1)
120 |
121 | os.makedirs("name", 0o777, exist_ok=False)
    | ^^^^^^^^^^^
122 |
123 | os.makedirs("name", 0o777, False)
    |
help: Replace with `Path(...).mkdir(parents=True)`
1   | import os
2   | import os.path
3   + import pathlib
4   | 
5   | p = "/foo"
6   | q = "bar"
--------------------------------------------------------------------------------
119 | 
120 | os.mkdir("directory", mode=0o777, dir_fd=1)
121 | 
    - os.makedirs("name", 0o777, exist_ok=False)
122 + pathlib.Path("name").mkdir(0o777, exist_ok=False, parents=True)
123 | 
124 | os.makedirs("name", 0o777, False)
125 | 

PTH103 [*] `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   --> full_name.py:123:1
    |
121 | os.makedirs("name", 0o777, exist_ok=False)
122 |
123 | os.makedirs("name", 0o777, False)
    | ^^^^^^^^^^^
124 |
125 | os.makedirs(name="name", mode=0o777, exist_ok=False)
    |
help: Replace with `Path(...).mkdir(parents=True)`
1   | import os
2   | import os.path
3   + import pathlib
4   | 
5   | p = "/foo"
6   | q = "bar"
--------------------------------------------------------------------------------
121 | 
122 | os.makedirs("name", 0o777, exist_ok=False)
123 | 
    - os.makedirs("name", 0o777, False)
124 + pathlib.Path("name").mkdir(0o777, True, False)
125 | 
126 | os.makedirs(name="name", mode=0o777, exist_ok=False)
127 | 

PTH103 [*] `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   --> full_name.py:125:1
    |
123 | os.makedirs("name", 0o777, False)
124 |
125 | os.makedirs(name="name", mode=0o777, exist_ok=False)
    | ^^^^^^^^^^^
126 |
127 | os.makedirs("name", unknown_kwarg=True)
    |
help: Replace with `Path(...).mkdir(parents=True)`
1   | import os
2   | import os.path
3   + import pathlib
4   | 
5   | p = "/foo"
6   | q = "bar"
--------------------------------------------------------------------------------
123 | 
124 | os.makedirs("name", 0o777, False)
125 | 
    - os.makedirs(name="name", mode=0o777, exist_ok=False)
126 + pathlib.Path("name").mkdir(mode=0o777, exist_ok=False, parents=True)
127 | 
128 | os.makedirs("name", unknown_kwarg=True)

PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   --> full_name.py:127:1
    |
125 | os.makedirs(name="name", mode=0o777, exist_ok=False)
126 |
127 | os.makedirs("name", unknown_kwarg=True)
    | ^^^^^^^^^^^
    |
help: Replace with `Path(...).mkdir(parents=True)`

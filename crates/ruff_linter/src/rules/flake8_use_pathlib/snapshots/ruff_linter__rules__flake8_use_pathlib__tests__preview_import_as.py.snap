---
source: crates/ruff_linter/src/rules/flake8_use_pathlib/mod.rs
---
PTH100 [*] `os.path.abspath()` should be replaced by `Path.resolve()`
 --> import_as.py:7:5
  |
5 | q = "bar"
6 |
7 | a = foo_p.abspath(p)
  |     ^^^^^^^^^^^^^
8 | aa = foo.chmod(p)
9 | aaa = foo.mkdir(p)
  |
help: Replace with `Path(...).resolve()`

ℹ Safe fix
1 1 | import os as foo
2 2 | import os.path as foo_p
  3 |+import pathlib
3 4 | 
4 5 | p = "/foo"
5 6 | q = "bar"
6 7 | 
7   |-a = foo_p.abspath(p)
  8 |+a = pathlib.Path(p).resolve()
8 9 | aa = foo.chmod(p)
9 10 | aaa = foo.mkdir(p)
10 11 | foo.makedirs(p)

PTH101 `os.chmod()` should be replaced by `Path.chmod()`
  --> import_as.py:8:6
   |
 7 | a = foo_p.abspath(p)
 8 | aa = foo.chmod(p)
   |      ^^^^^^^^^
 9 | aaa = foo.mkdir(p)
10 | foo.makedirs(p)
   |
help: Replace with `Path(...).chmod(...)`

PTH102 `os.mkdir()` should be replaced by `Path.mkdir()`
  --> import_as.py:9:7
   |
 7 | a = foo_p.abspath(p)
 8 | aa = foo.chmod(p)
 9 | aaa = foo.mkdir(p)
   |       ^^^^^^^^^
10 | foo.makedirs(p)
11 | foo.rename(p)
   |

PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
  --> import_as.py:10:1
   |
 8 | aa = foo.chmod(p)
 9 | aaa = foo.mkdir(p)
10 | foo.makedirs(p)
   | ^^^^^^^^^^^^
11 | foo.rename(p)
12 | foo.replace(p)
   |

PTH104 `os.rename()` should be replaced by `Path.rename()`
  --> import_as.py:11:1
   |
 9 | aaa = foo.mkdir(p)
10 | foo.makedirs(p)
11 | foo.rename(p)
   | ^^^^^^^^^^
12 | foo.replace(p)
13 | foo.rmdir(p)
   |
help: Replace with `Path(...).rename(...)`

PTH105 `os.replace()` should be replaced by `Path.replace()`
  --> import_as.py:12:1
   |
10 | foo.makedirs(p)
11 | foo.rename(p)
12 | foo.replace(p)
   | ^^^^^^^^^^^
13 | foo.rmdir(p)
14 | foo.remove(p)
   |
help: Replace with `Path(...).replace(...)`

PTH106 [*] `os.rmdir()` should be replaced by `Path.rmdir()`
  --> import_as.py:13:1
   |
11 | foo.rename(p)
12 | foo.replace(p)
13 | foo.rmdir(p)
   | ^^^^^^^^^
14 | foo.remove(p)
15 | foo.unlink(p)
   |
help: Replace with `Path(...).rmdir()`

ℹ Safe fix
1  1  | import os as foo
2  2  | import os.path as foo_p
   3  |+import pathlib
3  4  | 
4  5  | p = "/foo"
5  6  | q = "bar"
--------------------------------------------------------------------------------
10 11 | foo.makedirs(p)
11 12 | foo.rename(p)
12 13 | foo.replace(p)
13    |-foo.rmdir(p)
   14 |+pathlib.Path(p).rmdir()
14 15 | foo.remove(p)
15 16 | foo.unlink(p)
16 17 | foo.getcwd(p)

PTH107 [*] `os.remove()` should be replaced by `Path.unlink()`
  --> import_as.py:14:1
   |
12 | foo.replace(p)
13 | foo.rmdir(p)
14 | foo.remove(p)
   | ^^^^^^^^^^
15 | foo.unlink(p)
16 | foo.getcwd(p)
   |
help: Replace with `Path(...).unlink()`

ℹ Safe fix
1  1  | import os as foo
2  2  | import os.path as foo_p
   3  |+import pathlib
3  4  | 
4  5  | p = "/foo"
5  6  | q = "bar"
--------------------------------------------------------------------------------
11 12 | foo.rename(p)
12 13 | foo.replace(p)
13 14 | foo.rmdir(p)
14    |-foo.remove(p)
   15 |+pathlib.Path(p).unlink()
15 16 | foo.unlink(p)
16 17 | foo.getcwd(p)
17 18 | b = foo_p.exists(p)

PTH108 [*] `os.unlink()` should be replaced by `Path.unlink()`
  --> import_as.py:15:1
   |
13 | foo.rmdir(p)
14 | foo.remove(p)
15 | foo.unlink(p)
   | ^^^^^^^^^^
16 | foo.getcwd(p)
17 | b = foo_p.exists(p)
   |
help: Replace with `Path(...).unlink()`

ℹ Safe fix
1  1  | import os as foo
2  2  | import os.path as foo_p
   3  |+import pathlib
3  4  | 
4  5  | p = "/foo"
5  6  | q = "bar"
--------------------------------------------------------------------------------
12 13 | foo.replace(p)
13 14 | foo.rmdir(p)
14 15 | foo.remove(p)
15    |-foo.unlink(p)
   16 |+pathlib.Path(p).unlink()
16 17 | foo.getcwd(p)
17 18 | b = foo_p.exists(p)
18 19 | bb = foo_p.expanduser(p)

PTH109 `os.getcwd()` should be replaced by `Path.cwd()`
  --> import_as.py:16:1
   |
14 | foo.remove(p)
15 | foo.unlink(p)
16 | foo.getcwd(p)
   | ^^^^^^^^^^
17 | b = foo_p.exists(p)
18 | bb = foo_p.expanduser(p)
   |
help: Replace with `Path.cwd()`

PTH110 [*] `os.path.exists()` should be replaced by `Path.exists()`
  --> import_as.py:17:5
   |
15 | foo.unlink(p)
16 | foo.getcwd(p)
17 | b = foo_p.exists(p)
   |     ^^^^^^^^^^^^
18 | bb = foo_p.expanduser(p)
19 | bbb = foo_p.isdir(p)
   |
help: Replace with `Path(...).exists()`

ℹ Safe fix
1  1  | import os as foo
2  2  | import os.path as foo_p
   3  |+import pathlib
3  4  | 
4  5  | p = "/foo"
5  6  | q = "bar"
--------------------------------------------------------------------------------
14 15 | foo.remove(p)
15 16 | foo.unlink(p)
16 17 | foo.getcwd(p)
17    |-b = foo_p.exists(p)
   18 |+b = pathlib.Path(p).exists()
18 19 | bb = foo_p.expanduser(p)
19 20 | bbb = foo_p.isdir(p)
20 21 | bbbb = foo_p.isfile(p)

PTH111 [*] `os.path.expanduser()` should be replaced by `Path.expanduser()`
  --> import_as.py:18:6
   |
16 | foo.getcwd(p)
17 | b = foo_p.exists(p)
18 | bb = foo_p.expanduser(p)
   |      ^^^^^^^^^^^^^^^^
19 | bbb = foo_p.isdir(p)
20 | bbbb = foo_p.isfile(p)
   |
help: Replace with `Path(...).expanduser()`

ℹ Safe fix
1  1  | import os as foo
2  2  | import os.path as foo_p
   3  |+import pathlib
3  4  | 
4  5  | p = "/foo"
5  6  | q = "bar"
--------------------------------------------------------------------------------
15 16 | foo.unlink(p)
16 17 | foo.getcwd(p)
17 18 | b = foo_p.exists(p)
18    |-bb = foo_p.expanduser(p)
   19 |+bb = pathlib.Path(p).expanduser()
19 20 | bbb = foo_p.isdir(p)
20 21 | bbbb = foo_p.isfile(p)
21 22 | bbbbb = foo_p.islink(p)

PTH112 [*] `os.path.isdir()` should be replaced by `Path.is_dir()`
  --> import_as.py:19:7
   |
17 | b = foo_p.exists(p)
18 | bb = foo_p.expanduser(p)
19 | bbb = foo_p.isdir(p)
   |       ^^^^^^^^^^^
20 | bbbb = foo_p.isfile(p)
21 | bbbbb = foo_p.islink(p)
   |
help: Replace with `Path(...).is_dir()`

ℹ Safe fix
1  1  | import os as foo
2  2  | import os.path as foo_p
   3  |+import pathlib
3  4  | 
4  5  | p = "/foo"
5  6  | q = "bar"
--------------------------------------------------------------------------------
16 17 | foo.getcwd(p)
17 18 | b = foo_p.exists(p)
18 19 | bb = foo_p.expanduser(p)
19    |-bbb = foo_p.isdir(p)
   20 |+bbb = pathlib.Path(p).is_dir()
20 21 | bbbb = foo_p.isfile(p)
21 22 | bbbbb = foo_p.islink(p)
22 23 | foo.readlink(p)

PTH113 [*] `os.path.isfile()` should be replaced by `Path.is_file()`
  --> import_as.py:20:8
   |
18 | bb = foo_p.expanduser(p)
19 | bbb = foo_p.isdir(p)
20 | bbbb = foo_p.isfile(p)
   |        ^^^^^^^^^^^^
21 | bbbbb = foo_p.islink(p)
22 | foo.readlink(p)
   |
help: Replace with `Path(...).is_file()`

ℹ Safe fix
1  1  | import os as foo
2  2  | import os.path as foo_p
   3  |+import pathlib
3  4  | 
4  5  | p = "/foo"
5  6  | q = "bar"
--------------------------------------------------------------------------------
17 18 | b = foo_p.exists(p)
18 19 | bb = foo_p.expanduser(p)
19 20 | bbb = foo_p.isdir(p)
20    |-bbbb = foo_p.isfile(p)
   21 |+bbbb = pathlib.Path(p).is_file()
21 22 | bbbbb = foo_p.islink(p)
22 23 | foo.readlink(p)
23 24 | foo.stat(p)

PTH114 [*] `os.path.islink()` should be replaced by `Path.is_symlink()`
  --> import_as.py:21:9
   |
19 | bbb = foo_p.isdir(p)
20 | bbbb = foo_p.isfile(p)
21 | bbbbb = foo_p.islink(p)
   |         ^^^^^^^^^^^^
22 | foo.readlink(p)
23 | foo.stat(p)
   |
help: Replace with `Path(...).is_symlink()`

ℹ Safe fix
1  1  | import os as foo
2  2  | import os.path as foo_p
   3  |+import pathlib
3  4  | 
4  5  | p = "/foo"
5  6  | q = "bar"
--------------------------------------------------------------------------------
18 19 | bb = foo_p.expanduser(p)
19 20 | bbb = foo_p.isdir(p)
20 21 | bbbb = foo_p.isfile(p)
21    |-bbbbb = foo_p.islink(p)
   22 |+bbbbb = pathlib.Path(p).is_symlink()
22 23 | foo.readlink(p)
23 24 | foo.stat(p)
24 25 | foo_p.isabs(p)

PTH115 [*] `os.readlink()` should be replaced by `Path.readlink()`
  --> import_as.py:22:1
   |
20 | bbbb = foo_p.isfile(p)
21 | bbbbb = foo_p.islink(p)
22 | foo.readlink(p)
   | ^^^^^^^^^^^^
23 | foo.stat(p)
24 | foo_p.isabs(p)
   |
help: Replace with `Path(...).readlink()`

ℹ Safe fix
1  1  | import os as foo
2  2  | import os.path as foo_p
   3  |+import pathlib
3  4  | 
4  5  | p = "/foo"
5  6  | q = "bar"
--------------------------------------------------------------------------------
19 20 | bbb = foo_p.isdir(p)
20 21 | bbbb = foo_p.isfile(p)
21 22 | bbbbb = foo_p.islink(p)
22    |-foo.readlink(p)
   23 |+pathlib.Path(p).readlink()
23 24 | foo.stat(p)
24 25 | foo_p.isabs(p)
25 26 | foo_p.join(p, q)

PTH116 `os.stat()` should be replaced by `Path.stat()`, `Path.owner()`, or `Path.group()`
  --> import_as.py:23:1
   |
21 | bbbbb = foo_p.islink(p)
22 | foo.readlink(p)
23 | foo.stat(p)
   | ^^^^^^^^
24 | foo_p.isabs(p)
25 | foo_p.join(p, q)
   |

PTH117 [*] `os.path.isabs()` should be replaced by `Path.is_absolute()`
  --> import_as.py:24:1
   |
22 | foo.readlink(p)
23 | foo.stat(p)
24 | foo_p.isabs(p)
   | ^^^^^^^^^^^
25 | foo_p.join(p, q)
26 | foo.sep.join([p, q])
   |
help: Replace with `Path(...).is_absolute()`

ℹ Safe fix
1  1  | import os as foo
2  2  | import os.path as foo_p
   3  |+import pathlib
3  4  | 
4  5  | p = "/foo"
5  6  | q = "bar"
--------------------------------------------------------------------------------
21 22 | bbbbb = foo_p.islink(p)
22 23 | foo.readlink(p)
23 24 | foo.stat(p)
24    |-foo_p.isabs(p)
   25 |+pathlib.Path(p).is_absolute()
25 26 | foo_p.join(p, q)
26 27 | foo.sep.join([p, q])
27 28 | foo.sep.join((p, q))

PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
  --> import_as.py:25:1
   |
23 | foo.stat(p)
24 | foo_p.isabs(p)
25 | foo_p.join(p, q)
   | ^^^^^^^^^^
26 | foo.sep.join([p, q])
27 | foo.sep.join((p, q))
   |

PTH118 `os.sep.join()` should be replaced by `Path` with `/` operator
  --> import_as.py:26:1
   |
24 | foo_p.isabs(p)
25 | foo_p.join(p, q)
26 | foo.sep.join([p, q])
   | ^^^^^^^^^^^^
27 | foo.sep.join((p, q))
28 | foo_p.basename(p)
   |

PTH118 `os.sep.join()` should be replaced by `Path` with `/` operator
  --> import_as.py:27:1
   |
25 | foo_p.join(p, q)
26 | foo.sep.join([p, q])
27 | foo.sep.join((p, q))
   | ^^^^^^^^^^^^
28 | foo_p.basename(p)
29 | foo_p.dirname(p)
   |

PTH119 [*] `os.path.basename()` should be replaced by `Path.name`
  --> import_as.py:28:1
   |
26 | foo.sep.join([p, q])
27 | foo.sep.join((p, q))
28 | foo_p.basename(p)
   | ^^^^^^^^^^^^^^
29 | foo_p.dirname(p)
30 | foo_p.samefile(p)
   |
help: Replace with `Path(...).name`

ℹ Safe fix
1  1  | import os as foo
2  2  | import os.path as foo_p
   3  |+import pathlib
3  4  | 
4  5  | p = "/foo"
5  6  | q = "bar"
--------------------------------------------------------------------------------
25 26 | foo_p.join(p, q)
26 27 | foo.sep.join([p, q])
27 28 | foo.sep.join((p, q))
28    |-foo_p.basename(p)
   29 |+pathlib.Path(p).name
29 30 | foo_p.dirname(p)
30 31 | foo_p.samefile(p)
31 32 | foo_p.splitext(p)

PTH120 [*] `os.path.dirname()` should be replaced by `Path.parent`
  --> import_as.py:29:1
   |
27 | foo.sep.join((p, q))
28 | foo_p.basename(p)
29 | foo_p.dirname(p)
   | ^^^^^^^^^^^^^
30 | foo_p.samefile(p)
31 | foo_p.splitext(p)
   |
help: Replace with `Path(...).parent`

ℹ Safe fix
1  1  | import os as foo
2  2  | import os.path as foo_p
   3  |+import pathlib
3  4  | 
4  5  | p = "/foo"
5  6  | q = "bar"
--------------------------------------------------------------------------------
26 27 | foo.sep.join([p, q])
27 28 | foo.sep.join((p, q))
28 29 | foo_p.basename(p)
29    |-foo_p.dirname(p)
   30 |+pathlib.Path(p).parent
30 31 | foo_p.samefile(p)
31 32 | foo_p.splitext(p)

PTH121 `os.path.samefile()` should be replaced by `Path.samefile()`
  --> import_as.py:30:1
   |
28 | foo_p.basename(p)
29 | foo_p.dirname(p)
30 | foo_p.samefile(p)
   | ^^^^^^^^^^^^^^
31 | foo_p.splitext(p)
   |
help: Replace with `Path(...).samefile()`

PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
  --> import_as.py:31:1
   |
29 | foo_p.dirname(p)
30 | foo_p.samefile(p)
31 | foo_p.splitext(p)
   | ^^^^^^^^^^^^^^
   |

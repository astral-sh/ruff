---
source: crates/ruff_linter/src/rules/numpy/mod.rs
---
NPY201_2.py:4:5: NPY201 `np.obj2sctype` will be removed without replacement in NumPy 2.0
  |
2 |     import numpy as np
3 | 
4 |     np.obj2sctype(int)
  |     ^^^^^^^^^^^^^ NPY201
5 | 
6 |     np.PINF
  |

NPY201_2.py:6:5: NPY201 [*] `np.PINF` will be removed in NumPy 2.0. Use `numpy.inf` instead.
  |
4 |     np.obj2sctype(int)
5 | 
6 |     np.PINF
  |     ^^^^^^^ NPY201
7 | 
8 |     np.PZERO
  |
  = help: Replace with `numpy.inf`

ℹ Safe fix
3 3 | 
4 4 |     np.obj2sctype(int)
5 5 | 
6   |-    np.PINF
  6 |+    np.inf
7 7 | 
8 8 |     np.PZERO
9 9 | 

NPY201_2.py:8:5: NPY201 [*] `np.PZERO` will be removed in NumPy 2.0. Use `0.0` instead.
   |
 6 |     np.PINF
 7 | 
 8 |     np.PZERO
   |     ^^^^^^^^ NPY201
 9 | 
10 |     np.recfromcsv
   |
   = help: Replace with `0.0`

ℹ Safe fix
5 5 | 
6 6 |     np.PINF
7 7 | 
8   |-    np.PZERO
  8 |+    0.0
9 9 | 
10 10 |     np.recfromcsv
11 11 | 

NPY201_2.py:10:5: NPY201 `np.recfromcsv` will be removed in NumPy 2.0. Use `np.genfromtxt` with comma delimiter instead.
   |
 8 |     np.PZERO
 9 | 
10 |     np.recfromcsv
   |     ^^^^^^^^^^^^^ NPY201
11 | 
12 |     np.recfromtxt
   |

NPY201_2.py:12:5: NPY201 `np.recfromtxt` will be removed in NumPy 2.0. Use `np.genfromtxt` instead.
   |
10 |     np.recfromcsv
11 | 
12 |     np.recfromtxt
   |     ^^^^^^^^^^^^^ NPY201
13 | 
14 |     np.round_(12.34)
   |

NPY201_2.py:14:5: NPY201 [*] `np.round_` will be removed in NumPy 2.0. Use `numpy.round` instead.
   |
12 |     np.recfromtxt
13 | 
14 |     np.round_(12.34)
   |     ^^^^^^^^^ NPY201
15 | 
16 |     np.safe_eval
   |
   = help: Replace with `numpy.round`

ℹ Safe fix
11 11 | 
12 12 |     np.recfromtxt
13 13 | 
14    |-    np.round_(12.34)
   14 |+    np.round(12.34)
15 15 | 
16 16 |     np.safe_eval
17 17 | 

NPY201_2.py:16:5: NPY201 [*] `np.safe_eval` will be removed in NumPy 2.0. Use `ast.literal_eval` instead.
   |
14 |     np.round_(12.34)
15 | 
16 |     np.safe_eval
   |     ^^^^^^^^^^^^ NPY201
17 | 
18 |     np.sctype2char
   |
   = help: Replace with `ast.literal_eval`

ℹ Safe fix
   1  |+from ast import literal_eval
1  2  | def func():
2  3  |     import numpy as np
3  4  | 
--------------------------------------------------------------------------------
13 14 | 
14 15 |     np.round_(12.34)
15 16 | 
16    |-    np.safe_eval
   17 |+    literal_eval
17 18 | 
18 19 |     np.sctype2char
19 20 | 

NPY201_2.py:18:5: NPY201 `np.sctype2char` will be removed without replacement in NumPy 2.0
   |
16 |     np.safe_eval
17 | 
18 |     np.sctype2char
   |     ^^^^^^^^^^^^^^ NPY201
19 | 
20 |     np.sctypes
   |

NPY201_2.py:20:5: NPY201 `np.sctypes` will be removed without replacement in NumPy 2.0
   |
18 |     np.sctype2char
19 | 
20 |     np.sctypes
   |     ^^^^^^^^^^ NPY201
21 | 
22 |     np.seterrobj
   |

NPY201_2.py:22:5: NPY201 `np.seterrobj` will be removed in NumPy 2.0. Use the `np.errstate` context manager instead.
   |
20 |     np.sctypes
21 | 
22 |     np.seterrobj
   |     ^^^^^^^^^^^^ NPY201
23 | 
24 |     np.set_numeric_ops
   |

NPY201_2.py:26:5: NPY201 `np.set_string_function` will be removed in NumPy 2.0. Use `np.set_printoptions` for custom printing of NumPy objects.
   |
24 |     np.set_numeric_ops
25 | 
26 |     np.set_string_function
   |     ^^^^^^^^^^^^^^^^^^^^^^ NPY201
27 | 
28 |     np.singlecomplex(12+1j)
   |

NPY201_2.py:28:5: NPY201 [*] `np.singlecomplex` will be removed in NumPy 2.0. Use `numpy.complex64` instead.
   |
26 |     np.set_string_function
27 | 
28 |     np.singlecomplex(12+1j)
   |     ^^^^^^^^^^^^^^^^ NPY201
29 | 
30 |     np.string_("asdf")
   |
   = help: Replace with `numpy.complex64`

ℹ Safe fix
25 25 | 
26 26 |     np.set_string_function
27 27 | 
28    |-    np.singlecomplex(12+1j)
   28 |+    np.complex64(12+1j)
29 29 | 
30 30 |     np.string_("asdf")
31 31 | 

NPY201_2.py:30:5: NPY201 [*] `np.string_` will be removed in NumPy 2.0. Use `numpy.bytes_` instead.
   |
28 |     np.singlecomplex(12+1j)
29 | 
30 |     np.string_("asdf")
   |     ^^^^^^^^^^ NPY201
31 | 
32 |     np.source
   |
   = help: Replace with `numpy.bytes_`

ℹ Safe fix
27 27 | 
28 28 |     np.singlecomplex(12+1j)
29 29 | 
30    |-    np.string_("asdf")
   30 |+    np.bytes_("asdf")
31 31 | 
32 32 |     np.source
33 33 | 

NPY201_2.py:32:5: NPY201 [*] `np.source` will be removed in NumPy 2.0. Use `inspect.getsource` instead.
   |
30 |     np.string_("asdf")
31 | 
32 |     np.source
   |     ^^^^^^^^^ NPY201
33 | 
34 |     np.tracemalloc_domain
   |
   = help: Replace with `inspect.getsource`

ℹ Safe fix
   1  |+from inspect import getsource
1  2  | def func():
2  3  |     import numpy as np
3  4  | 
--------------------------------------------------------------------------------
29 30 | 
30 31 |     np.string_("asdf")
31 32 | 
32    |-    np.source
   33 |+    getsource
33 34 | 
34 35 |     np.tracemalloc_domain
35 36 | 

NPY201_2.py:34:5: NPY201 [*] `np.tracemalloc_domain` will be removed in NumPy 2.0. Use `numpy.lib.tracemalloc_domain` instead.
   |
32 |     np.source
33 | 
34 |     np.tracemalloc_domain
   |     ^^^^^^^^^^^^^^^^^^^^^ NPY201
35 | 
36 |     np.unicode_("asf")
   |
   = help: Replace with `numpy.lib.tracemalloc_domain`

ℹ Safe fix
   1  |+from numpy.lib import tracemalloc_domain
1  2  | def func():
2  3  |     import numpy as np
3  4  | 
--------------------------------------------------------------------------------
31 32 | 
32 33 |     np.source
33 34 | 
34    |-    np.tracemalloc_domain
   35 |+    tracemalloc_domain
35 36 | 
36 37 |     np.unicode_("asf")
37 38 | 

NPY201_2.py:36:5: NPY201 [*] `np.unicode_` will be removed in NumPy 2.0. Use `numpy.str_` instead.
   |
34 |     np.tracemalloc_domain
35 | 
36 |     np.unicode_("asf")
   |     ^^^^^^^^^^^ NPY201
37 | 
38 |     np.who()
   |
   = help: Replace with `numpy.str_`

ℹ Safe fix
33 33 | 
34 34 |     np.tracemalloc_domain
35 35 | 
36    |-    np.unicode_("asf")
   36 |+    np.str_("asf")
37 37 | 
38 38 |     np.who()
39 39 | 

NPY201_2.py:38:5: NPY201 `np.who` will be removed in NumPy 2.0. Use an IDE variable explorer or `locals()` instead.
   |
36 |     np.unicode_("asf")
37 | 
38 |     np.who()
   |     ^^^^^^ NPY201
39 | 
40 |     np.row_stack(([1,2], [3,4]))
   |

NPY201_2.py:40:5: NPY201 [*] `np.row_stack` will be removed in NumPy 2.0. Use `numpy.vstack` instead.
   |
38 |     np.who()
39 | 
40 |     np.row_stack(([1,2], [3,4]))
   |     ^^^^^^^^^^^^ NPY201
41 | 
42 |     np.alltrue([True, True])
   |
   = help: Replace with `numpy.vstack`

ℹ Safe fix
37 37 | 
38 38 |     np.who()
39 39 | 
40    |-    np.row_stack(([1,2], [3,4]))
   40 |+    np.vstack(([1,2], [3,4]))
41 41 | 
42 42 |     np.alltrue([True, True])
43 43 | 

NPY201_2.py:42:5: NPY201 [*] `np.alltrue` will be removed in NumPy 2.0. Use `numpy.all` instead.
   |
40 |     np.row_stack(([1,2], [3,4]))
41 | 
42 |     np.alltrue([True, True])
   |     ^^^^^^^^^^ NPY201
43 | 
44 |     np.sometrue([True, False])
   |
   = help: Replace with `numpy.all`

ℹ Safe fix
39 39 | 
40 40 |     np.row_stack(([1,2], [3,4]))
41 41 | 
42    |-    np.alltrue([True, True])
   42 |+    np.all([True, True])
43 43 | 
44 44 |     np.sometrue([True, False])
45 45 | 

NPY201_2.py:44:5: NPY201 [*] `np.sometrue` will be removed in NumPy 2.0. Use `numpy.any` instead.
   |
42 |     np.alltrue([True, True])
43 | 
44 |     np.sometrue([True, False])
   |     ^^^^^^^^^^^ NPY201
45 | 
46 |     np.cumproduct([1, 2, 3])
   |
   = help: Replace with `numpy.any`

ℹ Safe fix
41 41 | 
42 42 |     np.alltrue([True, True])
43 43 | 
44    |-    np.sometrue([True, False])
   44 |+    np.any([True, False])
45 45 | 
46 46 |     np.cumproduct([1, 2, 3])
47 47 | 

NPY201_2.py:46:5: NPY201 [*] `np.cumproduct` will be removed in NumPy 2.0. Use `numpy.cumprod` instead.
   |
44 |     np.sometrue([True, False])
45 | 
46 |     np.cumproduct([1, 2, 3])
   |     ^^^^^^^^^^^^^ NPY201
47 | 
48 |     np.product([1, 2, 3])
   |
   = help: Replace with `numpy.cumprod`

ℹ Safe fix
43 43 | 
44 44 |     np.sometrue([True, False])
45 45 | 
46    |-    np.cumproduct([1, 2, 3])
   46 |+    np.cumprod([1, 2, 3])
47 47 | 
48 48 |     np.product([1, 2, 3])
49 49 | 

NPY201_2.py:48:5: NPY201 [*] `np.product` will be removed in NumPy 2.0. Use `numpy.prod` instead.
   |
46 |     np.cumproduct([1, 2, 3])
47 | 
48 |     np.product([1, 2, 3])
   |     ^^^^^^^^^^ NPY201
49 | 
50 |     np.trapz([1, 2, 3])
   |
   = help: Replace with `numpy.prod`

ℹ Safe fix
45 45 | 
46 46 |     np.cumproduct([1, 2, 3])
47 47 | 
48    |-    np.product([1, 2, 3])
   48 |+    np.prod([1, 2, 3])
49 49 | 
50 50 |     np.trapz([1, 2, 3])
51 51 | 

NPY201_2.py:50:5: NPY201 [*] `np.trapz` will be removed in NumPy 2.0. Use `numpy.trapezoid` on NumPy 2.0, or ignore this warning on earlier versions.
   |
48 |     np.product([1, 2, 3])
49 | 
50 |     np.trapz([1, 2, 3])
   |     ^^^^^^^^ NPY201
51 | 
52 |     np.in1d([1, 2], [1, 3, 5])
   |
   = help: Replace with `numpy.trapezoid` (requires NumPy 2.0 or greater)

ℹ Unsafe fix
47 47 | 
48 48 |     np.product([1, 2, 3])
49 49 | 
50    |-    np.trapz([1, 2, 3])
   50 |+    np.trapezoid([1, 2, 3])
51 51 | 
52 52 |     np.in1d([1, 2], [1, 3, 5])
53 53 | 

NPY201_2.py:52:5: NPY201 [*] `np.in1d` will be removed in NumPy 2.0. Use `numpy.isin` instead.
   |
50 |     np.trapz([1, 2, 3])
51 | 
52 |     np.in1d([1, 2], [1, 3, 5])
   |     ^^^^^^^ NPY201
53 | 
54 |     np.AxisError
   |
   = help: Replace with `numpy.isin`

ℹ Safe fix
49 49 | 
50 50 |     np.trapz([1, 2, 3])
51 51 | 
52    |-    np.in1d([1, 2], [1, 3, 5])
   52 |+    np.isin([1, 2], [1, 3, 5])
53 53 | 
54 54 |     np.AxisError
55 55 | 

NPY201_2.py:54:5: NPY201 [*] `np.AxisError` will be removed in NumPy 2.0. Use `numpy.exceptions.AxisError` instead.
   |
52 |     np.in1d([1, 2], [1, 3, 5])
53 | 
54 |     np.AxisError
   |     ^^^^^^^^^^^^ NPY201
55 | 
56 |     np.ComplexWarning
   |
   = help: Replace with `numpy.exceptions.AxisError`

ℹ Safe fix
   1  |+from numpy.exceptions import AxisError
1  2  | def func():
2  3  |     import numpy as np
3  4  | 
--------------------------------------------------------------------------------
51 52 | 
52 53 |     np.in1d([1, 2], [1, 3, 5])
53 54 | 
54    |-    np.AxisError
   55 |+    AxisError
55 56 | 
56 57 |     np.ComplexWarning
57 58 | 

NPY201_2.py:56:5: NPY201 [*] `np.ComplexWarning` will be removed in NumPy 2.0. Use `numpy.exceptions.ComplexWarning` instead.
   |
54 |     np.AxisError
55 | 
56 |     np.ComplexWarning
   |     ^^^^^^^^^^^^^^^^^ NPY201
57 | 
58 |     np.compare_chararrays
   |
   = help: Replace with `numpy.exceptions.ComplexWarning`

ℹ Safe fix
   1  |+from numpy.exceptions import ComplexWarning
1  2  | def func():
2  3  |     import numpy as np
3  4  | 
--------------------------------------------------------------------------------
53 54 | 
54 55 |     np.AxisError
55 56 | 
56    |-    np.ComplexWarning
   57 |+    ComplexWarning
57 58 | 
58 59 |     np.compare_chararrays
59 60 | 

NPY201_2.py:58:5: NPY201 [*] `np.compare_chararrays` will be removed in NumPy 2.0. Use `numpy.char.compare_chararrays` instead.
   |
56 |     np.ComplexWarning
57 | 
58 |     np.compare_chararrays
   |     ^^^^^^^^^^^^^^^^^^^^^ NPY201
59 | 
60 |     try:
   |
   = help: Replace with `numpy.char.compare_chararrays`

ℹ Safe fix
   1  |+from numpy.char import compare_chararrays
1  2  | def func():
2  3  |     import numpy as np
3  4  | 
--------------------------------------------------------------------------------
55 56 | 
56 57 |     np.ComplexWarning
57 58 | 
58    |-    np.compare_chararrays
   59 |+    compare_chararrays
59 60 | 
60 61 |     try:
61 62 |         np.all([True, True])

NPY201_2.py:63:9: NPY201 [*] `np.alltrue` will be removed in NumPy 2.0. Use `numpy.all` instead.
   |
61 |         np.all([True, True])
62 |     except TypeError:
63 |         np.alltrue([True, True])  # Should emit a warning here (`except TypeError`, not `except AttributeError`)
   |         ^^^^^^^^^^ NPY201
64 | 
65 |     try:
   |
   = help: Replace with `numpy.all`

ℹ Safe fix
60 60 |     try:
61 61 |         np.all([True, True])
62 62 |     except TypeError:
63    |-        np.alltrue([True, True])  # Should emit a warning here (`except TypeError`, not `except AttributeError`)
   63 |+        np.all([True, True])  # Should emit a warning here (`except TypeError`, not `except AttributeError`)
64 64 | 
65 65 |     try:
66 66 |         np.anyyyy([True, True])

NPY201_2.py:68:9: NPY201 [*] `np.sometrue` will be removed in NumPy 2.0. Use `numpy.any` instead.
   |
66 |         np.anyyyy([True, True])
67 |     except AttributeError:
68 |         np.sometrue([True, True])  # Should emit a warning here
   |         ^^^^^^^^^^^ NPY201
69 |                                    # (must have an attribute access of the undeprecated name in the `try` body for it to be ignored)
   |
   = help: Replace with `numpy.any`

ℹ Safe fix
65 65 |     try:
66 66 |         np.anyyyy([True, True])
67 67 |     except AttributeError:
68    |-        np.sometrue([True, True])  # Should emit a warning here
   68 |+        np.any([True, True])  # Should emit a warning here
69 69 |                                    # (must have an attribute access of the undeprecated name in the `try` body for it to be ignored)
70 70 | 
71 71 |     try:

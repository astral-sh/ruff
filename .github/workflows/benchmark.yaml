name: Benchmark

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  build-baseline-binary:
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    name: Build Benchmark Binary | ${{ matrix.os }}

    steps:
      - name: "Checkout Branch"
        uses: actions/checkout@v3

      - name: "Install Rust toolchain"
        run: rustup show

      - uses: Swatinem/rust-cache@v1

      - name: "Build benchmarks"
        uses: actions-rs/cargo@v1
        with:
          command: bench
          args: -p ruff_benchmark --no-run

      - name: "Save Binary"
        uses: actions/upload-artifact@v3
        with:
          name: ruff-benchmark-${{ matrix.os }}
          path: ./target/release/ruff_benchmark

  run-benchmark:
    if: github.event_name == 'pull_request'
    name: "Run | ${{ matrix.os }}"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: "PR - Checkout Branch"
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: "PR - Install Rust toolchain"
        run: rustup show

      - uses: Swatinem/rust-cache@v1

      - name: "PR - Build benchmarks"
        uses: actions-rs/cargo@v1
        with:
          command: bench
          args: -p ruff_benchmark --no-run

      - name: "PR - Run benchmarks"
        run: cargo benchmark --save-baseline=pr

      - name: "Main - Download pre-built binary"
        uses: dawidd6/action-download-artifact@v2
        id: download_base_bin
        with:
          name: ruff-benchmark-${{ matrix.os }}
          commit: ${{ github.event.pull_request.base.sha }}
          path: ./target/release/ruff_benchmark
          if_no_artifact_found: ignore
          search_artifacts: true # Necessary because of build matrix (different run for each os)

      - name: "Main - Set executable flag"
        if: steps.download_base_bin.outputs.found_artifact == 'true'
        run: chmod +x ./target/release/ruff_benchmark

      - name: "Main - Checkout Branch"
        if: steps.download_base_bin.outputs.found_artifact != 'true'
        uses: actions/checkout@v3
        with:
          clean: false
          ref: main

      - name: "Main - Install Rust toolchain"
        if: steps.download_base_bin.outputs.found_artifact != 'true'
        run: rustup show

      - name: "Main - Build benchmarks"
        if: steps.download_base_bin.outputs.found_artifact != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: bench
          args: -p ruff_benchmark --no-run

      - name: "Main - Run benchmarks"
        run: cargo benchmark --save-baseline=main

      - name: "Upload benchmark results"
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results-${{ matrix.os }}
          path: ./target/criterion

      # Cleanup
      - name: Remove Criterion Artifact
        uses: JesseTG/rm@v1.0.3
        with:
          path: ./target/criterion

  benchmark-compare:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Compare
    needs:
      - run-benchmark

    steps:
    - name: "Install Rust toolchain"
      run: rustup show

    - name: "Install critcmp"
      # Use debug build: Building takes much longer than the "slowness" of using the debug build.
      run: cargo install --debug critcmp

    - name: "Linux | Download PR benchmark results"
      uses: actions/download-artifact@v3
      with:
        name: benchmark-results-ubuntu-latest
        path: ./target/criterion

    - name: "Linux | Compare benchmark results"
      shell: bash
      run: |
        echo "### Benchmark Results" >> summary.md
        echo "#### Linux" >> summary.md
        echo "\`\`\`" >> summary.md
        critcmp main pr >> summary.md
        echo "\`\`\`" >> summary.md
        echo "" >> summary.md

    - name: "Linux | Cleanup benchmark results"
      run: rm -rf ./target/criterion

    - name: "Windows | Download PR benchmark results"
      uses: actions/download-artifact@v3
      with:
        name: benchmark-results-windows-latest
        path: ./target/criterion

    - name: "Windows | Compare benchmark results"
      shell: bash
      run: |
        echo "#### Windows" >> summary.md
        echo "\`\`\`" >> summary.md
        critcmp main pr >> summary.md
        echo "\`\`\`" >> summary.md
        echo "" >> summary.md

        echo ${{ github.event.pull_request.number }} > pr-number

        cat summary.md > $GITHUB_STEP_SUMMARY

    - uses: actions/upload-artifact@v3
      name: Upload PR Number
      with:
        name: pr-number
        path: pr-number

    - uses: actions/upload-artifact@v3
      name: Upload Summary
      with:
        name: summary
        path: summary.md

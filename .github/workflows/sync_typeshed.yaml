name: Sync typeshed

on:
  workflow_dispatch:
  schedule:
    # Run on the 1st and the 15th of every month:
    - cron: "0 0 1,15 * *"

env:
  FORCE_COLOR: 1
  GH_TOKEN: ${{ github.token }}

jobs:
  sync:
    name: Sync typeshed
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # Don't run the cron job on forks:
    if: ${{ github.repository == 'astral-sh/ruff' || github.event_name != 'schedule' }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        name: Checkout Ruff
        with:
          path: ruff
          persist-credentials: true
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        name: Checkout typeshed
        with:
          repository: python/typeshed
          path: typeshed
          persist-credentials: false
      - name: Setup git
        run: |
          git config --global user.name typeshedbot
          git config --global user.email '<>'
      - uses: astral-sh/setup-uv@bd01e18f51369d5a26f1651c3cb451d3417e3bba # v6.3.1
      - name: Sync typeshed
        id: sync
        run: |
          docstring_adder="git+https://github.com/astral-sh/docstring-adder.git@6de51c5f44aea11fe8c8f2d30f9ee0683682c3d2"

          # Run with the full matrix of Python versions supported by typeshed,
          # so that we codemod in docstrings that only exist on certain versions.
          #
          # The codemod will only add docstrings to functions/classes that do not
          # already have docstrings. We run with Python 3.14 before running with
          # any other Python version so that we get the Python 3.14 version of the
          # docstring for a definition that exists on all Python versions: if we
          # ran with Python 3.9 first, then the later runs with Python 3.10+ would
          # not modify the docstring that had already been added using the old version of Python.
          #
          # TODO: In order to add docstrings for platform-specific APIs, we would also
          # need to run the codemod on Windows. We get the runtime docstrings by inspecting
          # the docstrings at runtime, so if an API doesn't exist at runtime (because e.g.
          # it's Windows-specific and we're running on Linux), then we won't add a docstring to it.
          #
          uvx --python=3.14 --force-reinstall --from="${docstring_adder}" add-docstrings --stdlib-path ./typeshed/stdlib
          uvx --python=3.13 --force-reinstall --from="${docstring_adder}" add-docstrings --stdlib-path ./typeshed/stdlib
          uvx --python=3.12 --force-reinstall --from="${docstring_adder}" add-docstrings --stdlib-path ./typeshed/stdlib
          uvx --python=3.11 --force-reinstall --from="${docstring_adder}" add-docstrings --stdlib-path ./typeshed/stdlib
          uvx --python=3.10 --force-reinstall --from="${docstring_adder}" add-docstrings --stdlib-path ./typeshed/stdlib
          uvx --python=3.9 --force-reinstall --from="${docstring_adder}" add-docstrings --stdlib-path ./typeshed/stdlib

          # Here we just reformat the codemodded stubs so that they are
          # consistent with the other typeshed stubs around them.
          # Typeshed formats code using black in their CI, so we just invoke
          # black on the stubs the same way that typeshed does.
          uvx --directory=typeshed pre-commit run -a black

          rm -rf ruff/crates/ty_vendored/vendor/typeshed
          mkdir ruff/crates/ty_vendored/vendor/typeshed
          cp typeshed/README.md ruff/crates/ty_vendored/vendor/typeshed
          cp typeshed/LICENSE ruff/crates/ty_vendored/vendor/typeshed
          cp -r typeshed/stdlib ruff/crates/ty_vendored/vendor/typeshed/stdlib
          rm -rf ruff/crates/ty_vendored/vendor/typeshed/stdlib/@tests
          git -C typeshed rev-parse HEAD > ruff/crates/ty_vendored/vendor/typeshed/source_commit.txt
      - name: Commit the changes
        id: commit
        if: ${{ steps.sync.outcome == 'success' }}
        run: |
          cd ruff
          git checkout -b typeshedbot/sync-typeshed
          git add .
          git diff --staged --quiet || git commit -m "Sync typeshed. Source commit: https://github.com/python/typeshed/commit/$(git -C ../typeshed rev-parse HEAD)"
      - name: Create a PR
        if: ${{ steps.sync.outcome == 'success' && steps.commit.outcome == 'success' }}
        run: |
          cd ruff
          git push --force origin typeshedbot/sync-typeshed
          gh pr list --repo "$GITHUB_REPOSITORY" --head typeshedbot/sync-typeshed --json id --jq length | grep 1 && exit 0 # exit if there is existing pr
          gh pr create --title "[ty] Sync vendored typeshed stubs" --body "Close and reopen this PR to trigger CI" --label "ty"

  create-issue-on-failure:
    name: Create an issue if the typeshed sync failed
    runs-on: ubuntu-latest
    needs: [sync]
    if: ${{ github.repository == 'astral-sh/ruff' && always() && github.event_name == 'schedule' && needs.sync.result == 'failure' }}
    permissions:
      issues: write
    steps:
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.create({
              owner: "astral-sh",
              repo: "ruff",
              title: `Automated typeshed sync failed on ${new Date().toDateString()}`,
              body: "Run listed here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              labels: ["bug", "ty"],
            })
